/*Paquete*/
package ptovta;

/*Importaciones*/
import java.awt.Cursor;
import java.awt.HeadlessException;
import static ptovta.Princip.bIdle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.Iterator;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.WorkbookFactory;




/*Clase para hacer interfaz entre macropro 2.40 Thin Client y easy retail*/
public class InterMac240ThinCli extends javax.swing.JFrame
{            
    /*Bandera para saber cuando hay error*/
    private boolean             bErr        = false;   
    
    /*Contiene el color original del botón*/
    private java.awt.Color      colOri;
    
    
    
    /*Constructor sin argumentos*/
    public InterMac240ThinCli() 
    {
        /*Inicaliza los componentes gráficos*/
        initComponents();
        
        Star.lCargGral=null;
        
        /*Establece el listener del tabbed para controlar el foco del tecldo en cada pestaña*/
        javax.swing.event.ChangeListener chList = new javax.swing.event.ChangeListener() 
        {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent changeEvent) 
            {
                /*Obtiene el índice de la pestaña*/
                javax.swing.JTabbedPane stb = (javax.swing.JTabbedPane) changeEvent.getSource();
                int iInd = stb.getSelectedIndex();              
                
                /*Coloca el foco del teclado en el control correspondiente dependiendo del índice de la pestaña*/
                if(iInd==0)
                    jTInst.grabFocus();
                else if(iInd==1)
                    jTCli1.grabFocus();
                else if(iInd==2)
                    jTCarg1Flet.grabFocus();
                else if(iInd==3)
                    jTCtas.grabFocus();
            }
        };
        jTabb.addChangeListener(chList);

        /*Establece el título de los tags*/
        jTabb.setTitleAt(0, "Conexión");
        jTabb.setTitleAt(1, "Macro-Pro");
        jTabb.setTitleAt(2, "Joindata");
        jTabb.setTitleAt(3, "CONTPAQi");
        
        /*Establece el titulo de la ventana*/                
        this.setTitle("Interfaz Macropro 2.40 Thin Client, Usuario: <" + Login.sUsrG + "> " + Login.sFLog);        
        
        /*Establece el botón por default*/
        this.getRootPane().setDefaultButton(jBInter);
        
        /*Obtiene el color original que deben tener los botones*/
        colOri  = jBSal.getBackground();
        
        /*Esconde el link de ayuda*/
        jLAyu.setVisible(false);
        
        /*Centra la ventana*/
        this.setLocationRelativeTo(null);
        
        /*Cambia el icono de la forma, ya sea el personalizado por el usuario o el de default del sistema*/
        if(new File(new java.io.File("").getAbsolutePath() + "\\Logo.jpg").exists())
        {
            setIconImage(Toolkit.getDefaultToolkit().getImage(new java.io.File("").getAbsolutePath() + "\\Logo.jpg"));
        }
        else
            setIconImage(new ImageIcon(getClass().getResource(Star.sIconDef)).getImage());
        
        /*Pon el foco del teclado en el campo de la instancia*/
        jTInst.grabFocus();                                       
            
        /*Abre la base de datos*/        
        Connection  con;  
        try 
        {
            con = DriverManager.getConnection("jdbc:mysql://" + Star.sInstancia + ":" + Star.sPort + "/" + Star.sBD + "?user=" + Star.sUsuario + "&password=" + Star.sContrasenia );               
        } 
        catch(SQLException | HeadlessException e) 
        {   
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde l forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/    
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = ""; 
        
        /*Obtiene los datos de la configuración de la interfaz*/        
        try
        {
            sQ = "SELECT * FROM interbd WHERE tip = 'macthinconta'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces coloca la información en los controles*/
            if(rs.next())
            {
                /*Si el puerto sql es 0 entonces que sea 0*/
                String sPort        = rs.getString("port");
                if(sPort.compareTo("0")==0)
                    sPort           = "";
                
                /*Si el puerto easy retail es 0 entonces que sea 0*/
                String sPortE       = rs.getString("porteas");
                if(sPortE.compareTo("0")==0)
                    sPortE          = "";
                
                /*Coloca todos los datos en sus controles*/
                jTInst.setText      (rs.getString("inst"));
                jTInstE.setText     (rs.getString("insteas"));
                jTUsr.setText       (rs.getString("usr"));
                jTUsrE.setText      (rs.getString("usreas"));
                jPCont.setText      (Star.sDecryp(rs.getString("contra")));
                jPContE.setText     (Star.sDecryp(rs.getString("contraeas")));
                jTBD.setText        (rs.getString("bd"));
                jTBDE.setText       (rs.getString("bdeas"));
                jTPort.setText      (sPort);
                jTPortE.setText     (sPortE);
                jTNomConta.setText  (rs.getString("nom"));
                jTUsrConta.setText  (rs.getString("usr2"));
                jTRVta1.setText     (rs.getString("ctaremvta1"));
                jTRVta2.setText     (rs.getString("ctaremvta2"));
                jTRRent1.setText    (rs.getString("ctaremrta1"));
                jTRRent2.setText    (rs.getString("ctaremrta2"));
                jTRInte1.setText    (rs.getString("ctaremint1"));
                jTRInte2.setText    (rs.getString("ctaremint2"));
                jTIVAPendAc.setText (rs.getString("ivapendac"));
                jPContConta.setText (Star.sDecryp(rs.getString("contra2")));
                jTCargCV.setText    (rs.getString("cta1cv"));
                jTCarg1Flet.setText (rs.getString("cta1flet"));
                jTCarg2Flet.setText (rs.getString("cta2flet"));
                jTAbon1Flet.setText (rs.getString("cta3flet"));
                jTCarg1Hon.setText  (rs.getString("cta1hon"));
                jTCarg2Hon.setText  (rs.getString("cta2hon"));
                jTAbon1Hon.setText  (rs.getString("cta3hon"));
                jTCarg1Arr.setText  (rs.getString("cta1arr"));
                jTCarg2Arr.setText  (rs.getString("cta2arr"));
                jTAbon1Arr.setText  (rs.getString("cta3arr"));
                jTCarg1Merc.setText (rs.getString("cta1merc"));
                jTCarg2Merc.setText (rs.getString("cta2merc"));                
                jTCarg2Gast.setText (rs.getString("cta2gast"));
                jTRetIVAFlet.setText(rs.getString("retivaflet"));
                jTRetHono.setText   (rs.getString("retiva"));
                jTRetISR.setText    (rs.getString("retisr"));
                jTCarg2Gast.setText (rs.getString("cta2gast"));
                jTCarg1Vta.setText  (rs.getString("cta1vta"));
                jTAbon1Vta.setText  (rs.getString("cta2vta"));
                jTAbon2Vta.setText  (rs.getString("cta3vta"));
                jTAbon3Vta.setText  (rs.getString("cta4vta"));
                jTDevSobVta.setText (rs.getString("ctadevsobvta"));                
                jTGaran.setText     (rs.getString("ctagaran"));
                jTBanc.setText      (rs.getString("ctabanc"));
                jTIVAAcred.setText  (rs.getString("ctaivaacred"));
                jTIvaPendPag.setText(rs.getString("ctaivapendpag"));
                jTIvaXPag.setText   (rs.getString("ctaivaxpag"));
            }
        }
        catch(SQLException e)
        {
            //Cierra la base de datos y sal de la aplicación    
            if(Star.iCierrBas(con)==-1)
                return;

            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }
        
        //Cierra la base de datos y sal de la aplicación    
        Star.iCierrBas(con);
        
    }/*Fin de public InterMac240ThinClien() */        
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPPrincip = new javax.swing.JPanel();
        jTabb = new javax.swing.JTabbedPane();
        jP1 = new javax.swing.JPanel();
        jTInst = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTBD = new javax.swing.JTextField();
        jTUsr = new javax.swing.JTextField();
        jPCont = new javax.swing.JPasswordField();
        jBProb = new javax.swing.JButton();
        jCMosC = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jTPort = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTUsrConta = new javax.swing.JTextField();
        jTNomConta = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPContConta = new javax.swing.JPasswordField();
        jBProbConta = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jTInstE = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTUsrE = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPContE = new javax.swing.JPasswordField();
        jCMosCE = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();
        jTBDE = new javax.swing.JTextField();
        jTPortE = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jBProbE = new javax.swing.JButton();
        jPAdmin = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jBCli1 = new javax.swing.JButton();
        jTCli1 = new javax.swing.JTextField();
        jCSinCli = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jBCli2 = new javax.swing.JButton();
        jTCli2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jBCli3 = new javax.swing.JButton();
        jTCli3 = new javax.swing.JTextField();
        jTCli4 = new javax.swing.JTextField();
        jBCli4 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jBCli5 = new javax.swing.JButton();
        jTCli5 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jBAlma = new javax.swing.JButton();
        jTAlma = new javax.swing.JTextField();
        jCSinAlma = new javax.swing.JCheckBox();
        jCSinProvs = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        jBProv1 = new javax.swing.JButton();
        jTProv1 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jBProv2 = new javax.swing.JButton();
        jTProv2 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jBProv3 = new javax.swing.JButton();
        jTProv3 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jBVend = new javax.swing.JButton();
        jTVend = new javax.swing.JTextField();
        jCSinVend = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        jBProds1 = new javax.swing.JButton();
        jTProds1 = new javax.swing.JTextField();
        jCSinProds = new javax.swing.JCheckBox();
        jLabel33 = new javax.swing.JLabel();
        jBProds2 = new javax.swing.JButton();
        jTProds2 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jBProds3 = new javax.swing.JButton();
        jTProds3 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jBExist = new javax.swing.JButton();
        jTExist = new javax.swing.JTextField();
        jCSinExist = new javax.swing.JCheckBox();
        jLabel39 = new javax.swing.JLabel();
        jBComp1 = new javax.swing.JButton();
        jCSinVta = new javax.swing.JCheckBox();
        jTComp1 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jBComp2 = new javax.swing.JButton();
        jTComp2 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jBComp3 = new javax.swing.JButton();
        jTComp3 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jBComp4 = new javax.swing.JButton();
        jTComp4 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jBComp5 = new javax.swing.JButton();
        jTComp5 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jBVta1 = new javax.swing.JButton();
        jTVta1 = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jBVta2 = new javax.swing.JButton();
        jTVta2 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jBVta3 = new javax.swing.JButton();
        jTVta3 = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jBVta4 = new javax.swing.JButton();
        jTVta4 = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jBVta5 = new javax.swing.JButton();
        jTVta5 = new javax.swing.JTextField();
        jCSinComp = new javax.swing.JCheckBox();
        jLabel49 = new javax.swing.JLabel();
        jBCXC = new javax.swing.JButton();
        jTCXC = new javax.swing.JTextField();
        jCSinCXC = new javax.swing.JCheckBox();
        jLabel50 = new javax.swing.JLabel();
        jBCXP = new javax.swing.JButton();
        jTCXP = new javax.swing.JTextField();
        jCSinCXP = new javax.swing.JCheckBox();
        jLabel84 = new javax.swing.JLabel();
        jBCliClo = new javax.swing.JButton();
        jTCliCo = new javax.swing.JTextField();
        jCSinCliCo = new javax.swing.JCheckBox();
        jLabel86 = new javax.swing.JLabel();
        jBKard = new javax.swing.JButton();
        jTKard = new javax.swing.JTextField();
        jCSinKard = new javax.swing.JCheckBox();
        jLabel87 = new javax.swing.JLabel();
        jBSer1 = new javax.swing.JButton();
        jTSer1 = new javax.swing.JTextField();
        jCSinSer = new javax.swing.JCheckBox();
        jLabel97 = new javax.swing.JLabel();
        jBRem1 = new javax.swing.JButton();
        jTR1 = new javax.swing.JTextField();
        jCSinRem = new javax.swing.JCheckBox();
        jLabel98 = new javax.swing.JLabel();
        jTR2 = new javax.swing.JTextField();
        jBRem2 = new javax.swing.JButton();
        jLabel99 = new javax.swing.JLabel();
        jBRem3 = new javax.swing.JButton();
        jTR3 = new javax.swing.JTextField();
        jLabel100 = new javax.swing.JLabel();
        jBRem4 = new javax.swing.JButton();
        jTR4 = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        jBRem5 = new javax.swing.JButton();
        jTR5 = new javax.swing.JTextField();
        jLabel103 = new javax.swing.JLabel();
        jBSer2 = new javax.swing.JButton();
        jTSer2 = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        jBAct = new javax.swing.JButton();
        jTActFij = new javax.swing.JTextField();
        jCSinAct = new javax.swing.JCheckBox();
        jLabel35 = new javax.swing.JLabel();
        jBClas = new javax.swing.JButton();
        jTClas = new javax.swing.JTextField();
        jCSinClas = new javax.swing.JCheckBox();
        jCSinCot = new javax.swing.JCheckBox();
        jLabel104 = new javax.swing.JLabel();
        jBCot1 = new javax.swing.JButton();
        jTCot1 = new javax.swing.JTextField();
        jLabel105 = new javax.swing.JLabel();
        jBCot2 = new javax.swing.JButton();
        jTCot2 = new javax.swing.JTextField();
        jLabel106 = new javax.swing.JLabel();
        jBCot3 = new javax.swing.JButton();
        jTCot3 = new javax.swing.JTextField();
        jLabel107 = new javax.swing.JLabel();
        jBCot4 = new javax.swing.JButton();
        jTCot4 = new javax.swing.JTextField();
        jLabel108 = new javax.swing.JLabel();
        jBCot5 = new javax.swing.JButton();
        jTCot5 = new javax.swing.JTextField();
        jPAsien = new javax.swing.JPanel();
        jTCarg1Flet = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jTCarg2Flet = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jTAbon1Flet = new javax.swing.JTextField();
        jTRetIVAFlet = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        jTRetISR = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jTCarg1Arr = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        jTCarg2Arr = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jTAbon1Arr = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jTCarg1Merc = new javax.swing.JTextField();
        jTCarg2Merc = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jTCarg2Gast = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jTCarg1Hon = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        jTCarg2Hon = new javax.swing.JTextField();
        jLabel70 = new javax.swing.JLabel();
        jTAbon1Hon = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jTCargCV = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jTCarg1Vta = new javax.swing.JTextField();
        jLabel75 = new javax.swing.JLabel();
        jTAbon1Vta = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        jTAbon2Vta = new javax.swing.JTextField();
        jTAbon3Vta = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jTBanc = new javax.swing.JTextField();
        jLabel78 = new javax.swing.JLabel();
        jTGaran = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        jTIvaPendPag = new javax.swing.JTextField();
        jLabel80 = new javax.swing.JLabel();
        jTIvaXPag = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jTDevSobVta = new javax.swing.JTextField();
        jTIVAPendAc = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jTRetHono = new javax.swing.JTextField();
        jTIVAAcred = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jTRInte1 = new javax.swing.JTextField();
        jLabel90 = new javax.swing.JLabel();
        jTRInte2 = new javax.swing.JTextField();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jTRRent1 = new javax.swing.JTextField();
        jLabel93 = new javax.swing.JLabel();
        jTRRent2 = new javax.swing.JTextField();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jTRVta1 = new javax.swing.JTextField();
        jLabel96 = new javax.swing.JLabel();
        jTRVta2 = new javax.swing.JTextField();
        jPConta = new javax.swing.JPanel();
        jCSinCtas = new javax.swing.JCheckBox();
        jTCtas = new javax.swing.JTextField();
        jBCtas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jBCtas2 = new javax.swing.JButton();
        jTCtas2 = new javax.swing.JTextField();
        jBCtas3 = new javax.swing.JButton();
        jTCtas3 = new javax.swing.JTextField();
        jTCtaPas = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTCtaAct = new javax.swing.JTextField();
        jTCtaCapi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jBVerCta = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jBPol = new javax.swing.JButton();
        jBPadro = new javax.swing.JButton();
        jTRutPadro = new javax.swing.JTextField();
        jCSinPadro = new javax.swing.JCheckBox();
        jCSinPol = new javax.swing.JCheckBox();
        jTRutPol = new javax.swing.JTextField();
        jBDepGar = new javax.swing.JButton();
        jBFac = new javax.swing.JButton();
        jBComp = new javax.swing.JButton();
        jBVisPol = new javax.swing.JButton();
        jBActFij = new javax.swing.JButton();
        jBSal = new javax.swing.JButton();
        jBGuaC = new javax.swing.JButton();
        jBInter = new javax.swing.JButton();
        jLAyu = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPPrincip.setBackground(new java.awt.Color(255, 255, 255));
        jPPrincip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPPrincipKeyPressed(evt);
            }
        });
        jPPrincip.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabb.setBackground(new java.awt.Color(255, 255, 255));
        jTabb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbKeyPressed(evt);
            }
        });

        jP1.setBackground(new java.awt.Color(255, 255, 255));
        jP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jP1KeyPressed(evt);
            }
        });
        jP1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTInst.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTInst.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTInst.setNextFocusableComponent(jTUsr);
        jTInst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTInstFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTInstFocusLost(evt);
            }
        });
        jTInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTInstKeyPressed(evt);
            }
        });
        jP1.add(jTInst, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 220, 20));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("*Usuario:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 220, 20));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("*Contraseña:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 220, 20));

        jTBD.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTBD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTBD.setNextFocusableComponent(jTPort);
        jTBD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTBDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTBDFocusLost(evt);
            }
        });
        jTBD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTBDKeyPressed(evt);
            }
        });
        jP1.add(jTBD, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 220, 20));

        jTUsr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTUsr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTUsr.setNextFocusableComponent(jPCont);
        jTUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTUsrFocusLost(evt);
            }
        });
        jTUsr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTUsrKeyPressed(evt);
            }
        });
        jP1.add(jTUsr, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 220, 20));

        jPCont.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPCont.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPCont.setNextFocusableComponent(jCMosC);
        jPCont.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPContFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPContFocusLost(evt);
            }
        });
        jPCont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPContKeyPressed(evt);
            }
        });
        jP1.add(jPCont, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 220, 20));

        jBProb.setBackground(new java.awt.Color(255, 255, 255));
        jBProb.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBProb.setForeground(new java.awt.Color(0, 102, 0));
        jBProb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/prov.png"))); // NOI18N
        jBProb.setText("Probar ");
        jBProb.setToolTipText("Probar conexión con SQL contabilidad");
        jBProb.setName(""); // NOI18N
        jBProb.setNextFocusableComponent(jTNomConta);
        jBProb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProbMouseExited(evt);
            }
        });
        jBProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProbActionPerformed(evt);
            }
        });
        jBProb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProbKeyPressed(evt);
            }
        });
        jP1.add(jBProb, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 120, 30));

        jCMosC.setBackground(new java.awt.Color(255, 255, 255));
        jCMosC.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCMosC.setText("Mostrar Contraseña");
        jCMosC.setNextFocusableComponent(jTBD);
        jCMosC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMosCActionPerformed(evt);
            }
        });
        jCMosC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCMosCKeyPressed(evt);
            }
        });
        jP1.add(jCMosC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 160, 20));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("*Puerto:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, 20));

        jTPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTPort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTPort.setNextFocusableComponent(jBProb);
        jTPort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTPortFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTPortFocusLost(evt);
            }
        });
        jTPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTPortKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTPortKeyTyped(evt);
            }
        });
        jP1.add(jTPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 70, 20));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("*Base de Datos:");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 220, 20));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("*Instancia CONTPAQi Contabilidad:");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 220, 20));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("*Usuario Contabilidad:");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 220, 20));

        jTUsrConta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTUsrConta.setNextFocusableComponent(jPContConta);
        jTUsrConta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTUsrContaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTUsrContaFocusLost(evt);
            }
        });
        jTUsrConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTUsrContaKeyPressed(evt);
            }
        });
        jP1.add(jTUsrConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 220, 20));

        jTNomConta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTNomConta.setNextFocusableComponent(jTUsrConta);
        jTNomConta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTNomContaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTNomContaFocusLost(evt);
            }
        });
        jTNomConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTNomContaKeyPressed(evt);
            }
        });
        jP1.add(jTNomConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 220, 20));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("*Base de Datos Contabilidad:");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 220, 20));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("*Contraseña Contabilidad:");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 220, 20));

        jPContConta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPContConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPContConta.setNextFocusableComponent(jBProbConta);
        jPContConta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPContContaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPContContaFocusLost(evt);
            }
        });
        jPContConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPContContaKeyPressed(evt);
            }
        });
        jP1.add(jPContConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 220, 20));

        jBProbConta.setBackground(new java.awt.Color(255, 255, 255));
        jBProbConta.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBProbConta.setForeground(new java.awt.Color(0, 102, 0));
        jBProbConta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/prov.png"))); // NOI18N
        jBProbConta.setText("Probar ");
        jBProbConta.setToolTipText("Probar Conexión con SDK Contabilidad");
        jBProbConta.setName(""); // NOI18N
        jBProbConta.setNextFocusableComponent(jTInstE);
        jBProbConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProbContaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProbContaMouseExited(evt);
            }
        });
        jBProbConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProbContaActionPerformed(evt);
            }
        });
        jBProbConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProbContaKeyPressed(evt);
            }
        });
        jP1.add(jBProbConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 120, 30));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(51, 51, 51));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel22.setText("*Instancia Easy Retail:");
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 220, 20));

        jTInstE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTInstE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTInstE.setNextFocusableComponent(jTUsrE);
        jTInstE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTInstEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTInstEFocusLost(evt);
            }
        });
        jTInstE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTInstEKeyPressed(evt);
            }
        });
        jP1.add(jTInstE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 220, 20));

        jLabel23.setBackground(new java.awt.Color(255, 255, 255));
        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(51, 51, 51));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("*Usuario:");
        jLabel23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 220, 20));

        jTUsrE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTUsrE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTUsrE.setNextFocusableComponent(jPContE);
        jTUsrE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTUsrEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTUsrEFocusLost(evt);
            }
        });
        jTUsrE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTUsrEKeyPressed(evt);
            }
        });
        jP1.add(jTUsrE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 220, 20));

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(51, 51, 51));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel24.setText("*Contraseña:");
        jLabel24.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, 220, 20));

        jPContE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPContE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPContE.setNextFocusableComponent(jCMosCE);
        jPContE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPContEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPContEFocusLost(evt);
            }
        });
        jPContE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPContEKeyPressed(evt);
            }
        });
        jP1.add(jPContE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 220, 20));

        jCMosCE.setBackground(new java.awt.Color(255, 255, 255));
        jCMosCE.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCMosCE.setText("Mostrar Contraseña");
        jCMosCE.setNextFocusableComponent(jTBDE);
        jCMosCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMosCEActionPerformed(evt);
            }
        });
        jCMosCE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCMosCEKeyPressed(evt);
            }
        });
        jP1.add(jCMosCE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 160, 20));

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(51, 51, 51));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("*Base de Datos:");
        jLabel25.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 150, 220, 20));

        jTBDE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTBDE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTBDE.setNextFocusableComponent(jTPortE);
        jTBDE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTBDEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTBDEFocusLost(evt);
            }
        });
        jTBDE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTBDEKeyPressed(evt);
            }
        });
        jP1.add(jTBDE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 220, 20));

        jTPortE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTPortE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTPortE.setNextFocusableComponent(jBProbE);
        jTPortE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTPortEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTPortEFocusLost(evt);
            }
        });
        jTPortE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTPortEKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTPortEKeyTyped(evt);
            }
        });
        jP1.add(jTPortE, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 190, 70, 20));

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(51, 51, 51));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("*Puerto:");
        jLabel26.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jP1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 110, 20));

        jBProbE.setBackground(new java.awt.Color(255, 255, 255));
        jBProbE.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBProbE.setForeground(new java.awt.Color(0, 102, 0));
        jBProbE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/prov.png"))); // NOI18N
        jBProbE.setText("Probar ");
        jBProbE.setToolTipText("Probar conexión con Easy Retail");
        jBProbE.setName(""); // NOI18N
        jBProbE.setNextFocusableComponent(jTInst);
        jBProbE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProbEMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProbEMouseExited(evt);
            }
        });
        jBProbE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProbEActionPerformed(evt);
            }
        });
        jBProbE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProbEKeyPressed(evt);
            }
        });
        jP1.add(jBProbE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, 120, 30));

        jTabb.addTab("tab1", jP1);

        jPAdmin.setBackground(new java.awt.Color(255, 255, 255));
        jPAdmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPAdminKeyPressed(evt);
            }
        });
        jPAdmin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setText("Clientes 1:");
        jPAdmin.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, -1));

        jBCli1.setBackground(new java.awt.Color(255, 255, 255));
        jBCli1.setText("..");
        jBCli1.setToolTipText("Buscar Archivo PDF de Clientes 1");
        jBCli1.setNextFocusableComponent(jTCli1);
        jBCli1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCli1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCli1MouseExited(evt);
            }
        });
        jBCli1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCli1ActionPerformed(evt);
            }
        });
        jBCli1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCli1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCli1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 30, 20));

        jTCli1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCli1.setNextFocusableComponent(jBCli2);
        jTCli1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCli1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCli1FocusLost(evt);
            }
        });
        jTCli1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCli1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCli1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 70, 20));

        jCSinCli.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCli.setText("Sincronizar");
        jCSinCli.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinCli.setNextFocusableComponent(jCSinPol);
        jCSinCli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCliKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinCli, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        jLabel18.setText("Clientes 2:");
        jPAdmin.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 110, -1));

        jBCli2.setBackground(new java.awt.Color(255, 255, 255));
        jBCli2.setText("..");
        jBCli2.setToolTipText("Buscar Archivo PDF de Clientes 2");
        jBCli2.setNextFocusableComponent(jTCli2);
        jBCli2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCli2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCli2MouseExited(evt);
            }
        });
        jBCli2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCli2ActionPerformed(evt);
            }
        });
        jBCli2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCli2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCli2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 30, 20));

        jTCli2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCli2.setNextFocusableComponent(jBCli3);
        jTCli2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCli2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCli2FocusLost(evt);
            }
        });
        jTCli2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCli2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCli2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 70, 20));

        jLabel19.setText("Clientes 3:");
        jPAdmin.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 110, -1));

        jBCli3.setBackground(new java.awt.Color(255, 255, 255));
        jBCli3.setText("..");
        jBCli3.setToolTipText("Buscar Archivo PDF de Clientes 3");
        jBCli3.setName(""); // NOI18N
        jBCli3.setNextFocusableComponent(jTCli3);
        jBCli3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCli3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCli3MouseExited(evt);
            }
        });
        jBCli3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCli3ActionPerformed(evt);
            }
        });
        jBCli3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCli3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCli3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 30, 20));

        jTCli3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCli3.setNextFocusableComponent(jBCli4);
        jTCli3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCli3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCli3FocusLost(evt);
            }
        });
        jTCli3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCli3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCli3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 70, 20));

        jTCli4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCli4.setNextFocusableComponent(jBCli5);
        jTCli4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCli4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCli4FocusLost(evt);
            }
        });
        jTCli4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCli4KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCli4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 70, 20));

        jBCli4.setBackground(new java.awt.Color(255, 255, 255));
        jBCli4.setText("..");
        jBCli4.setToolTipText("Buscar Archivo PDF de Clientes 4");
        jBCli4.setNextFocusableComponent(jTCli4);
        jBCli4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCli4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCli4MouseExited(evt);
            }
        });
        jBCli4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCli4ActionPerformed(evt);
            }
        });
        jBCli4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCli4KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCli4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 30, 20));

        jLabel20.setText("Clientes 4:");
        jPAdmin.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 110, -1));

        jLabel21.setText("Clientes 5:");
        jPAdmin.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, -1));

        jBCli5.setBackground(new java.awt.Color(255, 255, 255));
        jBCli5.setText("..");
        jBCli5.setToolTipText("Buscar Archivo PDF de Clientes 5");
        jBCli5.setNextFocusableComponent(jTCli5);
        jBCli5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCli5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCli5MouseExited(evt);
            }
        });
        jBCli5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCli5ActionPerformed(evt);
            }
        });
        jBCli5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCli5KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCli5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 30, 20));

        jTCli5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCli5.setNextFocusableComponent(jBCliClo);
        jTCli5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCli5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCli5FocusLost(evt);
            }
        });
        jTCli5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCli5KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCli5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 70, 20));

        jLabel27.setText("Almacenes:");
        jPAdmin.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 100, 20));

        jBAlma.setBackground(new java.awt.Color(255, 255, 255));
        jBAlma.setText("..");
        jBAlma.setToolTipText("Buscar Archivo PDF de Clientes 1");
        jBAlma.setNextFocusableComponent(jTAlma);
        jBAlma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBAlmaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBAlmaMouseExited(evt);
            }
        });
        jBAlma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlmaActionPerformed(evt);
            }
        });
        jBAlma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBAlmaKeyPressed(evt);
            }
        });
        jPAdmin.add(jBAlma, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 30, 20));

        jTAlma.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAlma.setNextFocusableComponent(jBExist);
        jTAlma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAlmaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAlmaFocusLost(evt);
            }
        });
        jTAlma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAlmaKeyPressed(evt);
            }
        });
        jPAdmin.add(jTAlma, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 80, 20));

        jCSinAlma.setBackground(new java.awt.Color(255, 255, 255));
        jCSinAlma.setText("Sincronizar");
        jCSinAlma.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinAlma.setNextFocusableComponent(jCSinPol);
        jCSinAlma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinAlmaKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinAlma, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 20, -1, -1));

        jCSinProvs.setBackground(new java.awt.Color(255, 255, 255));
        jCSinProvs.setText("Sincronizar");
        jCSinProvs.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinProvs.setNextFocusableComponent(jCSinPol);
        jCSinProvs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinProvsKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinProvs, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, -1, -1));

        jLabel29.setText("Proveedores 1:");
        jPAdmin.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 110, -1));

        jBProv1.setBackground(new java.awt.Color(255, 255, 255));
        jBProv1.setText("..");
        jBProv1.setToolTipText("Buscar Archivo PDF de Proveedores 1");
        jBProv1.setNextFocusableComponent(jTProv1);
        jBProv1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProv1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProv1MouseExited(evt);
            }
        });
        jBProv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProv1ActionPerformed(evt);
            }
        });
        jBProv1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProv1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 30, 20));

        jTProv1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProv1.setNextFocusableComponent(jBProv2);
        jTProv1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProv1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProv1FocusLost(evt);
            }
        });
        jTProv1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProv1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 70, 20));

        jLabel31.setText("Proveedores 2:");
        jPAdmin.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, -1));

        jBProv2.setBackground(new java.awt.Color(255, 255, 255));
        jBProv2.setText("..");
        jBProv2.setToolTipText("Buscar Archivo PDF de Proveedores 2");
        jBProv2.setNextFocusableComponent(jTProv2);
        jBProv2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProv2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProv2MouseExited(evt);
            }
        });
        jBProv2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProv2ActionPerformed(evt);
            }
        });
        jBProv2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProv2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProv2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 30, 20));

        jTProv2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProv2.setNextFocusableComponent(jBProv3);
        jTProv2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProv2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProv2FocusLost(evt);
            }
        });
        jTProv2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProv2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProv2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 70, 20));

        jLabel32.setText("Proveedores 3:");
        jPAdmin.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 110, -1));

        jBProv3.setBackground(new java.awt.Color(255, 255, 255));
        jBProv3.setText("..");
        jBProv3.setToolTipText("Buscar Archivo PDF de Proveedores 3");
        jBProv3.setNextFocusableComponent(jTProv3);
        jBProv3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProv3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProv3MouseExited(evt);
            }
        });
        jBProv3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProv3ActionPerformed(evt);
            }
        });
        jBProv3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProv3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProv3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 30, 20));

        jTProv3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProv3.setNextFocusableComponent(jBVend);
        jTProv3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProv3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProv3FocusLost(evt);
            }
        });
        jTProv3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProv3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProv3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 70, 20));

        jLabel28.setText("Vendedores:");
        jPAdmin.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 110, -1));

        jBVend.setBackground(new java.awt.Color(255, 255, 255));
        jBVend.setText("..");
        jBVend.setToolTipText("Buscar Archivo PDF de Vendedores");
        jBVend.setNextFocusableComponent(jTVend);
        jBVend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVendMouseExited(evt);
            }
        });
        jBVend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVendActionPerformed(evt);
            }
        });
        jBVend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVendKeyPressed(evt);
            }
        });
        jPAdmin.add(jBVend, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 30, 20));

        jTVend.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVend.setNextFocusableComponent(jBProds1);
        jTVend.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVendFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVendFocusLost(evt);
            }
        });
        jTVend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVendKeyPressed(evt);
            }
        });
        jPAdmin.add(jTVend, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 70, 20));

        jCSinVend.setBackground(new java.awt.Color(255, 255, 255));
        jCSinVend.setText("Sincronizar");
        jCSinVend.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinVend.setNextFocusableComponent(jCSinPol);
        jCSinVend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinVendKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinVend, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, -1, -1));

        jLabel30.setText("Productos 1:");
        jPAdmin.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 110, -1));

        jBProds1.setBackground(new java.awt.Color(255, 255, 255));
        jBProds1.setText("..");
        jBProds1.setToolTipText("Buscar Archivo PDF de Productos 1");
        jBProds1.setNextFocusableComponent(jTProds1);
        jBProds1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProds1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProds1MouseExited(evt);
            }
        });
        jBProds1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProds1ActionPerformed(evt);
            }
        });
        jBProds1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProds1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProds1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 30, 20));

        jTProds1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProds1.setNextFocusableComponent(jBProds2);
        jTProds1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProds1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProds1FocusLost(evt);
            }
        });
        jTProds1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProds1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProds1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 70, 20));

        jCSinProds.setBackground(new java.awt.Color(255, 255, 255));
        jCSinProds.setText("Sincronizar");
        jCSinProds.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinProds.setNextFocusableComponent(jCSinPol);
        jCSinProds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinProdsKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinProds, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 290, -1, -1));

        jLabel33.setText("Productos 2:");
        jPAdmin.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 110, -1));

        jBProds2.setBackground(new java.awt.Color(255, 255, 255));
        jBProds2.setText("..");
        jBProds2.setToolTipText("Buscar Archivo PDF de Productos 2");
        jBProds2.setNextFocusableComponent(jTProds2);
        jBProds2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProds2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProds2MouseExited(evt);
            }
        });
        jBProds2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProds2ActionPerformed(evt);
            }
        });
        jBProds2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProds2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProds2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 30, 20));

        jTProds2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProds2.setNextFocusableComponent(jBProds3);
        jTProds2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProds2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProds2FocusLost(evt);
            }
        });
        jTProds2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProds2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProds2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 70, 20));

        jLabel34.setText("Productos 3:");
        jPAdmin.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 110, -1));

        jBProds3.setBackground(new java.awt.Color(255, 255, 255));
        jBProds3.setText("..");
        jBProds3.setToolTipText("Buscar Archivo PDF de Productos 3");
        jBProds3.setNextFocusableComponent(jTProds3);
        jBProds3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBProds3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBProds3MouseExited(evt);
            }
        });
        jBProds3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProds3ActionPerformed(evt);
            }
        });
        jBProds3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBProds3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBProds3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 30, 20));

        jTProds3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTProds3.setNextFocusableComponent(jBClas);
        jTProds3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTProds3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTProds3FocusLost(evt);
            }
        });
        jTProds3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProds3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTProds3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 70, 20));

        jLabel38.setText("Existencias:");
        jPAdmin.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 100, 20));

        jBExist.setBackground(new java.awt.Color(255, 255, 255));
        jBExist.setText("..");
        jBExist.setToolTipText("Buscar Archivo PDF de Existencias");
        jBExist.setNextFocusableComponent(jTExist);
        jBExist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBExistMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBExistMouseExited(evt);
            }
        });
        jBExist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExistActionPerformed(evt);
            }
        });
        jBExist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBExistKeyPressed(evt);
            }
        });
        jPAdmin.add(jBExist, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 30, 20));

        jTExist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTExist.setNextFocusableComponent(jBComp1);
        jTExist.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTExistFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTExistFocusLost(evt);
            }
        });
        jTExist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTExistKeyPressed(evt);
            }
        });
        jPAdmin.add(jTExist, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, 80, 20));

        jCSinExist.setBackground(new java.awt.Color(255, 255, 255));
        jCSinExist.setText("Sincronizar");
        jCSinExist.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinExist.setNextFocusableComponent(jBCli1);
        jCSinExist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinExistKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinExist, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 60, -1, -1));

        jLabel39.setText("Compras 1:");
        jPAdmin.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 100, 20));

        jBComp1.setBackground(new java.awt.Color(255, 255, 255));
        jBComp1.setText("..");
        jBComp1.setToolTipText("Buscar Archivo PDF de Compras 1");
        jBComp1.setNextFocusableComponent(jTComp1);
        jBComp1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBComp1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBComp1MouseExited(evt);
            }
        });
        jBComp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComp1ActionPerformed(evt);
            }
        });
        jBComp1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBComp1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBComp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, 30, 20));

        jCSinVta.setBackground(new java.awt.Color(255, 255, 255));
        jCSinVta.setText("Sincronizar");
        jCSinVta.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinVta.setNextFocusableComponent(jBCli1);
        jCSinVta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinVtaKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinVta, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 220, -1, -1));

        jTComp1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTComp1.setNextFocusableComponent(jBComp2);
        jTComp1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTComp1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTComp1FocusLost(evt);
            }
        });
        jTComp1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComp1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTComp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 80, 20));

        jLabel40.setText("Compras 2:");
        jPAdmin.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 100, 20));

        jBComp2.setBackground(new java.awt.Color(255, 255, 255));
        jBComp2.setText("..");
        jBComp2.setToolTipText("Buscar Archivo PDF de Compras 2");
        jBComp2.setNextFocusableComponent(jTComp2);
        jBComp2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBComp2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBComp2MouseExited(evt);
            }
        });
        jBComp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComp2ActionPerformed(evt);
            }
        });
        jBComp2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBComp2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBComp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 30, 20));

        jTComp2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTComp2.setNextFocusableComponent(jBComp3);
        jTComp2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTComp2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTComp2FocusLost(evt);
            }
        });
        jTComp2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComp2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTComp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 120, 80, 20));

        jLabel41.setText("Compras 3:");
        jPAdmin.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 100, 20));

        jBComp3.setBackground(new java.awt.Color(255, 255, 255));
        jBComp3.setText("..");
        jBComp3.setToolTipText("Buscar Archivo PDF de Compras 3");
        jBComp3.setNextFocusableComponent(jTComp3);
        jBComp3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBComp3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBComp3MouseExited(evt);
            }
        });
        jBComp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComp3ActionPerformed(evt);
            }
        });
        jBComp3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBComp3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBComp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, 30, 20));

        jTComp3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTComp3.setNextFocusableComponent(jBComp4);
        jTComp3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTComp3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTComp3FocusLost(evt);
            }
        });
        jTComp3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComp3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTComp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 80, 20));

        jLabel42.setText("Compras 4:");
        jPAdmin.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, 100, 20));

        jBComp4.setBackground(new java.awt.Color(255, 255, 255));
        jBComp4.setText("..");
        jBComp4.setToolTipText("Buscar Archivo PDF de Compras 4");
        jBComp4.setNextFocusableComponent(jTComp4);
        jBComp4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBComp4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBComp4MouseExited(evt);
            }
        });
        jBComp4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComp4ActionPerformed(evt);
            }
        });
        jBComp4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBComp4KeyPressed(evt);
            }
        });
        jPAdmin.add(jBComp4, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 30, 20));

        jTComp4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTComp4.setNextFocusableComponent(jBComp5);
        jTComp4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTComp4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTComp4FocusLost(evt);
            }
        });
        jTComp4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComp4KeyPressed(evt);
            }
        });
        jPAdmin.add(jTComp4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 160, 80, 20));

        jLabel43.setText("Compras 5:");
        jPAdmin.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, 100, 20));

        jBComp5.setBackground(new java.awt.Color(255, 255, 255));
        jBComp5.setText("..");
        jBComp5.setToolTipText("Buscar Archivo PDF de Compras 5");
        jBComp5.setNextFocusableComponent(jTComp5);
        jBComp5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBComp5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBComp5MouseExited(evt);
            }
        });
        jBComp5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComp5ActionPerformed(evt);
            }
        });
        jBComp5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBComp5KeyPressed(evt);
            }
        });
        jPAdmin.add(jBComp5, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 180, 30, 20));

        jTComp5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTComp5.setNextFocusableComponent(jBVta1);
        jTComp5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTComp5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTComp5FocusLost(evt);
            }
        });
        jTComp5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComp5KeyPressed(evt);
            }
        });
        jPAdmin.add(jTComp5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 80, 20));

        jLabel44.setText("Ventas 1:");
        jPAdmin.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, 100, 20));

        jBVta1.setBackground(new java.awt.Color(255, 255, 255));
        jBVta1.setText("..");
        jBVta1.setToolTipText("Buscar Archivo PDF de Ventas 1");
        jBVta1.setNextFocusableComponent(jTVta1);
        jBVta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVta1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVta1MouseExited(evt);
            }
        });
        jBVta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVta1ActionPerformed(evt);
            }
        });
        jBVta1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVta1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBVta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 220, 30, 20));

        jTVta1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVta1.setNextFocusableComponent(jBVta2);
        jTVta1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVta1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVta1FocusLost(evt);
            }
        });
        jTVta1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVta1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTVta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 80, 20));

        jLabel45.setText("Ventas 2:");
        jPAdmin.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 240, 100, 20));

        jBVta2.setBackground(new java.awt.Color(255, 255, 255));
        jBVta2.setText("..");
        jBVta2.setToolTipText("Buscar Archivo PDF de Ventas 2");
        jBVta2.setNextFocusableComponent(jTVta2);
        jBVta2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVta2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVta2MouseExited(evt);
            }
        });
        jBVta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVta2ActionPerformed(evt);
            }
        });
        jBVta2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVta2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBVta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 240, 30, 20));

        jTVta2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVta2.setNextFocusableComponent(jBVta3);
        jTVta2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVta2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVta2FocusLost(evt);
            }
        });
        jTVta2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVta2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTVta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 80, 20));

        jLabel46.setText("Ventas 3:");
        jPAdmin.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 260, 100, 20));

        jBVta3.setBackground(new java.awt.Color(255, 255, 255));
        jBVta3.setText("..");
        jBVta3.setToolTipText("Buscar Archivo PDF de Ventas 3");
        jBVta3.setNextFocusableComponent(jTVta3);
        jBVta3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVta3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVta3MouseExited(evt);
            }
        });
        jBVta3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVta3ActionPerformed(evt);
            }
        });
        jBVta3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVta3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBVta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 260, 30, 20));

        jTVta3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVta3.setNextFocusableComponent(jBVta4);
        jTVta3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVta3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVta3FocusLost(evt);
            }
        });
        jTVta3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVta3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTVta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 260, 80, 20));

        jLabel47.setText("Ventas 4:");
        jPAdmin.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 100, 20));

        jBVta4.setBackground(new java.awt.Color(255, 255, 255));
        jBVta4.setText("..");
        jBVta4.setToolTipText("Buscar Archivo PDF de Ventas 4");
        jBVta4.setNextFocusableComponent(jTVta4);
        jBVta4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVta4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVta4MouseExited(evt);
            }
        });
        jBVta4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVta4ActionPerformed(evt);
            }
        });
        jBVta4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVta4KeyPressed(evt);
            }
        });
        jPAdmin.add(jBVta4, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, 30, 20));

        jTVta4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVta4.setNextFocusableComponent(jBVta5);
        jTVta4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVta4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVta4FocusLost(evt);
            }
        });
        jTVta4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVta4KeyPressed(evt);
            }
        });
        jPAdmin.add(jTVta4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 280, 80, 20));

        jLabel48.setText("Ventas 5:");
        jPAdmin.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, 100, 20));

        jBVta5.setBackground(new java.awt.Color(255, 255, 255));
        jBVta5.setText("..");
        jBVta5.setToolTipText("Buscar Archivo PDF de Ventas 5");
        jBVta5.setNextFocusableComponent(jTVta5);
        jBVta5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVta5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVta5MouseExited(evt);
            }
        });
        jBVta5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVta5ActionPerformed(evt);
            }
        });
        jBVta5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVta5KeyPressed(evt);
            }
        });
        jPAdmin.add(jBVta5, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 300, 30, 20));

        jTVta5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTVta5.setNextFocusableComponent(jBCXC);
        jTVta5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTVta5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTVta5FocusLost(evt);
            }
        });
        jTVta5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTVta5KeyPressed(evt);
            }
        });
        jPAdmin.add(jTVta5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, 80, 20));

        jCSinComp.setBackground(new java.awt.Color(255, 255, 255));
        jCSinComp.setText("Sincronizar");
        jCSinComp.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinComp.setNextFocusableComponent(jBCli1);
        jCSinComp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCompKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinComp, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, -1, -1));

        jLabel49.setText("CXC:");
        jPAdmin.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 100, 20));

        jBCXC.setBackground(new java.awt.Color(255, 255, 255));
        jBCXC.setText("..");
        jBCXC.setToolTipText("Buscar Archivo PDF de Cuentas por Cobrar");
        jBCXC.setNextFocusableComponent(jTCXC);
        jBCXC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCXCMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCXCMouseExited(evt);
            }
        });
        jBCXC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCXCActionPerformed(evt);
            }
        });
        jBCXC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCXCKeyPressed(evt);
            }
        });
        jPAdmin.add(jBCXC, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 340, 30, 20));

        jTCXC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCXC.setNextFocusableComponent(jCSinCXC);
        jTCXC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCXCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCXCFocusLost(evt);
            }
        });
        jTCXC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCXCKeyPressed(evt);
            }
        });
        jPAdmin.add(jTCXC, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 80, 20));

        jCSinCXC.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCXC.setText("Sincronizar");
        jCSinCXC.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinCXC.setNextFocusableComponent(jBCXP);
        jCSinCXC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCXCKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinCXC, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 340, -1, -1));

        jLabel50.setText("CXP:");
        jPAdmin.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 100, 20));

        jBCXP.setBackground(new java.awt.Color(255, 255, 255));
        jBCXP.setText("..");
        jBCXP.setToolTipText("Buscar Archivo PDF de Cuentas por Pagar");
        jBCXP.setNextFocusableComponent(jTCXP);
        jBCXP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCXPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCXPMouseExited(evt);
            }
        });
        jBCXP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCXPActionPerformed(evt);
            }
        });
        jBCXP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCXPKeyPressed(evt);
            }
        });
        jPAdmin.add(jBCXP, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 380, 30, 20));

        jTCXP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCXP.setNextFocusableComponent(jBKard);
        jTCXP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCXPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCXPFocusLost(evt);
            }
        });
        jTCXP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCXPKeyPressed(evt);
            }
        });
        jPAdmin.add(jTCXP, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 380, 80, 20));

        jCSinCXP.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCXP.setText("Sincronizar");
        jCSinCXP.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinCXP.setNextFocusableComponent(jBCli1);
        jCSinCXP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCXPKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinCXP, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 380, -1, -1));

        jLabel84.setText("Correos clientes:");
        jPAdmin.add(jLabel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 110, -1));

        jBCliClo.setBackground(new java.awt.Color(255, 255, 255));
        jBCliClo.setText("..");
        jBCliClo.setToolTipText("Buscar Archivo PDF de Correos de Clientes");
        jBCliClo.setNextFocusableComponent(jTCliCo);
        jBCliClo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCliCloMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCliCloMouseExited(evt);
            }
        });
        jBCliClo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCliCloActionPerformed(evt);
            }
        });
        jBCliClo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCliCloKeyPressed(evt);
            }
        });
        jPAdmin.add(jBCliClo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 30, 20));

        jTCliCo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCliCo.setNextFocusableComponent(jBProv1);
        jTCliCo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCliCoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCliCoFocusLost(evt);
            }
        });
        jTCliCo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCliCoKeyPressed(evt);
            }
        });
        jPAdmin.add(jTCliCo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 70, 20));

        jCSinCliCo.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCliCo.setText("Sincronizar");
        jCSinCliCo.setToolTipText("Sincronizar archivo de correos de clientes");
        jCSinCliCo.setNextFocusableComponent(jCSinPol);
        jCSinCliCo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCliCoKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinCliCo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, -1, -1));

        jLabel86.setText("Kardex:");
        jPAdmin.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 100, 20));

        jBKard.setBackground(new java.awt.Color(255, 255, 255));
        jBKard.setText("..");
        jBKard.setToolTipText("Buscar Archivo PDF de Kardex");
        jBKard.setNextFocusableComponent(jTKard);
        jBKard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBKardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBKardMouseExited(evt);
            }
        });
        jBKard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKardActionPerformed(evt);
            }
        });
        jBKard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBKardKeyPressed(evt);
            }
        });
        jPAdmin.add(jBKard, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 30, 20));

        jTKard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTKard.setNextFocusableComponent(jBSer1);
        jTKard.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTKardFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTKardFocusLost(evt);
            }
        });
        jTKard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTKardKeyPressed(evt);
            }
        });
        jPAdmin.add(jTKard, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, 80, 20));

        jCSinKard.setBackground(new java.awt.Color(255, 255, 255));
        jCSinKard.setText("Sincronizar");
        jCSinKard.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinKard.setNextFocusableComponent(jBCli1);
        jCSinKard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinKardKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinKard, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 20, -1, -1));

        jLabel87.setText("Exist. Series 1:");
        jPAdmin.add(jLabel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 100, 20));

        jBSer1.setBackground(new java.awt.Color(255, 255, 255));
        jBSer1.setText("..");
        jBSer1.setToolTipText("Buscar Archivo PDF de Existencias por serie 1");
        jBSer1.setNextFocusableComponent(jTSer1);
        jBSer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBSer1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBSer1MouseExited(evt);
            }
        });
        jBSer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSer1ActionPerformed(evt);
            }
        });
        jBSer1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBSer1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBSer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 60, 30, 20));

        jTSer1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTSer1.setNextFocusableComponent(jBRem1);
        jTSer1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTSer1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTSer1FocusLost(evt);
            }
        });
        jTSer1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTSer1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTSer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 80, 20));

        jCSinSer.setBackground(new java.awt.Color(255, 255, 255));
        jCSinSer.setText("Sincronizar");
        jCSinSer.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinSer.setNextFocusableComponent(jBCli1);
        jCSinSer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinSerKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinSer, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 60, -1, -1));

        jLabel97.setText("Remisiones 1:");
        jPAdmin.add(jLabel97, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 120, 100, 20));

        jBRem1.setBackground(new java.awt.Color(255, 255, 255));
        jBRem1.setText("..");
        jBRem1.setToolTipText("Buscar Archivo PDF de Remisiones 1");
        jBRem1.setNextFocusableComponent(jTR1);
        jBRem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBRem1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBRem1MouseExited(evt);
            }
        });
        jBRem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRem1ActionPerformed(evt);
            }
        });
        jBRem1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBRem1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBRem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 120, 30, 20));

        jTR1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTR1.setNextFocusableComponent(jBRem2);
        jTR1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTR1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTR1FocusLost(evt);
            }
        });
        jTR1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTR1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, 80, 20));

        jCSinRem.setBackground(new java.awt.Color(255, 255, 255));
        jCSinRem.setText("Sincronizar");
        jCSinRem.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinRem.setNextFocusableComponent(jBCli1);
        jCSinRem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinRemKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinRem, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 120, -1, -1));

        jLabel98.setText("Remisiones 2:");
        jPAdmin.add(jLabel98, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 140, 100, 20));

        jTR2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTR2.setNextFocusableComponent(jBRem3);
        jTR2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTR2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTR2FocusLost(evt);
            }
        });
        jTR2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTR2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 140, 80, 20));

        jBRem2.setBackground(new java.awt.Color(255, 255, 255));
        jBRem2.setText("..");
        jBRem2.setToolTipText("Buscar Archivo PDF de Remisiones 2");
        jBRem2.setNextFocusableComponent(jTR2);
        jBRem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBRem2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBRem2MouseExited(evt);
            }
        });
        jBRem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRem2ActionPerformed(evt);
            }
        });
        jBRem2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBRem2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBRem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 140, 30, 20));

        jLabel99.setText("Remisiones 3:");
        jPAdmin.add(jLabel99, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 100, 20));

        jBRem3.setBackground(new java.awt.Color(255, 255, 255));
        jBRem3.setText("..");
        jBRem3.setToolTipText("Buscar Archivo PDF de Remisiones 3");
        jBRem3.setNextFocusableComponent(jTR3);
        jBRem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBRem3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBRem3MouseExited(evt);
            }
        });
        jBRem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRem3ActionPerformed(evt);
            }
        });
        jBRem3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBRem3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBRem3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 160, 30, 20));

        jTR3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTR3.setNextFocusableComponent(jBRem4);
        jTR3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTR3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTR3FocusLost(evt);
            }
        });
        jTR3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTR3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTR3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 160, 80, 20));

        jLabel100.setText("Remisiones 4:");
        jPAdmin.add(jLabel100, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 100, 20));

        jBRem4.setBackground(new java.awt.Color(255, 255, 255));
        jBRem4.setText("..");
        jBRem4.setToolTipText("Buscar Archivo PDF de Remisiones 4");
        jBRem4.setNextFocusableComponent(jTR4);
        jBRem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBRem4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBRem4MouseExited(evt);
            }
        });
        jBRem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRem4ActionPerformed(evt);
            }
        });
        jBRem4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBRem4KeyPressed(evt);
            }
        });
        jPAdmin.add(jBRem4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 180, 30, 20));

        jTR4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTR4.setNextFocusableComponent(jBRem5);
        jTR4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTR4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTR4FocusLost(evt);
            }
        });
        jTR4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTR4KeyPressed(evt);
            }
        });
        jPAdmin.add(jTR4, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 180, 80, 20));

        jLabel101.setText("Remisiones 5:");
        jPAdmin.add(jLabel101, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 100, 20));

        jBRem5.setBackground(new java.awt.Color(255, 255, 255));
        jBRem5.setText("..");
        jBRem5.setToolTipText("Buscar Archivo PDF de Remisiones 5");
        jBRem5.setName(""); // NOI18N
        jBRem5.setNextFocusableComponent(jTR5);
        jBRem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBRem5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBRem5MouseExited(evt);
            }
        });
        jBRem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRem5ActionPerformed(evt);
            }
        });
        jBRem5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBRem5KeyPressed(evt);
            }
        });
        jPAdmin.add(jBRem5, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, 30, 20));

        jTR5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTR5.setNextFocusableComponent(jBAct);
        jTR5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTR5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTR5FocusLost(evt);
            }
        });
        jTR5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTR5KeyPressed(evt);
            }
        });
        jPAdmin.add(jTR5, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 200, 80, 20));

        jLabel103.setText("Exist. Series 2:");
        jPAdmin.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 100, 20));

        jBSer2.setBackground(new java.awt.Color(255, 255, 255));
        jBSer2.setText("..");
        jBSer2.setToolTipText("Buscar Archivo PDF de Existencias por serie 2");
        jBSer2.setNextFocusableComponent(jTSer1);
        jBSer2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBSer2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBSer2MouseExited(evt);
            }
        });
        jBSer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSer2ActionPerformed(evt);
            }
        });
        jBSer2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBSer2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBSer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 80, 30, 20));

        jTSer2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTSer2.setNextFocusableComponent(jBRem1);
        jTSer2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTSer2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTSer2FocusLost(evt);
            }
        });
        jTSer2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTSer2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTSer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 80, 80, 20));

        jLabel102.setText("Activo fijo:");
        jPAdmin.add(jLabel102, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 240, 100, 20));

        jBAct.setBackground(new java.awt.Color(255, 255, 255));
        jBAct.setText("..");
        jBAct.setToolTipText("Buscar Archivo PDF de Activo Fijo");
        jBAct.setName(""); // NOI18N
        jBAct.setNextFocusableComponent(jTActFij);
        jBAct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBActMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBActMouseExited(evt);
            }
        });
        jBAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBActActionPerformed(evt);
            }
        });
        jBAct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBActKeyPressed(evt);
            }
        });
        jPAdmin.add(jBAct, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 240, 30, 20));

        jTActFij.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTActFij.setNextFocusableComponent(jBCot1);
        jTActFij.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTActFijFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTActFijFocusLost(evt);
            }
        });
        jTActFij.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTActFijKeyPressed(evt);
            }
        });
        jPAdmin.add(jTActFij, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 240, 80, 20));

        jCSinAct.setBackground(new java.awt.Color(255, 255, 255));
        jCSinAct.setText("Sincronizar");
        jCSinAct.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinAct.setNextFocusableComponent(jBCli1);
        jCSinAct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinActKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinAct, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 240, -1, -1));

        jLabel35.setText("Clasificaciones:");
        jPAdmin.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 110, -1));

        jBClas.setBackground(new java.awt.Color(255, 255, 255));
        jBClas.setText("..");
        jBClas.setToolTipText("Buscar Archivo PDF de Clasificaciones");
        jBClas.setNextFocusableComponent(jTClas);
        jBClas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBClasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBClasMouseExited(evt);
            }
        });
        jBClas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBClasActionPerformed(evt);
            }
        });
        jBClas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBClasKeyPressed(evt);
            }
        });
        jPAdmin.add(jBClas, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 360, 30, 20));

        jTClas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTClas.setNextFocusableComponent(jBAlma);
        jTClas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTClasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTClasFocusLost(evt);
            }
        });
        jTClas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTClasKeyPressed(evt);
            }
        });
        jPAdmin.add(jTClas, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 70, 20));

        jCSinClas.setBackground(new java.awt.Color(255, 255, 255));
        jCSinClas.setText("Sincronizar");
        jCSinClas.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinClas.setNextFocusableComponent(jCSinPol);
        jCSinClas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinClasKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinClas, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, -1, -1));

        jCSinCot.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCot.setText("Sincronizar");
        jCSinCot.setToolTipText("Sincronizar Catálogo de Clientes");
        jCSinCot.setNextFocusableComponent(jBCli1);
        jCSinCot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCotKeyPressed(evt);
            }
        });
        jPAdmin.add(jCSinCot, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 280, -1, -1));

        jLabel104.setText("Cotizaciones 1:");
        jPAdmin.add(jLabel104, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 280, 100, 20));

        jBCot1.setBackground(new java.awt.Color(255, 255, 255));
        jBCot1.setText("..");
        jBCot1.setToolTipText("Buscar Archivo PDF de Cotizaciones 1");
        jBCot1.setNextFocusableComponent(jTCot1);
        jBCot1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCot1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCot1MouseExited(evt);
            }
        });
        jBCot1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCot1ActionPerformed(evt);
            }
        });
        jBCot1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCot1KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 280, 30, 20));

        jTCot1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCot1.setNextFocusableComponent(jBCot2);
        jTCot1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCot1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCot1FocusLost(evt);
            }
        });
        jTCot1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCot1KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 280, 80, 20));

        jLabel105.setText("Cotizaciones 2:");
        jPAdmin.add(jLabel105, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 300, 100, 20));

        jBCot2.setBackground(new java.awt.Color(255, 255, 255));
        jBCot2.setText("..");
        jBCot2.setToolTipText("Buscar Archivo PDF de Cotizaciones 2");
        jBCot2.setNextFocusableComponent(jTCot2);
        jBCot2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCot2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCot2MouseExited(evt);
            }
        });
        jBCot2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCot2ActionPerformed(evt);
            }
        });
        jBCot2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCot2KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 300, 30, 20));

        jTCot2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCot2.setNextFocusableComponent(jBCot3);
        jTCot2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCot2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCot2FocusLost(evt);
            }
        });
        jTCot2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCot2KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 300, 80, 20));

        jLabel106.setText("Cotizaciones 3:");
        jPAdmin.add(jLabel106, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 320, 100, 20));

        jBCot3.setBackground(new java.awt.Color(255, 255, 255));
        jBCot3.setText("..");
        jBCot3.setToolTipText("Buscar Archivo PDF de Cotizaciones 3");
        jBCot3.setNextFocusableComponent(jTCot3);
        jBCot3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCot3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCot3MouseExited(evt);
            }
        });
        jBCot3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCot3ActionPerformed(evt);
            }
        });
        jBCot3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCot3KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 30, 20));

        jTCot3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCot3.setNextFocusableComponent(jBCot4);
        jTCot3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCot3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCot3FocusLost(evt);
            }
        });
        jTCot3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCot3KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 320, 80, 20));

        jLabel107.setText("Cotizaciones 4:");
        jPAdmin.add(jLabel107, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 340, 100, 20));

        jBCot4.setBackground(new java.awt.Color(255, 255, 255));
        jBCot4.setText("..");
        jBCot4.setToolTipText("Buscar Archivo PDF de Cotizaciones 4");
        jBCot4.setNextFocusableComponent(jTCot4);
        jBCot4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCot4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCot4MouseExited(evt);
            }
        });
        jBCot4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCot4ActionPerformed(evt);
            }
        });
        jBCot4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCot4KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 340, 30, 20));

        jTCot4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCot4.setNextFocusableComponent(jBCot5);
        jTCot4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCot4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCot4FocusLost(evt);
            }
        });
        jTCot4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCot4KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 340, 80, 20));

        jLabel108.setText("Cotizaciones 5:");
        jPAdmin.add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, 100, 20));

        jBCot5.setBackground(new java.awt.Color(255, 255, 255));
        jBCot5.setText("..");
        jBCot5.setToolTipText("Buscar Archivo PDF de Cotizaciones 5");
        jBCot5.setNextFocusableComponent(jTCot5);
        jBCot5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCot5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCot5MouseExited(evt);
            }
        });
        jBCot5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCot5ActionPerformed(evt);
            }
        });
        jBCot5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCot5KeyPressed(evt);
            }
        });
        jPAdmin.add(jBCot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 360, 30, 20));

        jTCot5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCot5.setNextFocusableComponent(jBCli1);
        jTCot5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCot5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCot5FocusLost(evt);
            }
        });
        jTCot5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCot5KeyPressed(evt);
            }
        });
        jPAdmin.add(jTCot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 360, 80, 20));

        jTabb.addTab("tab3", jPAdmin);

        jPAsien.setBackground(new java.awt.Color(255, 255, 255));
        jPAsien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPAsienKeyPressed(evt);
            }
        });
        jPAsien.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTCarg1Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg1Flet.setNextFocusableComponent(jTCarg2Flet);
        jTCarg1Flet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg1FletFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg1FletFocusLost(evt);
            }
        });
        jTCarg1Flet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg1FletKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg1Flet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 160, 20));

        jLabel51.setText("Cuenta de Fletes:");
        jPAsien.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 110, -1));

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel52.setText("RETENCIÓN IVA FLETES %:");
        jPAsien.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 20, 160, -1));

        jLabel53.setText("IVA Pendiente Acreditar:");
        jPAsien.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 160, -1));

        jTCarg2Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg2Flet.setNextFocusableComponent(jTAbon1Flet);
        jTCarg2Flet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg2FletFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg2FletFocusLost(evt);
            }
        });
        jTCarg2Flet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg2FletKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg2Flet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 160, 20));

        jLabel54.setText("Retención del IVA:");
        jPAsien.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 110, -1));

        jTAbon1Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon1Flet.setNextFocusableComponent(jTCarg1Arr);
        jTAbon1Flet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon1FletFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon1FletFocusLost(evt);
            }
        });
        jTAbon1Flet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon1FletKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon1Flet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 160, 20));

        jTRetIVAFlet.setText("4");
        jTRetIVAFlet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRetIVAFlet.setNextFocusableComponent(jTRetHono);
        jTRetIVAFlet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRetIVAFletFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRetIVAFletFocusLost(evt);
            }
        });
        jTRetIVAFlet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRetIVAFletKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTRetIVAFletKeyTyped(evt);
            }
        });
        jPAsien.add(jTRetIVAFlet, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 40, 160, 20));

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel56.setText("PAGO FLETES:");
        jPAsien.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 160, -1));

        jTRetISR.setText("10");
        jTRetISR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRetISR.setNextFocusableComponent(jTBanc);
        jTRetISR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRetISRFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRetISRFocusLost(evt);
            }
        });
        jTRetISR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRetISRKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTRetISRKeyTyped(evt);
            }
        });
        jPAsien.add(jTRetISR, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 120, 160, 20));

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel55.setText("RETENCIÓN ISR %:");
        jPAsien.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 100, 160, -1));

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel57.setText("PAGO ARRENDAMIENTO:");
        jPAsien.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 160, -1));

        jLabel58.setText("Cuenta de Arrendamiento:");
        jPAsien.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 150, -1));

        jTCarg1Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg1Arr.setNextFocusableComponent(jTCarg2Arr);
        jTCarg1Arr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg1ArrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg1ArrFocusLost(evt);
            }
        });
        jTCarg1Arr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg1ArrKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg1Arr, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 160, 20));

        jLabel59.setText("IVA Arrendamiento:");
        jPAsien.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 110, -1));

        jTCarg2Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg2Arr.setNextFocusableComponent(jTAbon1Arr);
        jTCarg2Arr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg2ArrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg2ArrFocusLost(evt);
            }
        });
        jTCarg2Arr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg2ArrKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg2Arr, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 160, 20));

        jLabel60.setText("ISR Retenido Arrendamiento:");
        jPAsien.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 150, -1));

        jTAbon1Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon1Arr.setNextFocusableComponent(jTCarg1Merc);
        jTAbon1Arr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon1ArrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon1ArrFocusLost(evt);
            }
        });
        jTAbon1Arr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon1ArrKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon1Arr, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 160, 20));

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel61.setText("COMPRA MERCANCIA:");
        jPAsien.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 160, -1));

        jLabel62.setText("Cuenta de Almacen:");
        jPAsien.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 110, -1));

        jLabel63.setText("IVA Pendiente de Acreditar:");
        jPAsien.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 150, -1));

        jTCarg1Merc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg1Merc.setNextFocusableComponent(jTCarg2Merc);
        jTCarg1Merc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg1MercFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg1MercFocusLost(evt);
            }
        });
        jTCarg1Merc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg1MercKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg1Merc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 160, 20));

        jTCarg2Merc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg2Merc.setNextFocusableComponent(jTCarg1Hon);
        jTCarg2Merc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg2MercFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg2MercFocusLost(evt);
            }
        });
        jTCarg2Merc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg2MercKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg2Merc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 160, 20));

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel64.setText("COMPRA GASTO:");
        jPAsien.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 160, -1));

        jLabel66.setText("Cuenta de Gasto:");
        jPAsien.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 110, -1));

        jTCarg2Gast.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg2Gast.setNextFocusableComponent(jTCargCV);
        jTCarg2Gast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg2GastFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg2GastFocusLost(evt);
            }
        });
        jTCarg2Gast.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg2GastKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg2Gast, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 160, 20));

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel67.setText("PAGO HONORARIOS:");
        jPAsien.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 160, -1));

        jLabel68.setText("Cuenta de Honorarios:");
        jPAsien.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 110, -1));

        jTCarg1Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg1Hon.setNextFocusableComponent(jTCarg2Hon);
        jTCarg1Hon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg1HonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg1HonFocusLost(evt);
            }
        });
        jTCarg1Hon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg1HonKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg1Hon, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 160, 20));

        jLabel69.setText("IVA Honorarios:");
        jPAsien.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 110, -1));

        jTCarg2Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg2Hon.setNextFocusableComponent(jTAbon1Hon);
        jTCarg2Hon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg2HonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg2HonFocusLost(evt);
            }
        });
        jTCarg2Hon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg2HonKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg2Hon, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 160, 20));

        jLabel70.setText("ISR Retenido Honorarios:");
        jPAsien.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 150, -1));

        jTAbon1Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon1Hon.setNextFocusableComponent(jTCarg2Gast);
        jTAbon1Hon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon1HonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon1HonFocusLost(evt);
            }
        });
        jTAbon1Hon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon1HonKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon1Hon, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 160, 20));

        jLabel71.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel71.setText("COMPRA VENTA O RENTA :");
        jPAsien.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 160, -1));

        jLabel72.setText("Cuenta Costo de Venta:");
        jPAsien.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 140, -1));

        jTCargCV.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCargCV.setNextFocusableComponent(jTRVta1);
        jTCargCV.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCargCVFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCargCVFocusLost(evt);
            }
        });
        jTCargCV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCargCVKeyPressed(evt);
            }
        });
        jPAsien.add(jTCargCV, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 160, 20));

        jLabel73.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel73.setText("VENTAS FACTURAS:");
        jPAsien.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 160, -1));

        jLabel74.setText("Cuenta Consumibles Costo:");
        jPAsien.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 150, -1));

        jTCarg1Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCarg1Vta.setNextFocusableComponent(jTAbon1Vta);
        jTCarg1Vta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCarg1VtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCarg1VtaFocusLost(evt);
            }
        });
        jTCarg1Vta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCarg1VtaKeyPressed(evt);
            }
        });
        jPAsien.add(jTCarg1Vta, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 160, 20));

        jLabel75.setText("Cuenta de Almacén:");
        jPAsien.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 110, -1));

        jTAbon1Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon1Vta.setNextFocusableComponent(jTAbon2Vta);
        jTAbon1Vta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon1VtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon1VtaFocusLost(evt);
            }
        });
        jTAbon1Vta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon1VtaKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon1Vta, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, 160, 20));

        jLabel76.setText("Cuenta de Ventas:");
        jPAsien.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, 110, -1));

        jTAbon2Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon2Vta.setNextFocusableComponent(jTAbon3Vta);
        jTAbon2Vta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon2VtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon2VtaFocusLost(evt);
            }
        });
        jTAbon2Vta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon2VtaKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon2Vta, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, 160, 20));

        jTAbon3Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTAbon3Vta.setNextFocusableComponent(jTRInte1);
        jTAbon3Vta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTAbon3VtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTAbon3VtaFocusLost(evt);
            }
        });
        jTAbon3Vta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAbon3VtaKeyPressed(evt);
            }
        });
        jPAsien.add(jTAbon3Vta, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, 160, 20));

        jLabel77.setText("IVA Pendiente por Pagar:");
        jPAsien.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, 140, -1));

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel65.setText("CUENTA BANCO:");
        jPAsien.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 140, 160, -1));

        jTBanc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTBanc.setNextFocusableComponent(jTIvaPendPag);
        jTBanc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTBancFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTBancFocusLost(evt);
            }
        });
        jTBanc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTBancKeyPressed(evt);
            }
        });
        jPAsien.add(jTBanc, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 160, 160, 20));

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel78.setText("CUENTA DE GARANTÍAS:");
        jPAsien.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 260, 160, -1));

        jTGaran.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTGaran.setNextFocusableComponent(jTIVAPendAc);
        jTGaran.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTGaranFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTGaranFocusLost(evt);
            }
        });
        jTGaran.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTGaranKeyPressed(evt);
            }
        });
        jPAsien.add(jTGaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 160, 20));

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel79.setText("IVA PENDIENTE POR PAGAR:");
        jPAsien.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 180, 160, -1));

        jTIvaPendPag.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTIvaPendPag.setNextFocusableComponent(jTIvaXPag);
        jTIvaPendPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTIvaPendPagFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTIvaPendPagFocusLost(evt);
            }
        });
        jTIvaPendPag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIvaPendPagKeyPressed(evt);
            }
        });
        jPAsien.add(jTIvaPendPag, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 160, 20));

        jLabel80.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel80.setText("IVA POR PAGAR:");
        jPAsien.add(jLabel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 220, 160, -1));

        jTIvaXPag.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTIvaXPag.setNextFocusableComponent(jTGaran);
        jTIvaXPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTIvaXPagFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTIvaXPagFocusLost(evt);
            }
        });
        jTIvaXPag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIvaXPagKeyPressed(evt);
            }
        });
        jPAsien.add(jTIvaXPag, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 240, 160, 20));

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel81.setText("DEVOLUCIONES SOBRE VENTAS:");
        jPAsien.add(jLabel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 380, 170, 20));

        jTDevSobVta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTDevSobVta.setNextFocusableComponent(jTCarg1Flet);
        jTDevSobVta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTDevSobVtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTDevSobVtaFocusLost(evt);
            }
        });
        jTDevSobVta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTDevSobVtaKeyPressed(evt);
            }
        });
        jPAsien.add(jTDevSobVta, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 400, 160, 20));

        jTIVAPendAc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTIVAPendAc.setNextFocusableComponent(jTIVAAcred);
        jTIVAPendAc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTIVAPendAcFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTIVAPendAcFocusLost(evt);
            }
        });
        jTIVAPendAc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIVAPendAcKeyPressed(evt);
            }
        });
        jPAsien.add(jTIVAPendAc, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 320, 160, 20));

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel82.setText("IVA PENDIENTE ACREDITAR:");
        jPAsien.add(jLabel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 300, 160, -1));

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel83.setText("RETENCIÓN IVA HONORA. %:");
        jPAsien.add(jLabel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 160, -1));

        jTRetHono.setText("0");
        jTRetHono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRetHono.setNextFocusableComponent(jTRetISR);
        jTRetHono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRetHonoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRetHonoFocusLost(evt);
            }
        });
        jTRetHono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRetHonoKeyPressed(evt);
            }
        });
        jPAsien.add(jTRetHono, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 80, 160, 20));

        jTIVAAcred.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTIVAAcred.setNextFocusableComponent(jTDevSobVta);
        jTIVAAcred.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTIVAAcredFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTIVAAcredFocusLost(evt);
            }
        });
        jTIVAAcred.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIVAAcredKeyPressed(evt);
            }
        });
        jPAsien.add(jTIVAAcred, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 360, 160, 20));

        jLabel85.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel85.setText("IVA ACREDITABLE:");
        jPAsien.add(jLabel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 340, 160, -1));

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel88.setText("REMISIÓN USO INTERNO:");
        jPAsien.add(jLabel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, 160, -1));

        jLabel89.setText("Cuenta Consumibles y Refac.:");
        jPAsien.add(jLabel89, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 230, 150, -1));

        jTRInte1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRInte1.setNextFocusableComponent(jTRInte2);
        jTRInte1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRInte1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRInte1FocusLost(evt);
            }
        });
        jTRInte1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRInte1KeyPressed(evt);
            }
        });
        jPAsien.add(jTRInte1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 160, 20));

        jLabel90.setText("Cuenta de Almacén:");
        jPAsien.add(jLabel90, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, 110, -1));

        jTRInte2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRInte2.setNextFocusableComponent(jTRRent1);
        jTRInte2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRInte2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRInte2FocusLost(evt);
            }
        });
        jTRInte2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRInte2KeyPressed(evt);
            }
        });
        jPAsien.add(jTRInte2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 160, 20));

        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel91.setText("REMANUFACTURA RENTA:");
        jPAsien.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, 160, -1));

        jLabel92.setText("Cuenta de Remanufactura:");
        jPAsien.add(jLabel92, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 340, 150, -1));

        jTRRent1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRRent1.setNextFocusableComponent(jTRRent2);
        jTRRent1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRRent1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRRent1FocusLost(evt);
            }
        });
        jTRRent1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRRent1KeyPressed(evt);
            }
        });
        jPAsien.add(jTRRent1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, 160, 20));

        jLabel93.setText("Cuenta de Almacén:");
        jPAsien.add(jLabel93, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 380, 110, -1));

        jTRRent2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRRent2.setNextFocusableComponent(jTRetIVAFlet);
        jTRRent2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRRent2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRRent2FocusLost(evt);
            }
        });
        jTRRent2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRRent2KeyPressed(evt);
            }
        });
        jPAsien.add(jTRRent2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 400, 160, 20));

        jLabel94.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel94.setText("REMANUFACTURA VENTA:");
        jPAsien.add(jLabel94, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 160, -1));

        jLabel95.setText("Cuenta de Remanufactura:");
        jPAsien.add(jLabel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 150, -1));

        jTRVta1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRVta1.setNextFocusableComponent(jTRVta2);
        jTRVta1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRVta1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRVta1FocusLost(evt);
            }
        });
        jTRVta1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRVta1KeyPressed(evt);
            }
        });
        jPAsien.add(jTRVta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 160, 20));

        jLabel96.setText("Cuenta de Almacén:");
        jPAsien.add(jLabel96, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 380, 110, -1));

        jTRVta2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRVta2.setNextFocusableComponent(jTCarg1Vta);
        jTRVta2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRVta2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRVta2FocusLost(evt);
            }
        });
        jTRVta2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRVta2KeyPressed(evt);
            }
        });
        jPAsien.add(jTRVta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 160, 20));

        jTabb.addTab("tab4", jPAsien);

        jPConta.setBackground(new java.awt.Color(255, 255, 255));
        jPConta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCSinCtas.setBackground(new java.awt.Color(255, 255, 255));
        jCSinCtas.setText("Sincronizar");
        jCSinCtas.setToolTipText("Sincronizar Catálogo de Cuentas");
        jCSinCtas.setNextFocusableComponent(jCSinPol);
        jCSinCtas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinCtasKeyPressed(evt);
            }
        });
        jPConta.add(jCSinCtas, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        jTCtas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtas.setNextFocusableComponent(jBCtas2);
        jTCtas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtasFocusLost(evt);
            }
        });
        jTCtas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtasKeyPressed(evt);
            }
        });
        jPConta.add(jTCtas, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 190, 20));

        jBCtas.setBackground(new java.awt.Color(255, 255, 255));
        jBCtas.setText("..");
        jBCtas.setToolTipText("Buscar Archivo PDF de Cuentas Contables de Nivel 1");
        jBCtas.setNextFocusableComponent(jTCtas);
        jBCtas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCtasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCtasMouseExited(evt);
            }
        });
        jBCtas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCtasActionPerformed(evt);
            }
        });
        jBCtas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCtasKeyPressed(evt);
            }
        });
        jPConta.add(jBCtas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 30, 20));

        jLabel2.setText("Cuentas Nivel 1:");
        jPConta.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 110, -1));

        jLabel5.setText("Cuenta Activo:");
        jPConta.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 110, -1));

        jLabel15.setText("Cuentas Nivel 3:");
        jPConta.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 110, -1));

        jLabel14.setText("Cuentas Nivel 2:");
        jPConta.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 110, -1));

        jBCtas2.setBackground(new java.awt.Color(255, 255, 255));
        jBCtas2.setText("..");
        jBCtas2.setToolTipText("Buscar Archivo PDF de Cuentas Contables de Nivel 2");
        jBCtas2.setNextFocusableComponent(jTCtas2);
        jBCtas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCtas2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCtas2MouseExited(evt);
            }
        });
        jBCtas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCtas2ActionPerformed(evt);
            }
        });
        jBCtas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCtas2KeyPressed(evt);
            }
        });
        jPConta.add(jBCtas2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 30, 20));

        jTCtas2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtas2.setNextFocusableComponent(jBCtas3);
        jTCtas2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtas2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtas2FocusLost(evt);
            }
        });
        jTCtas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtas2KeyPressed(evt);
            }
        });
        jPConta.add(jTCtas2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 190, 20));

        jBCtas3.setBackground(new java.awt.Color(255, 255, 255));
        jBCtas3.setText("..");
        jBCtas3.setToolTipText("Buscar Archivo PDF de Cuentas Contables de Nivel 3");
        jBCtas3.setNextFocusableComponent(jTCtas3);
        jBCtas3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCtas3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCtas3MouseExited(evt);
            }
        });
        jBCtas3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCtas3ActionPerformed(evt);
            }
        });
        jBCtas3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCtas3KeyPressed(evt);
            }
        });
        jPConta.add(jBCtas3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 30, 20));

        jTCtas3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtas3.setNextFocusableComponent(jTCtaAct);
        jTCtas3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtas3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtas3FocusLost(evt);
            }
        });
        jTCtas3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtas3KeyPressed(evt);
            }
        });
        jPConta.add(jTCtas3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 190, 20));

        jTCtaPas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtaPas.setNextFocusableComponent(jTCtaCapi);
        jTCtaPas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtaPasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtaPasFocusLost(evt);
            }
        });
        jTCtaPas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtaPasKeyPressed(evt);
            }
        });
        jPConta.add(jTCtaPas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 220, 20));

        jLabel7.setText("Cuenta Pasivo:");
        jPConta.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 110, -1));

        jTCtaAct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtaAct.setNextFocusableComponent(jTCtaPas);
        jTCtaAct.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtaActFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtaActFocusLost(evt);
            }
        });
        jTCtaAct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtaActKeyPressed(evt);
            }
        });
        jPConta.add(jTCtaAct, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 220, 20));

        jTCtaCapi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTCtaCapi.setNextFocusableComponent(jBPadro);
        jTCtaCapi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTCtaCapiFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTCtaCapiFocusLost(evt);
            }
        });
        jTCtaCapi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCtaCapiKeyPressed(evt);
            }
        });
        jPConta.add(jTCtaCapi, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 220, 20));

        jLabel1.setText("Cuenta Capital:");
        jPConta.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 110, -1));

        jBVerCta.setBackground(new java.awt.Color(255, 255, 255));
        jBVerCta.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBVerCta.setForeground(new java.awt.Color(0, 102, 0));
        jBVerCta.setText("Cuentas");
        jBVerCta.setToolTipText("Abrir cuentas de contabilidad existentes");
        jBVerCta.setNextFocusableComponent(jBVisPol);
        jBVerCta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVerCtaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVerCtaMouseExited(evt);
            }
        });
        jBVerCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVerCtaActionPerformed(evt);
            }
        });
        jBVerCta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVerCtaKeyPressed(evt);
            }
        });
        jPConta.add(jBVerCta, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 70, 150, 20));

        jLabel10.setText("Padrón:");
        jPConta.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 110, -1));

        jLabel16.setText("Pólizas:");
        jPConta.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 80, 10));

        jBPol.setBackground(new java.awt.Color(255, 255, 255));
        jBPol.setText("..");
        jBPol.setToolTipText("Buscar Archivo .PDF de Cuentas Contables");
        jBPol.setNextFocusableComponent(jTRutPol);
        jBPol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBPolMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBPolMouseExited(evt);
            }
        });
        jBPol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPolActionPerformed(evt);
            }
        });
        jBPol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBPolKeyPressed(evt);
            }
        });
        jPConta.add(jBPol, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 30, 20));

        jBPadro.setBackground(new java.awt.Color(255, 255, 255));
        jBPadro.setText("..");
        jBPadro.setToolTipText("Buscar Archivo PDF de Padrón 1");
        jBPadro.setNextFocusableComponent(jTRutPadro);
        jBPadro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBPadroMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBPadroMouseExited(evt);
            }
        });
        jBPadro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPadroActionPerformed(evt);
            }
        });
        jBPadro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBPadroKeyPressed(evt);
            }
        });
        jPConta.add(jBPadro, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 30, 20));

        jTRutPadro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRutPadro.setNextFocusableComponent(jBPol);
        jTRutPadro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRutPadroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRutPadroFocusLost(evt);
            }
        });
        jTRutPadro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRutPadroKeyPressed(evt);
            }
        });
        jPConta.add(jTRutPadro, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 190, 20));

        jCSinPadro.setBackground(new java.awt.Color(255, 255, 255));
        jCSinPadro.setText("Sincronizar");
        jCSinPadro.setToolTipText("Sincronizar Pólizas");
        jCSinPadro.setName(""); // NOI18N
        jCSinPadro.setNextFocusableComponent(jCSinCtas);
        jCSinPadro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinPadroKeyPressed(evt);
            }
        });
        jPConta.add(jCSinPadro, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, -1, -1));

        jCSinPol.setBackground(new java.awt.Color(255, 255, 255));
        jCSinPol.setText("Sincronizar");
        jCSinPol.setToolTipText("Sincronizar Pólizas");
        jCSinPol.setName(""); // NOI18N
        jCSinPol.setNextFocusableComponent(jBCtas);
        jCSinPol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSinPolKeyPressed(evt);
            }
        });
        jPConta.add(jCSinPol, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, 20));

        jTRutPol.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTRutPol.setNextFocusableComponent(jBDepGar);
        jTRutPol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTRutPolFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRutPolFocusLost(evt);
            }
        });
        jTRutPol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRutPolKeyPressed(evt);
            }
        });
        jPConta.add(jTRutPol, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 190, 20));

        jBDepGar.setBackground(new java.awt.Color(255, 255, 255));
        jBDepGar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBDepGar.setForeground(new java.awt.Color(0, 102, 0));
        jBDepGar.setText("Depósitos en Garantía");
        jBDepGar.setNextFocusableComponent(jBFac);
        jBDepGar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBDepGarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBDepGarMouseExited(evt);
            }
        });
        jBDepGar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDepGarActionPerformed(evt);
            }
        });
        jBDepGar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBDepGarKeyPressed(evt);
            }
        });
        jPConta.add(jBDepGar, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 150, -1));

        jBFac.setBackground(new java.awt.Color(255, 255, 255));
        jBFac.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBFac.setForeground(new java.awt.Color(0, 102, 0));
        jBFac.setText("Facturas/Remisiones");
        jBFac.setNextFocusableComponent(jBComp);
        jBFac.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBFacMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBFacMouseExited(evt);
            }
        });
        jBFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFacActionPerformed(evt);
            }
        });
        jBFac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBFacKeyPressed(evt);
            }
        });
        jPConta.add(jBFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 30, 150, -1));

        jBComp.setBackground(new java.awt.Color(255, 255, 255));
        jBComp.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBComp.setForeground(new java.awt.Color(0, 102, 0));
        jBComp.setText("Compras");
        jBComp.setNextFocusableComponent(jBVerCta);
        jBComp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBCompMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBCompMouseExited(evt);
            }
        });
        jBComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCompActionPerformed(evt);
            }
        });
        jBComp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBCompKeyPressed(evt);
            }
        });
        jPConta.add(jBComp, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, 150, -1));

        jBVisPol.setBackground(new java.awt.Color(255, 255, 255));
        jBVisPol.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBVisPol.setForeground(new java.awt.Color(0, 102, 0));
        jBVisPol.setText("Pólizas");
        jBVisPol.setToolTipText("Visor de pólizas");
        jBVisPol.setName(""); // NOI18N
        jBVisPol.setNextFocusableComponent(jBActFij);
        jBVisPol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBVisPolMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBVisPolMouseExited(evt);
            }
        });
        jBVisPol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVisPolActionPerformed(evt);
            }
        });
        jBVisPol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBVisPolKeyPressed(evt);
            }
        });
        jPConta.add(jBVisPol, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 90, 150, 20));

        jBActFij.setBackground(new java.awt.Color(255, 255, 255));
        jBActFij.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBActFij.setForeground(new java.awt.Color(0, 102, 0));
        jBActFij.setText("Activo fijo");
        jBActFij.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBActFijMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBActFijMouseExited(evt);
            }
        });
        jBActFij.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBActFijActionPerformed(evt);
            }
        });
        jBActFij.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBActFijKeyPressed(evt);
            }
        });
        jPConta.add(jBActFij, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 110, 150, -1));

        jTabb.addTab("tab2", jPConta);

        jPPrincip.add(jTabb, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 960, 460));

        jBSal.setBackground(new java.awt.Color(255, 255, 255));
        jBSal.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBSal.setForeground(new java.awt.Color(0, 102, 0));
        jBSal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/sal.png"))); // NOI18N
        jBSal.setText("Salir");
        jBSal.setToolTipText("Salir (ESC)");
        jBSal.setNextFocusableComponent(jBInter);
        jBSal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBSalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBSalMouseExited(evt);
            }
        });
        jBSal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalActionPerformed(evt);
            }
        });
        jBSal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBSalKeyPressed(evt);
            }
        });
        jPPrincip.add(jBSal, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 470, 110, 30));

        jBGuaC.setBackground(new java.awt.Color(255, 255, 255));
        jBGuaC.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBGuaC.setForeground(new java.awt.Color(0, 102, 0));
        jBGuaC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/save.png"))); // NOI18N
        jBGuaC.setText("Guardar");
        jBGuaC.setToolTipText("Guardar Cambios (Ctrl+G)");
        jBGuaC.setNextFocusableComponent(jBSal);
        jBGuaC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBGuaCMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBGuaCMouseExited(evt);
            }
        });
        jBGuaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuaCActionPerformed(evt);
            }
        });
        jBGuaC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBGuaCKeyPressed(evt);
            }
        });
        jPPrincip.add(jBGuaC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 470, 110, 30));

        jBInter.setBackground(new java.awt.Color(255, 255, 255));
        jBInter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/transferencia.png"))); // NOI18N
        jBInter.setToolTipText("Realizar la interfaz");
        jBInter.setName(""); // NOI18N
        jBInter.setNextFocusableComponent(jBGuaC);
        jBInter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBInterMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBInterMouseExited(evt);
            }
        });
        jBInter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInterActionPerformed(evt);
            }
        });
        jBInter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBInterKeyPressed(evt);
            }
        });
        jPPrincip.add(jBInter, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 470, 100, 30));

        jLAyu.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLAyu.setForeground(new java.awt.Color(0, 51, 204));
        jLAyu.setText("http://Ayuda en Lìnea");
        jLAyu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLAyuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLAyuMouseExited(evt);
            }
        });
        jPPrincip.add(jLAyu, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 470, 120, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPPrincip, javax.swing.GroupLayout.DEFAULT_SIZE, 983, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPPrincip, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

                
    /*Cuando se presiona una tecla en el formulario*/
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_formKeyPressed

       
    /*Cuando se esta cerrando el formulario*/
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        /*Presiona el botón de salir*/
        jBSal.doClick();
        
    }//GEN-LAST:event_formWindowClosing
    
    
    /*Cuando se mueve el ratón en el dialogo*/
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        
        /*Pon la bandera para saber que ya hubó un evento y no se desloguie*/
        bIdle   = true;
        
    }//GEN-LAST:event_formMouseMoved

    
    /*Cuando el mouse es arrrastrado en el diálogo*/
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        
        /*Pon la bandera para saber que ya hubó un evento y no se desloguie*/
        bIdle   = true;
        
    }//GEN-LAST:event_formMouseDragged

    
    /*Cuando la rueda del ratón es movida en el diálogo*/
    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        
        /*Pon la bandera para saber que ya hubó un evento y no se desloguie*/
        bIdle   = true;
        
    }//GEN-LAST:event_formMouseWheelMoved

    
    /*Cuando se presiona una tecla en el panel*/
    private void jP1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jP1KeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jP1KeyPressed

    
    /*Cuando el mouse sale del campo del link de ayuda*/
    private void jLAyuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAyuMouseExited

        /*Cambia el cursor del ratón al que tenía*/
        this.setCursor( new Cursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jLAyuMouseExited

    
    /*Cuando el mouse entra en el campo del link de ayuda*/
    private void jLAyuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAyuMouseEntered

        /*Cambia el cursor del ratón*/
        this.setCursor( new Cursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_jLAyuMouseEntered

    
    /*Cuando se presiona una tecla en el checkbox de mostrar contraseña*/
    private void jCMosCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCMosCKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jCMosCKeyPressed

    
    /*Cuando se presiona una tecla en el botón de probar conexión*/
    private void jBProbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProbKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jBProbKeyPressed

    
    /*Cuando se presiona el botón de probar conexión*/
    private void jBProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProbActionPerformed

        /*Válida los campos de conexión*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
            
        /*Registra el driver*/
        try            
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        }
        catch(ClassNotFoundException e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "Error en Class.forName() por " + e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));
            return;
        }
        
        /*Muestra la forma para simular que esta abriendo la base de datos*/
        Star.lCargGral = new LoadinGral("Probando Conexión...");
        Star.lCargGral.setVisible(true);

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPort.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPort.getText().trim();
        
        /*Obtiene todos los campos de conexión*/        
        final String sInst  = jTInst.getText().trim();
        final String sUsr   = jTUsr.getText().trim();
        final String sPass  = new String(jPCont.getPassword());
        final String sBD    = jTBD.getText().trim();
        final String sPortFi= sPort;
        
        /*Intenta conectar en un thread*/
        Thread th = new Thread()
        {
            @Override
            public void run()
            {                
                /*Abre la base de datos*/
                Connection  con;  
                try
                {
                    con = DriverManager.getConnection("jdbc:sqlserver://" + sInst + sPortFi + ";user=" + sUsr + ";password=" + sPass + ";database=" + sBD);
                }
                catch(SQLException ex)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);
                    
                    /*Agrega en el log*/
                    Login.vLog(ex.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                    return;
                }

                /*Esconde la forma de probar conexión*/       
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos y sal de la aplicación    
                if(Star.iCierrBas(con)==-1)
                    return;
                
                /*Mensaje de éxito*/
                JOptionPane.showMessageDialog(null, "Conexión exitosa.", "Conexión", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));                                
            }
        };
        th.start();                        

    }//GEN-LAST:event_jBProbActionPerformed

    
    /*Cuando se presiona una tecla en el campo de contraseña*/
    private void jPContKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPContKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jPContKeyPressed

    
    /*Cuando se pierde el foco del teclado en el control de la contraseña */
    private void jPContFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jPCont.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jPCont.getText().compareTo("")!=0)
            jPCont.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));

    }//GEN-LAST:event_jPContFocusLost

    
    /*Cuando se gana el foco del teclado en el campo de contraseña*/
    private void jPContFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContFocusGained

        /*Selecciona todo el texto cuando gana el foco*/
        jPCont.setSelectionStart(0);jPCont.setSelectionEnd(jPCont.getText().length());        

    }//GEN-LAST:event_jPContFocusGained

    
    /*Cuando se presiona una tecla en el campo de usuario*/
    private void jTUsrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTUsrKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jTUsrKeyPressed

    
    /*Cuando se pierde el foco del teclado en el control del usuario*/
    private void jTUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTUsr.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTUsr.getText().compareTo("")!=0)
            jTUsr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));

    }//GEN-LAST:event_jTUsrFocusLost

    
    /*Cuando se gana el foco del teclado en el campo de usuario*/
    private void jTUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrFocusGained

        /*Selecciona todo el texto cuando gana el foco*/
        jTUsr.setSelectionStart(0);jTUsr.setSelectionEnd(jTUsr.getText().length());

    }//GEN-LAST:event_jTUsrFocusGained

    
    
    /*Cuando se presiona una tecla en el campo de contraseña*/
    private void jTBDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTBDKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jTBDKeyPressed

    
    /*Cuando se pierde el foco del teclado en el control de la base de datos*/
    private void jTBDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBDFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTBD.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTBD.getText().compareTo("")!=0)
            jTBD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));

    }//GEN-LAST:event_jTBDFocusLost

    
    /*Cuando se gana el foco del teclado en el campo de base de datos*/
    private void jTBDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBDFocusGained

        /*Selecciona todo el texto cuando gana el foco*/
        jTBD.setSelectionStart(0);jTBD.setSelectionEnd(jTBD.getText().length());

    }//GEN-LAST:event_jTBDFocusGained

    
    /*Cuando se presiona una tecla en el campo de edición de línea*/
    private void jTInstKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTInstKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jTInstKeyPressed

    
    /*Cuando se pierde el foco del teclado en el control de la instancia*/
    private void jTInstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTInstFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTInst.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTInst.getText().compareTo("")!=0)
            jTInst.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));

    }//GEN-LAST:event_jTInstFocusLost

    
    /*Cuando se gana el foco del teclado en el campo de edición de línea*/
    private void jTInstFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTInstFocusGained

        /*Selecciona todo el texto cuando gana el foco*/
        jTInst.setSelectionStart(0);jTInst.setSelectionEnd(jTInst.getText().length());        

    }//GEN-LAST:event_jTInstFocusGained

    
    /*Cuando se presiona una tecla en el botón salir*/
    private void jBSalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBSalKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);

    }//GEN-LAST:event_jBSalKeyPressed

    
    /*Cuando se presiona el botón de salir*/
    private void jBSalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalActionPerformed

        /*Llama al recolector de basura*/
        System.gc();
        
        /*Cierra la forma*/
        dispose();

    }//GEN-LAST:event_jBSalActionPerformed

    
    
    /*Sincroniza clientes*/
    private synchronized void vSinCliens(String sInst, String sUsr, String sPass, String sBD)
    {        
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + sInst + ";user=" + sUsr + ";password=" + sPass + ";database=" + sBD);
        }
        catch(SQLException ex)
        {
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " vSin() No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = ""; 
        
        /*Obtiene todos los clientes de contpaq*/
        try
        {
            sQ = "SELECT admclientes.CCODIGOCLIENTE, admclientes.CRAZONSOCIAL, admclientes.CRFC, admclientes.CLIMITECREDITOCLIENTE, admclientes.CDIASCREDITOCLIENTE, admclientes.CDIAPAGO, admclientes.CEMAIL1, admclientes.CEMAIL2, admclientes.CEMAIL3, admclientes.CLISTAPRECIOCLIENTE, admclientes.CCURP, admclientes.CIDAGENTEVENTA, CNOMBRECALLE, CNUMEROEXTERIOR, CNUMEROINTERIOR, CCOLONIA, CCODIGOPOSTAL, CTELEFONO1, CTELEFONO2, CDIRECCIONWEB, CPAIS, CESTADO, CCIUDAD, CMUNICIPIO FROM admclientes LEFT OUTER JOIN admdomicilios ON CIDCATALOGO = admclientes.CIDCLIENTEPROVEEDOR WHERE CTIPODIRECCION = 0 AND (ctipocliente = 1 OR ctipocliente = 2 )";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            while(rs.next())
            {
                /*Insertalos en la base de datos del sistema*/
                vInsB(rs.getString("ccodigocliente"), rs.getString("crazonsocial"), rs.getString("crfc"), rs.getString("climitecreditocliente"), rs.getString("cdiascreditocliente"), rs.getString("cdiapago"), rs.getString("cemail1"), rs.getString("cemail2"), rs.getString("cemail3"), rs.getString("clistapreciocliente"), rs.getString("ccurp"), rs.getString("cidagenteventa"), rs.getString("CNOMBRECALLE"), rs.getString("CNUMEROEXTERIOR"), rs.getString("CNUMEROINTERIOR"), rs.getString("CCOLONIA"), rs.getString("CCODIGOPOSTAL"), rs.getString("CTELEFONO1"), rs.getString("CTELEFONO2"), rs.getString("CTELEFONO2"), rs.getString("CDIRECCIONWEB"), rs.getString("CPAIS"), rs.getString("CESTADO"),  rs.getString("CMUNICIPIO"));                
                
                /*Si hay error entonces*/
                if(bErr)
                {
                    //Cierra la base de datos y regresa    
                    Star.iCierrBas(con);
                    return;
                }
            }
        }
        catch(SQLException e)
        {
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;

            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }
        
        //Cierra la base de datos
        Star.iCierrBas(con);        

    }/*Fin de private synchronized void vSinCliens(String sInst, String sUsr, String sPass, String sBD)*/
    
    
    /*Sincroniza proveedores*/
    private synchronized void vSinProvs(String sInst, String sUsr, String sPass, String sBD)
    {        
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + sInst + ";user=" + sUsr + ";password=" + sPass + ";database=" + sBD);
        }
        catch(SQLException ex)
        {
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " vSinProvs() No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = ""; 
    
        /*Obtiene todos los proveedores de contpaq*/
        try
        {
            sQ = "SELECT * FROM adm";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            while(rs.next())
            {
                /*Insertalos en la base de datos del sistema*/
                //vInsB(rs.getString("ccodigocliente"), rs.getString("crazonsocial"), rs.getString("crfc"), rs.getString("climitecreditocliente"), rs.getString("cdiascreditocliente"), rs.getString("cdiapago"), rs.getString("cemail1"), rs.getString("cemail2"), rs.getString("cemail3"), rs.getString("clistapreciocliente"), rs.getString("ccurp"));                
                
                /*Si hay error entonces*/
                if(bErr)
                {
                    //Cierra la base de datos y regresa
                    Star.iCierrBas(con);
                    return;
                }
            }
        }
        catch(SQLException e)
        {
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }
        
        //Cierra la base de datos
        Star.iCierrBas(con);        

    }/*Fin de private synchronized void vSinProvs(String sInst, String sUsr, String sPass, String sBD)*/
    
    
    /*Sincroniza los clientes*/
    private synchronized void vSin(String sInst, String sUsr, String sPass, String sBD, boolean bCliens, boolean bProvs, boolean bComps, boolean bFacs, boolean bProds, boolean bServs, boolean bDevs, boolean bCans)
    {
        /*Inicialmente no hay error*/
        bErr    = false;
        
        /*Si tiene que sincronizar los clientes entonces*/
        if(bCliens)
            vSinCliens(sInst, sUsr, sPass, sBD);                
        /*Si tiene que sincronizar los proveedores entonces*/        
        
    }/*Fin de private synchronized void vSin()*/
    
    
    /*Insertalos en la base de datos del sistema*/                          
    private synchronized void vInsB(String sCod, String sNom,  String sRFC, String sLimCred, String sDiaCred, String sDiaPag, String sCo1, String sCo2, String sCo3, String sList, String sCURP, String sVend, String sCall, String sNumExt, String sNumInt, String sCol, String sCP, String sTel1, String sTel2, String sTel3, String sPagWeb, String sPai, String sEstad, String sMun)
    {
        /*Abre la base de datos*/        
        Connection  con;  
        try 
        {
            con = DriverManager.getConnection("jdbc:mysql://" + Star.sInstancia + ":" + Star.sPort + "/" + Star.sBD + "?user=" + Star.sUsuario + "&password=" + Star.sContrasenia );               
        } 
        catch(SQLException | HeadlessException e) 
        {   
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde l forma de loading*/
            Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/    
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;       
        String      sQ              = ""; 
        
        /*Comprueba si el cliente ya existe*/
        boolean bSi = false;
        try
        {
            sQ = "SELECT codemp FROM emps WHERE '" + sCod + "' = codemp";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe, coloca la bandera*/
            if(rs.next())
                bSi = true;
        }
        catch(SQLException e)
        {
            /*Coloca la bandera de error*/
            bErr   = true;
            
            /*Esconde l forma de loading*/
            Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
                        
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }

        /*Si la lista no es válida entonces que sea 1*/
        if(Integer.parseInt(sList)<=0 || Integer.parseInt(sList)>10)
            sList   = "1";
                            
        /*Si ya existe el cliente entonces la consulta será esta*/        
        if(bSi)
        {
            sQ  =   "UPDATE emps SET " +
                    "nom        = '" + sNom.replace("'", "''") + "', " +                   
                    "rfc        = '" + sRFC.replace("'", "''") + "', " +
                    "limtcred   = " + sLimCred.replace("'", "''") + ", " + 
                    "diapag     = " + sDiaPag.replace("'", "''") + ", " +
                    "co1        = '" + sCo1.replace("'", "''") + ", " +
                    "co2        = '" + sCo2.replace("'", "''") + ", " +
                    "co3        = '" + sCo3.replace("'", "''") + "', " +
                    "vend       = '" + sVend.replace("'", "''") + "', " +
                    "calle      = '" + sCall.replace("'", "''") + "', " +
                    "noext      = '" + sNumExt.replace("'", "''") + "', " +
                    "noint      = '" + sNumInt.replace("'", "''") + "', " +
                    "col        = '" + sCol.replace("'", "''") + "', " +
                    "cp         = '" + sCP.replace("'", "''") + "', " +
                    "tel        = '" + sTel1.replace("'", "''") + "', " +
                    "telper1    = '" + sTel2.replace("'", "''") + "', " +
                    "telper2    = '" + sTel3.replace("'", "''") + "', " +
                    "pagweb1    = '" + sPagWeb.replace("'", "''") + "', " +
                    "pai        = '" + sPai.replace("'", "''") + "', " +
                    "estad      = '" + sEstad.replace("'", "''") + "', " +
                    "ciu        = '" + sMun.replace("'", "''") + "', " +
                    "list       = " + sList.replace("'", "''") +
                    " WHERE codemp = '" + sCod.replace("'", "''") + "'";
        }
        /*Else si existe entonces la consulta será esta*/
        else
        {
            sQ  =   "INSERT INTO emps(codemp,                               nom,                                    rfc,                                limtcred,          diapag,                                  co1,                                co2,                                co3,                          ser,    codclas,         estac,                                           sucu,                                           nocaj,                                      falt,           fmod,      list,            curp,                               vend,                               calle,                              noext,                                  noint,                                  col,                                    cp,                                 tel,                                    telper1,                            telper2,                            pagweb1,                                pai,                                estad,                                  ciu) " + 
                         "VALUES('" + sCod.replace("'", "''") + "', '" +    sNom.replace("'", "''") + "', '" +      sRFC.replace("'", "''") + "', " +   sLimCred + ",  " + sDiaPag.replace("'", "''") + ", '" +     sCo1.replace("'", "''") + "', '" +  sCo2.replace("'", "''") + "', '" +  sCo3.replace("'", "''") + "', '',      '',         '" + Login.sUsrG.replace("'", "''") + "', '" +   Star.sSucu.replace("'", "''") + "','" +   Star.sNoCaj.replace("'", "''") + "',  now(),          now(), " + sList + ", '" + sCURP.replace("'", "''") + "', '" +  sVend.replace("'", "''") + "', '" + sCall.replace("'", "''") + "', '" + sNumExt.replace("'", "''") + "', '" +   sNumInt.replace("'", "''") + "', '" +   sCol.replace("'", "''") + "', '" +      sCP.replace("'", "''") + "', '" +   sTel1.replace("'", "''") + "', '" +     sTel2.replace("'", "''") + "', '" + sTel3.replace("'", "''") + "', '" + sPagWeb.replace("'", "''") + "', '" +   sPai.replace("'", "''") + "', '" +  sEstad.replace("'", "''") + "', '" +    sMun.replace("'", "''") + "')";
        }
        
        /*Inserta o actualiza el cliente*/
        try 
        {                
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Coloca la bandera de error*/
            bErr   = true;
             
            /*Esconde l forma de loading*/
            Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }  
        
        //Cierra la base de datos
        Star.iCierrBas(con);
                            
    }/*Fin de private synchronized void vInsB(Connection con, String sCod, String sNom,  String sRFC, String sLimCred, String sDiaCred, String sDiaPag, String sCo1, String sCo2, String sCo3 )*/                

    
    
    /*Cuando se gana el foco del teclado en el control del puerto*/
    private void jTPortFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTPortFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTPort.setSelectionStart(0);jTPort.setSelectionEnd(jTPort.getText().length());        
        
    }//GEN-LAST:event_jTPortFocusGained

    
    /*Cuando se presiona una tecla en el campo del puerto*/
    private void jTPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPortKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTPortKeyPressed

        
    /*Cuando se tipea una tecla en el campo del puerto*/
    private void jTPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPortKeyTyped
        
        /*Comprueba que el carácter este en los límites permitidos para numeración*/
        if(((evt.getKeyChar() < '0') || (evt.getKeyChar() > '9')) && (evt.getKeyChar() != '\b') && (evt.getKeyChar() != '.'))         
            evt.consume();
        
    }//GEN-LAST:event_jTPortKeyTyped

    
    /*Cuando se pierde el foco del teclado en el control del puerto*/
    private void jTPortFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTPortFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTPort.setCaretPosition(0);
                
    }//GEN-LAST:event_jTPortFocusLost
          
    
    /*Cuando sucede una acción en el check de mostrar contraseña*/
    private void jCMosCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCMosCActionPerformed
        
        /*Si esta marcado entonces muestra la contraseña*/
        if(jCMosC.isSelected())
            jPCont.setEchoChar((char)0);
        /*Else, ocultala*/
        else
            jPCont.setEchoChar('*');
        
    }//GEN-LAST:event_jCMosCActionPerformed

    
    /*Cuando el mouse entra en el botón específico*/
    private void jBProbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProb.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProbMouseEntered
    
    
    /*Cuando el mouse entra en el botón específico*/
    private void jBSalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSalMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBSal.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBSalMouseEntered

    
    /*Cuando el mouse sale del botón específico*/
    private void jBProbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProb.setBackground(colOri);
        
    }//GEN-LAST:event_jBProbMouseExited
    
    
    /*Cuando el mouse sale del botón específico*/
    private void jBSalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSalMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBSal.setBackground(colOri);
        
    }//GEN-LAST:event_jBSalMouseExited

    /*Cuando se presiona una tecla en el tabben principal*/
    private void jTabbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTabbKeyPressed

    
    /*Cuando se presiona una tecla en el botón de búscar ruta al archvio de cuentas*/
    private void jBCtasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCtasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCtasKeyPressed

    
    /*Cuando se presiona una tecla en el campo de la ruta de las cuentas*/
    private void jTCtasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtasKeyPressed

    
    /*Cuando el mouse entra en el botón de búscar cuentas*/
    private void jBCtasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtasMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCtas.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCtasMouseEntered

    
    /*Cuando el mosue sale del botón de búscar cuentas*/    
    private void jBCtasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtasMouseExited
 
        /*Cambia el color del fondo del botón al original*/
        jBCtas.setBackground(colOri);
        
    }//GEN-LAST:event_jBCtasMouseExited

    
    /*Cuando se gana el foco del teclado en el campo de las cuentas*/
    private void jTCtasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtasFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtas.setSelectionStart(0);jTCtas.setSelectionEnd(jTCtas.getText().length());
        
    }//GEN-LAST:event_jTCtasFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de las cuentas*/
    private void jTCtasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtasFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtas.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtas.getText().compareTo("")!=0)
            jTCtas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtasFocusLost

    
    /*Cuando se presiona el botón de cargar archivo de cuentas*/
    private void jBCtasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCtasActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta la imágen*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar PDF Cuentas Nivel 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control de la cuenta*/
        jTCtas.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCtas.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCtasActionPerformed

    
    /*Válida los campos de conexión*/
    private void vValCampCon()
    {
        /*Si el campo de instancia esta vacio no puede seguir*/
        if(jTInst.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de instancia esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTInst.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jTInst.grabFocus();
            return;
        }

        /*Si el campo de usuario esta vacio no puede seguir*/
        if(jTUsr.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de usuario esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTUsr.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jTUsr.grabFocus();
            return;
        }

        /*Si el campo de contraseña esta vacio no puede seguir*/
        if(new String(jPCont.getPassword()).compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
                        
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de contraseña esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jPCont.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jPCont.grabFocus();
            return;
        }

        /*Si el campo de bd esta vacio no puede seguir*/
        if(jTBD.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de base de datos esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTBD.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo*/
            jTBD.grabFocus();                      
        }                       
                    
    }/*Fin de private void vValCampCon()*/
        
        
    /*Válida los campos de conexión con easy retail*/
    private void vValCampConE()
    {
        /*Si el campo de instancia esta vacio no puede seguir*/
        if(jTInstE.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de instancia de easy retail esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTInstE.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jTInstE.grabFocus();
            return;
        }

        /*Si el campo de usuario de easy retail esta vacio no puede seguir*/
        if(jTUsrE.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de usuario de easy retail esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTUsrE.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jTUsrE.grabFocus();
            return;
        }

        /*Si el campo de contraseña de easy retail esta vacio no puede seguir*/
        if(new String(jPContE.getPassword()).compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
                        
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de contraseña de easy retail esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jPContE.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo y regresa*/
            jPContE.grabFocus();
            return;
        }

        /*Si el campo de base de datos de easy retail esta vacio no puede seguir*/
        if(jTBDE.getText().compareTo("")==0)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Mensajea*/
            JOptionPane.showMessageDialog(null, "El campo de base de datos de easy retail esta vacio.", "Campo Vacio", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

            /*Coloca el borde rojo*/                               
            jTBDE.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
            /*Coloca el foco del teclado en el campo*/
            jTBDE.grabFocus();                      
        }                       
                    
    }/*Fin de private void vValCampConE()*/
    
    
    /*Cuando se presiona el botón de hacer interfaz*/
    private void jBInterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInterActionPerformed
                    
        /*Si se va a sincronizar algo de contabilidad entonces*/
        if(jCSinCtas.isSelected() || jCSinPadro.isSelected() || jCSinPol.isSelected())
        {
            /*Válida los campos de conexión*/
            vValCampCon();
            if(bErr)
            {
                /*Resetea la bandera y regresa*/
                bErr    = false;
                return;
            }
            
            /*Si el campo de nombre de empresa esta vacia entonces*/
            if(jTNomConta.getText().compareTo("")==0)
            {
                /*Mensjaea*/
                JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Coloca el foco del teclado en el control y regresa*/
                jTNomConta.grabFocus();
                return;
            }

            /*Si el campo de usuario de contabilidad esta vacio entonces*/
            if(jTUsrConta.getText().compareTo("")==0)
            {
                /*Mensjaea*/
                JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Coloca el foco del teclado en el control y regresa*/
                jTUsrConta.grabFocus();
                return;
            }

            /*Obtiene el puerto de conexión*/
            String sPort    = "";
            if(jTPort.getText().trim().compareTo("")!=0)
                sPort       = ":" + jTPort.getText().trim();

            /*Registra el driver*/
            try
            {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            }
            catch(ClassNotFoundException e)
            {
                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, "Error por " + e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));
                return;
            }
            
            /*Abre la base de datos de contabilidad para probar la conexión*/        
            Connection  con;  
            try
            {
                con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + sPort + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
            }
            catch(SQLException ex)
            {
                /*Agrega en el log*/
                Login.vLog(ex.getMessage());

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                return;
            }                

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
                        
        }/*Fin de if(jCSinCtas.isSelected() || jCSinPadro.isSelected() || jCSinPol.isSelected())*/                    

        /*Si se va a sincronizar algo de easy retail entonces*/
        if(jCSinCli.isSelected() || jCSinProvs.isSelected() || jCSinAlma.isSelected() || jCSinVend.isSelected() || jCSinProds.isSelected() || jCSinExist.isSelected() || jCSinComp.isSelected() || jCSinVta.isSelected() || jCSinCXC.isSelected() || jCSinCXP.isSelected() || jCSinCliCo.isSelected() || jCSinKard.isSelected() || jCSinSer.isSelected() || jCSinRem.isSelected() || jCSinClas.isSelected() || jCSinCot.isSelected() || jCSinAct.isSelected())
        {
            /*Válida los campos de conexión*/
            vValCampConE();
            if(bErr)
            {
                /*Resetea la bandera y regresa*/
                bErr    = false;
                return;
            }            
        }
        
        /*Si no hay nada que sincronizar entonces*/
        if(!jCSinCtas.isSelected() && !jCSinPadro.isSelected() && !jCSinPol.isSelected() && !jCSinCli.isSelected() && !jCSinProvs.isSelected() && !jCSinVend.isSelected() && !jCSinProds.isSelected() && !jCSinAlma.isSelected() && !jCSinExist.isSelected() && !jCSinComp.isSelected() && !jCSinVta.isSelected() && !jCSinCXC.isSelected() && !jCSinCXP.isSelected() && !jCSinCliCo.isSelected() && !jCSinKard.isSelected() && !jCSinSer.isSelected() && !jCSinRem.isSelected() && !jCSinClas.isSelected() && !jCSinCot.isSelected() && !jCSinAct.isSelected())
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "Selecciona primero lo que se va a sincronizar.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }
        
        /*Si se va a sincronizar las cuentas entonces*/
        if(jCSinCtas.isSelected())
        {
            /*Si no a escrito la ruta al archivo de cuentas de primer nivel entonces*/
            if(jTCtas.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de primer nivel.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas.grabFocus();
                return;
            }
            
            /*Si no a escrito la ruta al archivo de las cuentas de segudno nivel entonces*/
            if(jTCtas2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de las cuentas de segundo nivel.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas2.grabFocus();
                return;
            }
            
            /*Si no a escrito la ruta al archivo de las cuentas de tercer nivel entonces*/
            if(jTCtas3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de las cuentas de tercer nivel no existe.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas3.grabFocus();
                return;
            }
            
            /*Si el archivo de cuentas de primer nivel no existe entonces*/
            if(!new File(jTCtas.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cuentas de primer nivel no existe.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas.grabFocus();
                return;
            }
            
            /*Si el archivo de cuentas de segundo nivel no existe entonces*/
            if(!new File(jTCtas2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cuentas de segundo nivel no existe.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas2.grabFocus();
                return;
            }
            
            /*Si el archivo de cuentas de tercer nivel no existe entonces*/
            if(!new File(jTCtas3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cuentas de tercer nivel no existe.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtas3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtas3.grabFocus();
                return;
            }
            
            /*Si no a escrito la cuenta de activo entonces*/
            if(jTCtaAct.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la cuenta de activo primeramente.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtaAct.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtaAct.grabFocus();
                return;
            }
            
            /*Si no a escrito la cuenta de pasivo entonces*/
            if(jTCtaPas.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la cuenta de pasivo primeramente.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtaPas.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtaPas.grabFocus();
                return;
            }
            
            /*Si no a escrito la cuenta de capital entonces*/
            if(jTCtaCapi.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la cuenta de capital primeramente.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCtaCapi.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCtaCapi.grabFocus();
                return;
            }
            
        }/*Fin de if(jTCtas.getText().compareTo("")!=0)*/
                
        /*Si se va a sincronizar el padrón entonces*/
        if(jCSinPadro.isSelected())
        {
            /*Si escribió algo el usuario entonces*/
            if(jTRutPadro.getText().compareTo("")!=0)
            {
                /*Si el archivo de padrón no existe entonces*/
                if(!new File(jTRutPadro.getText()).exists())
                {
                    /*Mensajea*/
                    JOptionPane.showMessageDialog(null, "La ruta del archivo de padrón no existe.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                    /*Coloca el borde rojo*/                               
                    jTRutPadro.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                    /*Pon el foco del teclado en el control y regresa*/
                    jTRutPadro.grabFocus();
                    return;
                }
                
            }/*Fin de if(jTRutPadro.getText().compareTo("")!=0)*/                            
                        
        }/*Fin de if(jCSinPadro.isSelected())*/
        
        /*Si se va a sincronizar el archivo de correos de los clientes entonces*/
        if(jCSinCliCo.isSelected())
        {
            /*Si escribió algo el usuario entonces*/
            if(jTCliCo.getText().compareTo("")!=0)
            {
                /*Si el archivo de correos de clientes no existe entonces*/
                if(!new File(jTCliCo.getText()).exists())
                {
                    /*Mensajea*/
                    JOptionPane.showMessageDialog(null, "La ruta del archivo de correos de clientes no existe.", "Correos Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                    /*Coloca el borde rojo*/                               
                    jTCliCo.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                    /*Pon el foco del teclado en el control y regresa*/
                    jTCliCo.grabFocus();
                    return;
                }
                
            }/*Fin de if(jTRutPadro.getText().compareTo("")!=0)*/                            
                        
        }/*Fin de if(jCSinPadro.isSelected())*/
        
        /*Si se va a sincronizar los clientes a easy retail*/
        if(jCSinCli.isSelected())
        {
            /*Si no a escrito la ruta al archivo de clientes 1 entonces*/
            if(jTCli1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCli1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCli1.grabFocus();
                return;
            }            
            
            /*Si el archivo de clientes 1 no existe entonces*/
            if(!new File(jTCli1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de clientes 1 no existe.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCli1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCli1.grabFocus();
                return;
            }                            
                        
            /*Si no a escrito la ruta al archivo de clientes 2 entonces*/
            if(jTCli2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCli2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCli2.grabFocus();
                return;
            }            
            
            /*Si el archivo de clientes 2 no existe entonces*/
            if(!new File(jTCli2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de clientes 2 no existe.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCli2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCli2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de clientes 3 entonces*/
            if(jTCli3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCli3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCli3.grabFocus();
                return;
            }            
            
            /*Si el archivo de clientes 3 no existe entonces*/
            if(!new File(jTCli3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de clientes 3 no existe.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCli3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCli3.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de clientes 4 entonces*/
            if(jTCli4.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 4.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCli4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCli4.grabFocus();
                return;
            }            
            
            /*Si el archivo de clientes 4 no existe entonces*/
            if(!new File(jTCli4.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de clientes 4 no existe.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCli4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCli4.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de clientes 5 entonces*/
            if(jTCli5.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 5.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCli5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCli5.grabFocus();
                return;
            }            
            
            /*Si el archivo de clientes 5 no existe entonces*/
            if(!new File(jTCli5.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de clientes 5 no existe.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCli5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCli5.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinCli.isSelected())*/        
        
        /*Si se va a sincronizar los productos a easy retail*/
        if(jCSinProds.isSelected())
        {
            /*Si no a escrito la ruta al archivo de productos 1 entonces*/
            if(jTProds1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de productos 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProds1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProds1.grabFocus();
                return;
            }            
            
            /*Si el archivo de productos 1 no existe entonces*/
            if(!new File(jTProds1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de productos 1 no existe.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProds1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProds1.grabFocus();
                return;
            }                            
                        
            /*Si no a escrito la ruta al archivo de productos 2 entonces*/
            if(jTProds2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de productos 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProds2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProds2.grabFocus();
                return;
            }            
            
            /*Si el archivo de productos 2 no existe entonces*/
            if(!new File(jTProds2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de productos 2 no existe.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProds2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProds2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de productos 3 entonces*/
            if(jTProds3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de productos 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProds3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProds3.grabFocus();
                return;
            }            
            
            /*Si el archivo de productos 3 no existe entonces*/
            if(!new File(jTProds3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de productos 3 no existe.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProds3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProds3.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinProds.isSelected())*/
        
        /*Si se va a sincronizar los proveedores a easy retail*/
        if(jCSinProvs.isSelected())
        {
            /*Si no a escrito la ruta al archivo de proveedores 1 entonces*/
            if(jTProv1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de proveedores 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProv1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProv1.grabFocus();
                return;
            }            
            
            /*Si el archivo de proveedores 1 no existe entonces*/
            if(!new File(jTProv1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de proveedores 1 no existe.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProv1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProv1.grabFocus();
                return;
            }                            
                        
            /*Si no a escrito la ruta al archivo de proveedores 2 entonces*/
            if(jTProv2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de proveedores 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProv2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProv2.grabFocus();
                return;
            }            
            
            /*Si el archivo de proveedores 2 no existe entonces*/
            if(!new File(jTProv2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de proveedores 2 no existe.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProv2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProv2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de proveedores 3 entonces*/
            if(jTProv3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de clientes 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTProv3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTProv3.grabFocus();
                return;
            }            
            
            /*Si el archivo de proveedores 3 no existe entonces*/
            if(!new File(jTProv3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de proveedors 3 no existe.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTProv3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTProv3.grabFocus();
                return;
            }                                                    
            
        }/*Fin de if(jCSinProv.isSelected())*/
        
        /*Si se va a sincronizar el CXC a easy retail*/
        if(jCSinCXC.isSelected())
        {
            /*Si no a escrito la ruta al archivo de CXC entonces*/
            if(jTCXC.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de CXC.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCXC.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCXC.grabFocus();
                return;
            }            
            
            /*Si el archivo de CXC no existe entonces*/
            if(!new File(jTCXC.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de CXC no existe.", "CXC", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCXC.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCXC.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinCXC.isSelected())*/
        
        /*Si se va a sincronizar el kardex a easy retail*/
        if(jCSinKard.isSelected())
        {
            /*Si no a escrito la ruta al archivo de kardex entonces*/
            if(jTKard.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de kardex.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTKard.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTKard.grabFocus();
                return;
            }            
            
            /*Si el archivo de kardex no existe entonces*/
            if(!new File(jTKard.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de kardex no existe.", "Kardex", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTKard.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTKard.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinKard.isSelected())*/
                
        /*Si se va a sincronizar el activo fijo a easy retail*/
        if(jCSinAct.isSelected())
        {
            /*Si no a escrito la ruta al archivo de kardex entonces*/
            if(jCSinAct.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de activo fijo.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTActFij.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTActFij.grabFocus();
                return;
            }            
            
            /*Si el archivo de activo fijo no existe entonces*/
            if(!new File(jTActFij.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de activo fijo no existe.", "Activo fijo", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTActFij.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTActFij.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinAct.isSelected())*/
        
        /*Si se va a sincronizar las existencias por serie a easy retail*/
        if(jCSinSer.isSelected())
        {
            /*Si no a escrito la ruta al archivo de series entonces*/
            if(jTSer1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de existencias por serie.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTSer1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTSer1.grabFocus();
                return;
            }            
            
            /*Si el archivo de existencia por serie no existe entonces*/
            if(!new File(jTSer1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de existencia por serie no existe.", "Serie", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTSer1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTSer1.grabFocus();
                return;
            }                            
                                    
            /*Si no a escrito la ruta al archivo de series 2 entonces*/
            if(jTSer2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de existencias por serie 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTSer2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTSer2.grabFocus();
                return;
            }            
            
            /*Si el archivo de existencia por serie 2 no existe entonces*/
            if(!new File(jTSer2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de existencia por serie 2 no existe.", "Serie", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTSer2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTSer2.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinSer.isSelected())*/
        
        /*Si se va a sincronizar el CXP a easy retail*/
        if(jCSinCXP.isSelected())
        {
            /*Si no a escrito la ruta al archivo de CXP entonces*/
            if(jTCXP.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de CXP.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCXP.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCXP.grabFocus();
                return;
            }            
            
            /*Si el archivo de CXP no existe entonces*/
            if(!new File(jTCXP.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de CXP no existe.", "CXP", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCXP.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCXP.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinCXP.isSelected())*/
        
        /*Si se va a sincronizar los vendedores a easy retail*/
        if(jCSinVend.isSelected())
        {
            /*Si no a escrito la ruta al archivo de vendedores entonces*/
            if(jTVend.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de vendedores.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVend.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVend.grabFocus();
                return;
            }            
            
            /*Si el archivo de vendedores no existe entonces*/
            if(!new File(jTVend.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de vendedores no existe.", "Vendedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVend.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVend.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinVend.isSelected())*/
        
        /*Si se va a sincronizar las compras a easy retail*/
        if(jCSinComp.isSelected())
        {
            /*Si no a escrito la ruta al archivo de compras 1 entonces*/
            if(jTComp1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de compras 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTComp1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTComp1.grabFocus();
                return;
            }            
            
            /*Si el archivo de compras 1 no existe entonces*/
            if(!new File(jTComp1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de compras 1 no existe.", "Compras", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTComp1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTComp1.grabFocus();
                return;
            }                            
                                    
            /*Si no a escrito la ruta al archivo de compras 2 entonces*/
            if(jTComp2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de compras 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTComp2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTComp2.grabFocus();
                return;
            }            
            
            /*Si el archivo de compras 2 no existe entonces*/
            if(!new File(jTComp2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de compras 2 no existe.", "Compras", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTComp2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTComp2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de compras 3 entonces*/
            if(jTComp3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de compras 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTComp3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTComp3.grabFocus();
                return;
            }            
            
            /*Si el archivo de compras 3 no existe entonces*/
            if(!new File(jTComp3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de compras 3 no existe.", "Compras", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTComp3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTComp3.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de compras 4 entonces*/
            if(jTComp4.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de compras 4.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTComp4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTComp4.grabFocus();
                return;
            }            
            
            /*Si el archivo de compras 4 no existe entonces*/
            if(!new File(jTComp4.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de compras 4 no existe.", "Compras", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTComp4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTComp4.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de compras 5 entonces*/
            if(jTComp5.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de compras 5.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTComp5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTComp5.grabFocus();
                return;
            }            
            
            /*Si el archivo de compras 5 no existe entonces*/
            if(!new File(jTComp5.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de compras 5 no existe.", "Compras", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTComp5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTComp5.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinComp.isSelected())*/
        
        /*Si se va a sincronizar las ventas a easy retail*/
        if(jCSinVta.isSelected())
        {
            /*Si no a escrito la ruta al archivo de ventas 1 entonces*/
            if(jTVta1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de ventas 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVta1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVta1.grabFocus();
                return;
            }            
            
            /*Si el archivo de ventas 1 no existe entonces*/
            if(!new File(jTVta1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de ventas 1 no existe.", "Ventas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVta1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVta1.grabFocus();
                return;
            }                            
                                    
            /*Si no a escrito la ruta al archivo de ventas 2 entonces*/
            if(jTVta2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de ventas 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVta2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVta2.grabFocus();
                return;
            }            
            
            /*Si el archivo de ventas 2 no existe entonces*/
            if(!new File(jTVta2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de ventas 2 no existe.", "Ventas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVta2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVta2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de ventas 3 entonces*/
            if(jTVta3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de ventas 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVta3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVta3.grabFocus();
                return;
            }            
            
            /*Si el archivo de ventas 3 no existe entonces*/
            if(!new File(jTVta3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de ventas 3 no existe.", "Ventas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVta3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVta3.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de ventas 4 entonces*/
            if(jTVta4.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de ventas 4.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVta4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVta4.grabFocus();
                return;
            }            
            
            /*Si el archivo de ventas 4 no existe entonces*/
            if(!new File(jTVta4.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de ventas 4 no existe.", "Ventas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVta4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVta4.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de ventas 5 entonces*/
            if(jTVta5.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de ventas 5.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTVta5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTVta5.grabFocus();
                return;
            }            
            
            /*Si el archivo de ventas 5 no existe entonces*/
            if(!new File(jTVta5.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de ventas 5 no existe.", "Ventas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTVta5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTVta5.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinVta.isSelected())*/
        
        /*Si se va a sincronizar las cotizaciones a easy retail*/
        if(jCSinCot.isSelected())
        {
            /*Si no a escrito la ruta al archivo de cotizaciones 1 entonces*/
            if(jTCot1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de cotizaciones 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCot1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCot1.grabFocus();
                return;
            }            
            
            /*Si el archivo de cotizaciones 1 no existe entonces*/
            if(!new File(jTCot1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cotizaciones 1 no existe.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCot1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCot1.grabFocus();
                return;
            }                            
                                    
            /*Si no a escrito la ruta al archivo de cotizaciones 2 entonces*/
            if(jTCot2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de cotizaciones 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCot2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCot2.grabFocus();
                return;
            }            
            
            /*Si el archivo de cotizaciones 2 no existe entonces*/
            if(!new File(jTCot2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cotizaciones 2 no existe.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCot2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCot2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de cotizaciones 3 entonces*/
            if(jTCot3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de cotizaciones 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCot3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCot3.grabFocus();
                return;
            }            
            
            /*Si el archivo de cotizaciones 3 no existe entonces*/
            if(!new File(jTCot3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cotizaciones 3 no existe.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCot3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCot3.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de cotizaciones 4 entonces*/
            if(jTCot4.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de cotizaciones 4.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCot4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCot4.grabFocus();
                return;
            }            
            
            /*Si el archivo de cotizaciones 4 no existe entonces*/
            if(!new File(jTCot4.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cotizaciones 4 no existe.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCot4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCot4.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo de cotizaciones 5 entonces*/
            if(jTCot5.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de cotizaciones 5.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTCot5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTCot5.grabFocus();
                return;
            }            
            
            /*Si el archivo de cotizaciones 5 no existe entonces*/
            if(!new File(jTCot5.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de cotizaciones 5 no existe.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTCot5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTCot5.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinCot.isSelected())*/
        
        /*Si se va a sincronizar las remisiones a easy retail*/
        if(jCSinRem.isSelected())
        {
            /*Si no a escrito la ruta al archivo 1 entonces*/
            if(jTR1.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de remisiones 1.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTR1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTR1.grabFocus();
                return;
            }            
            
            /*Si el archivo 1 no existe entonces*/
            if(!new File(jTR1.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de remisiones 1 no existe.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTR1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTR1.grabFocus();
                return;
            }                            
                                    
            /*Si no a escrito la ruta al archivo 2 entonces*/
            if(jTR2.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de remisiones 2.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTR2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTR2.grabFocus();
                return;
            }            
            
            /*Si el archivo de remisiones 2 no existe entonces*/
            if(!new File(jTR2.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de remisiones 2 no existe.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTR2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTR2.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo 3 entonces*/
            if(jTR3.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de remisiones 3.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTR3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTR3.grabFocus();
                return;
            }            
            
            /*Si el archivo 3 no existe entonces*/
            if(!new File(jTR3.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de remisiones 3 no existe.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTR3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTR3.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo 4 entonces*/
            if(jTR4.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de remisiones 4.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTR4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTR4.grabFocus();
                return;
            }            
            
            /*Si el archivo  4 no existe entonces*/
            if(!new File(jTR4.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de remisiones 4 no existe.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTR4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTR4.grabFocus();
                return;
            }                            
            
            /*Si no a escrito la ruta al archivo 5 entonces*/
            if(jTR5.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de remisiones 5.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTR5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTR5.grabFocus();
                return;
            }            
            
            /*Si el archivo 5 no existe entonces*/
            if(!new File(jTR5.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de remisiones 5 no existe.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTR5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTR5.grabFocus();
                return;
            }                            
            
        }/*Fin de if(jCSinRem.isSelected())*/
        
        /*Si se va a sincronizar las existencias a easy retail*/
        if(jCSinExist.isSelected())
        {
            /*Si no a escrito la ruta al archivo de existencias entonces*/
            if(jTExist.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de existencias.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTExist.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTExist.grabFocus();
                return;
            }            
            
            /*Si el archivo de existencias no existe entonces*/
            if(!new File(jTExist.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de existencias no existe.", "Existencias", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTExist.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTExist.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinExist.isSelected())*/
        
        /*Si se va a sincronizar los almacenes a easy retail*/
        if(jCSinAlma.isSelected())
        {
            /*Si no a escrito la ruta al archivo de almacenes entonces*/
            if(jTAlma.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al catálogo de almacenes.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTAlma.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTAlma.grabFocus();
                return;
            }            
            
            /*Si el archivo de almacenes no existe entonces*/
            if(!new File(jTAlma.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo del catálogo de almacenes no existe.", "Vendedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTAlma.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTAlma.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinAlma.isSelected())*/
        
        /*Si se van a sincronizar las clasificaciones a easy retail entonces*/
        if(jCSinClas.isSelected())
        {
            /*Si no a escrito la ruta al archivo de clasificaciones entonces*/
            if(jTClas.getText().compareTo("")==0)
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "Ingresa la ruta al archivo de clasificaciones.", "Sincronización", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTClas.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTClas.grabFocus();
                return;
            }            
            
            /*Si el archivo de clasificaciones no existe entonces*/
            if(!new File(jTClas.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de clasificaciones no existe.", "Clasificaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));

                /*Coloca el borde rojo*/                               
                jTClas.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));

                /*Pon el foco del teclado en el control y regresa*/
                jTClas.grabFocus();
                return;
            }                            
                                    
        }/*Fin de if(jCSinClas.isSelected())*/
        
        /*Preguntar al usuario si esta seguro de querer realizar la interfaz*/
        Object[] op = {"Si","No"};
        int iRes    = JOptionPane.showOptionDialog(this, "¿Seguro que quieres realizar la sincronización?", "Interfazar", JOptionPane.YES_NO_OPTION,  JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconDu)), op, op[0]);
        if(iRes==JOptionPane.NO_OPTION || iRes==JOptionPane.CLOSED_OPTION)
            return;                       
        
        /*Muestra la forma para simular que está sincronizando*/
        Star.lCargGral = new LoadinGral("Realizando sincronización...");
        Star.lCargGral.setVisible(true);
        
        /*Declara banderas para saber que se va a sincronizar*/
        final boolean bCtas;
        if(jCSinCtas.isSelected())
            bCtas   = true;        
        else
            bCtas   = false;        
        final boolean bPol;
        if(jCSinPol.isSelected())
            bPol    = true;
        else
            bPol    = false;
        final boolean bPadro;
        if(jCSinPadro.isSelected())
            bPadro  = true;
        else
            bPadro  = false;
        final boolean bCli;
        if(jCSinCli.isSelected())
            bCli    = true;
        else
            bCli    = false;
        final boolean bVend;
        if(jCSinVend.isSelected())
            bVend   = true;
        else
            bVend   = false;
        final boolean bAlma;
        if(jCSinAlma.isSelected())
            bAlma   = true;
        else
            bAlma   = false;
        final boolean bProv;
        if(jCSinProvs.isSelected())
            bProv   = true;
        else
            bProv   = false;
        final boolean bProd;
        if(jCSinProds.isSelected())
            bProd   = true;
        else
            bProd   = false;
        final boolean bExis;
        if(jCSinExist.isSelected())
            bExis   = true;
        else
            bExis   = false;
        final boolean bComp;
        if(jCSinComp.isSelected())
            bComp   = true;
        else
            bComp   = false;
        final boolean bVta;
        if(jCSinVta.isSelected())
            bVta    = true;
        else
            bVta    = false;
        final boolean bCXC;
        if(jCSinCXC.isSelected())
            bCXC    = true;
        else
            bCXC    = false;
        final boolean bCXP;
        if(jCSinCXP.isSelected())
            bCXP    = true;
        else
            bCXP    = false;
        final boolean bCliCo;
        if(jCSinCliCo.isSelected())
            bCliCo  = true;
        else
            bCliCo  = false;
        final boolean bKard;
        if(jCSinKard.isSelected())
            bKard   = true;
        else
            bKard   = false;
        final boolean bSer;
        if(jCSinSer.isSelected())
            bSer    = true;
        else
            bSer    = false;
        final boolean bRem;
        if(jCSinRem.isSelected())
            bRem    = true;
        else
            bRem    = false;
        final boolean bClas;
        if(jCSinClas.isSelected())
            bClas    = true;
        else
            bClas   = false;
        final boolean bCot;
        if(jCSinCot.isSelected())
            bCot    = true;
        else
            bCot    = false;
        final boolean bAct;
        if(jCSinAct.isSelected())
            bAct    = true;
        else
            bAct    = false;
        
        /*Procesa las sincronizaciones en un thread*/
        Thread th = new Thread()
        {
            @Override
            public void run()
            {
                /*Sincroniza los vendedores*/  
                if(bVend)
                    vVend();
                
                /*Sincroniza los clientes*/  
                if(bCli)
                    vCli();
                
                /*Sincroniza los correos de los clientes*/  
                if(bCliCo)
                    vCliCo();
                
                /*Sincroniza los proveedores*/  
                if(bProv)
                    vProv();
                               
                /*Sincroniza el CXC*/  
                if(bCXC)
                    vCXC();
                                
                /*Sincroniza el CXP*/  
                if(bCXP)
                    vCXP();
                
                /*Sincroniza los almacenes*/  
                if(bAlma)
                    vAlma();
                
                /*Sincroniza las clasificaciones*/  
                if(bClas)
                    vClas();
                
                /*Sincroniza los productos*/  
                if(bProd)
                    vProd();
                
                /*Sincroniza las series*/  
                if(bSer)
                    vSer();
                
                /*Sincroniza el kardex*/  
                if(bKard)
                    vKard();
                
                /*Sincroniza el activo fijo*/  
                if(bAct)
                    vAct();
                
                /*Sincroniza las existencias*/  
                if(bExis)
                    vExis();
                
                /*Sincroniza las compras*/  
                if(bComp)
                    vComp();
                
                /*Sincroniza las ventas*/  
                if(bVta)
                    vVta();
                
                /*Sincroniza las cotizaciones*/  
                if(bCot)
                    vCot();
                
                /*Sincroniza las remisiones*/  
                if(bRem)
                    vRem();
                
                /*Sincroniza las cuentas*/  
                if(bCtas)
                    vCtas();
                
                /*Sincroniza el padrón de proveedores*/  
                if(bPadro)
                    vPadro();                                
                
                /*Sincroniza las pólizas*/  
                if(bPol)
                    vPol();                                
                
                /*Esconde la forma de loading*/
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);
            }
        };
        th.start();                    
        
    }//GEN-LAST:event_jBInterActionPerformed

    
    /*Cuando se presiona una tecla en el botón de interfazar*/
    private void jBInterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBInterKeyPressed
                
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBInterKeyPressed

    
    /*Cuando el mouse entra en el botón de interfazar*/
    private void jBInterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBInterMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBInter.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBInterMouseEntered

    
    /*Cuando el mouse sale del botón de interfazar*/
    private void jBInterMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBInterMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBInter.setBackground(colOri);
        
    }//GEN-LAST:event_jBInterMouseExited

    
    /*Cuando se presiona una tecla en el campo de la cuenta de activo*/
    private void jTCtaActKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtaActKeyPressed
                
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtaActKeyPressed

    
    /*Cuando se presiona una tecla en el campo de la cuenta del pasivo*/
    private void jTCtaPasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtaPasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtaPasKeyPressed

    
    /*Cuando se presiona una tecla en el campo de la cuenta del capital*/
    private void jTCtaCapiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtaCapiKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtaCapiKeyPressed


    /*Cuando se gana el foco del teclado en el campo de la cuenta del activo*/
    private void jTCtaActFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaActFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtaAct.setSelectionStart(0);jTCtaAct.setSelectionEnd(jTCtaAct.getText().length());
        
    }//GEN-LAST:event_jTCtaActFocusGained

    
    /*Cuando se gana el foco del teclado en el campo de la cuenta de pasivo*/
    private void jTCtaPasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaPasFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtaPas.setSelectionStart(0);jTCtaPas.setSelectionEnd(jTCtaPas.getText().length());
        
    }//GEN-LAST:event_jTCtaPasFocusGained

    
    /*Cuando se gana el foco del teclado en el campo de la cuenta del capital*/
    private void jTCtaCapiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaCapiFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtaCapi.setSelectionStart(0);jTCtaCapi.setSelectionEnd(jTCtaCapi.getText().length());
        
    }//GEN-LAST:event_jTCtaCapiFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la cuenta de activo*/
    private void jTCtaActFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaActFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtaAct.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtaAct.getText().compareTo("")!=0)
            jTCtaAct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtaActFocusLost

    
    /*Cuando se pierde el foco del teclado en el campo de la cuenta del pasivo*/
    private void jTCtaPasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaPasFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtaPas.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtaPas.getText().compareTo("")!=0)
            jTCtaPas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtaPasFocusLost

    
    /*Cuando  se pierde el foco del teclado en el campo de la cuenta del capital*/
    private void jTCtaCapiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtaCapiFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtaCapi.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtaCapi.getText().compareTo("")!=0)
            jTCtaCapi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtaCapiFocusLost

    
    /*Cuando se presiona una tecla en el panel contenedor*/
    private void jPPrincipKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPPrincipKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jPPrincipKeyPressed

    
    /*Cuando se presiona una tecla en el botón de ver cuentas*/
    private void jBVerCtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVerCtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVerCtaKeyPressed

    
    /*Cuando el mouse entra en el botón de ver cuentas*/
    private void jBVerCtaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVerCtaMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVerCta.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVerCtaMouseEntered

    
    /*Cuando el mouse sale del botón de ver cuentas*/
    private void jBVerCtaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVerCtaMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVerCta.setBackground(colOri);
        
    }//GEN-LAST:event_jBVerCtaMouseExited

    
    /*Cuando se presiona el botón de modificar cuentas de la interfaz de contabilidad*/
    private void jBVerCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVerCtaActionPerformed
        
        /*Válida los campos de conexión*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }

        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;
        
        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para ver las cuentas*/
        cats.VerCtaCont v = new cats.VerCtaCont(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta);
        v.setVisible(true);
        
    }//GEN-LAST:event_jBVerCtaActionPerformed

    
    /*Cuando el mouse entra en el botón de búscar ruta de póliza*/
    private void jBPolMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBPolMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBPol.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBPolMouseEntered

    
    /*Cuando el mouse sale del botón de búscar ruta de pólizas*/
    private void jBPolMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBPolMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBPol.setBackground(colOri);
        
    }//GEN-LAST:event_jBPolMouseExited

    
    /*Cuando se presiona el botón de búscar ruta de póliza*/
    private void jBPolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPolActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta la imágen*/
        final JFileChooser fc                       = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar PDF Pólizas");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Pólizas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control de la ruta de la póliza*/
        jTRutPol.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTRutPol.setCaretPosition(0);
        
    }//GEN-LAST:event_jBPolActionPerformed

    
    /*Cuando se presiona una tecla en el botón de las pólizas*/
    private void jBPolKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBPolKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBPolKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la ruta de la póliza*/
    private void jTRutPolFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRutPolFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRutPol.setSelectionStart(0);jTRutPol.setSelectionEnd(jTRutPol.getText().length());
        
    }//GEN-LAST:event_jTRutPolFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la ruta de la póliza*/
    private void jTRutPolFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRutPolFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRutPol.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRutPol.getText().compareTo("")!=0)
            jTRutPol.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRutPolFocusLost

    
    /*Cuando se presiona una tecla en el campo de la ruta de las pólizas*/
    private void jTRutPolKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRutPolKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRutPolKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar cuentas*/
    private void jCSinCtasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCtasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCtasKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar pólizas*/
    private void jCSinPolKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinPolKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinPolKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del usuario de contabilidad*/
    private void jTUsrContaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrContaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTUsrConta.setSelectionStart(0);jTUsrConta.setSelectionEnd(jTUsrConta.getText().length());
        
    }//GEN-LAST:event_jTUsrContaFocusGained

    
    /*Cuando se presiona una tecla en el campo del usuario de contabilidad*/
    private void jTUsrContaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrContaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTUsrConta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTUsrConta.getText().compareTo("")!=0)
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTUsrContaFocusLost

    
    /*Cuando se presiona una tecla en el campo del usuario de contabilidad*/
    private void jTUsrContaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTUsrContaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTUsrContaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del nombre de la empresa de contabilidad*/
    private void jTNomContaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTNomContaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTNomConta.setSelectionStart(0);jTNomConta.setSelectionEnd(jTNomConta.getText().length());
        
    }//GEN-LAST:event_jTNomContaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del nombre de la contabilidad*/
    private void jTNomContaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTNomContaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTNomConta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTNomConta.getText().compareTo("")!=0)
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTNomContaFocusLost

    
    /*Cuando se presiona una tecla en el campo del nombre de la empresa de contabilidad*/
    private void jTNomContaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNomContaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTNomContaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la contraseña de contabilidad*/
    private void jPContContaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContContaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jPContConta.setSelectionStart(0);jPContConta.setSelectionEnd(jPContConta.getText().length());
        
    }//GEN-LAST:event_jPContContaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la contraseña de contabilidad*/
    private void jPContContaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContContaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jPContConta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jPContConta.getText().compareTo("")!=0)
            jPContConta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jPContContaFocusLost

    
    /*Cuando se presiona una tecla en el campo de la contraseña de contabilidad*/
    private void jPContContaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPContContaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jPContContaKeyPressed

    
    /*Cuando el mouse entra en el botón de probar conexión con contabilidad*/
    private void jBProbContaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbContaMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProbConta.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProbContaMouseEntered

    
    /*Cuando el mouse sale del botón de probar conexión con SDK de contabilidad*/
    private void jBProbContaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbContaMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProbConta.setBackground(colOri);
        
    }//GEN-LAST:event_jBProbContaMouseExited

    
    /*Cuando se presiona el botón de probar conexión con SDK cotabilidad*/
    private void jBProbContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProbContaActionPerformed
        
        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Manda a llamar join data para probar la conexión con el SDK*/
        try
        {
            Process pro = new ProcessBuilder("joindata.exe", jTInst.getText().trim(), jTUsr.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), "cone", jTUsrConta.getText().trim(), jTNomConta.getText().trim(), sContConta).start();
        }
        catch(Exception e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);                  
        }                    
        
    }//GEN-LAST:event_jBProbContaActionPerformed

    
    /*Cuando se presiona una tecla en el botón de probar conexión con SDK contabilidad*/
    private void jBProbContaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProbContaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProbContaKeyPressed

    
    /*Cuando el mouse entra en el botón de búscar cuentas de nivel 2*/
    private void jBCtas2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtas2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCtas2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCtas2MouseEntered

    
    /*Cuando el mouse sale del botón de búscar cuentas de nivel 2 archivo*/
    private void jBCtas2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtas2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCtas2.setBackground(colOri);
        
    }//GEN-LAST:event_jBCtas2MouseExited

    
    /*Cuando se presiona el botón de búscar archivo de cuentas contables de nivel 2*/
    private void jBCtas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCtas2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta la imágen*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar PDF Cuentas Nivel 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control de la cuenta*/
        jTCtas2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCtas2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCtas2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cuentas de nivel 2*/
    private void jBCtas2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCtas2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCtas2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de las cuentas de nivel 2*/
    private void jTCtas2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtas2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtas2.setSelectionStart(0);jTCtas2.setSelectionEnd(jTCtas2.getText().length());
        
    }//GEN-LAST:event_jTCtas2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de las cuentas de nivel 2*/
    private void jTCtas2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtas2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtas2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtas2.getText().compareTo("")!=0)
            jTCtas2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtas2FocusLost

    
    /*Cuando se presiona una tecla en el campo de las cuentas de nivel 2*/
    private void jTCtas2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtas2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtas2KeyPressed

    
    /*Cuando el mouse entra en el botón de la ruta de las cuentas de nivel 3*/
    private void jBCtas3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtas3MouseEntered
               
        /*Cambia el color del fondo del botón*/
        jBCtas3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCtas3MouseEntered

    
    /*Cuando el mouse sale del botón de búscar la ruta al archivo de las cuentas de nivel 3*/
    private void jBCtas3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCtas3MouseExited
       
        /*Cambia el color del fondo del botón al original*/
        jBCtas3.setBackground(colOri);
        
    }//GEN-LAST:event_jBCtas3MouseExited

    
    /*Cuando se presiona el botón de búscar ruta de las cuentas de nivel 3*/
    private void jBCtas3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCtas3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta la imágen*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar PDF Cuentas Nivel 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cuentas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control de la cuenta*/
        jTCtas3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCtas3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCtas3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar el archivo de las cuentas de nivel 3*/
    private void jBCtas3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCtas3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCtas3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la ruta de las cuentas de nivel 3*/
    private void jTCtas3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtas3FocusGained
 
        /*Selecciona todo el texto cuando gana el foco*/
        jTCtas3.setSelectionStart(0);jTCtas3.setSelectionEnd(jTCtas3.getText().length());
        
    }//GEN-LAST:event_jTCtas3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la ruta de las cuentas de nivel 3*/
    private void jTCtas3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCtas3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCtas3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCtas3.getText().compareTo("")!=0)
            jTCtas3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCtas3FocusLost

    
    /*Cuando se presiona una tecla en el campo de la ruta de las cuentas de nivel 3*/
    private void jTCtas3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCtas3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCtas3KeyPressed

    
    
    
    /*Cuando se presiona el botón de guardar cambios*/
    private void jBGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSal1ActionPerformed
                      
    }//GEN-LAST:event_jBSal1ActionPerformed

    
    /*Cuando se presiona el botón de guardar cambios en el botón de guardar*/
    private void jBGuaCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuaCActionPerformed
        
        /*Preguntar al usuario si esta seguro de que querer guardar los cambios*/
        Object[] op = {"Si","No"};
        int iRes    = JOptionPane.showOptionDialog(this, "¿Seguro que quieres guardar los cambios?", "Guardar Cambios", JOptionPane.YES_NO_OPTION,  JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconDu)), op, op[0]);
        if(iRes==JOptionPane.NO_OPTION || iRes==JOptionPane.CLOSED_OPTION)
            return;                       
        
        /*Si el puerto de sql es cadena vacia que sea 0*/
        String sPort    = jTPort.getText();
        if(sPort.compareTo("")==0)
            sPort       = "0";
        
        /*Si el puerto de easy retail es cadena vacia que sea 0*/
        String sPortE   = jTPortE.getText();
        if(sPortE.compareTo("")==0)
            sPortE      = "0";
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + Star.sInstancia + ":" + Star.sPort + "/" + Star.sBD + "?user=" + Star.sUsuario + "&password=" + Star.sContrasenia );       
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        /*Comprueba si ya existe el tipo de información en la base de datos para la interfaz*/
        boolean bSi = false;
        try
        {
            sQ = "SELECT inst FROM interbd WHERE tip = 'macthinconta'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces colo la bandera*/
            if(rs.next())            
                bSi = true;
        }
        catch(SQLException e)
        {
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;                       
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }
                    
        /*Inicialmente la consulta será de inserción*/
        sQ = "INSERT INTO interbd(inst,                                                         usr,                                    contra,                                                          bd,                             port,                        nom,                                        usr2,                                    contra2,                                                 tip,                 sucu,                 nocaj,                  estac,                 insteas,                                                  usreas,                            contraeas,                                                 bdeas,                            porteas,                retivaflet,                            retisr,                             cta1flet,                               cta2flet,                               cta3flet,                               cta1arr,                               cta2arr,                               cta3arr,                               cta1merc,                               cta2merc,                               cta2gast,                               cta1hon,                               cta2hon,                               cta3hon,                               cta1cv,                              cta1vta,                               cta2vta,                               cta3vta,                               cta4vta,                               ctabanc,                           ctagaran,                           ctaivapendpag,                           ctaivaxpag,                           ctadevsobvta,                           ivapendac,                             retiva,                              ctaivaacred,                           ctaremvta1,                          ctaremvta2,                         ctaremrta1,                             ctaremrta2,                          ctaremint1,                            ctaremint2) "
                   + "VALUES('" + jTInst.getText().replace("\\", "\\\\").trim() + "',  '" +     jTUsr.getText().trim() + "',    '" +    Star.sEncrip(new String(jPCont.getPassword())) + "',    '" +     jTBD.getText().trim() + "',  " +sPort.trim() + ",       '" + jTNomConta.getText().trim() + "',      '" + jTUsrConta.getText().trim() + "',   '" + Star.sEncrip(new String(jPContConta.getPassword())) + "','macthinconta', '" + Star.sSucu + "', '" + Star.sNoCaj + "', '" +  Login.sUsrG + "', '" + jTInstE.getText().replace("\\", "\\\\").trim() + "', '" + jTUsrE.getText().trim() + "', '" + Star.sEncrip(new String(jPContE.getPassword())) + "', '" + jTBDE.getText().trim() + "', '" + sPortE.trim() + "', " + jTRetIVAFlet.getText().trim() + ", " + jTRetISR.getText().trim() + ", '" + jTCarg1Flet.getText().trim() + "', '" + jTCarg2Flet.getText().trim() + "', '" + jTAbon1Flet.getText().trim() + "', '" + jTCarg1Arr.getText().trim() + "', '" + jTCarg2Arr.getText().trim() + "', '" + jTAbon1Arr.getText().trim() + "', '" + jTCarg1Merc.getText().trim() + "', '" + jTCarg2Merc.getText().trim() + "', '" + jTCarg2Gast.getText().trim() + "', '" + jTCarg1Hon.getText().trim() + "', '" + jTCarg2Hon.getText().trim() + "', '" + jTAbon1Hon.getText().trim() + "', '" + jTCargCV.getText().trim() + "', '" + jTCarg1Vta.getText().trim() + "', '" + jTAbon1Vta.getText().trim() + "', '" + jTAbon2Vta.getText().trim() + "', '" + jTAbon3Vta.getText().trim() + "', '" + jTBanc.getText().trim() + "', '" + jTGaran.getText().trim() + "', '" + jTIvaPendPag.getText().trim() + "', '" + jTIvaXPag.getText().trim() + "', '" + jTDevSobVta.getText().trim() + "', '" + jTIVAPendAc.getText().trim() + "', " + jTRetHono.getText().trim() + ", '" + jTIVAAcred.getText().trim() + "', '" + jTRVta1.getText().trim() + "', '" +  jTRVta2.getText().trim() + "', '" + jTRRent1.getText().trim() + "', '" +    jTRRent2.getText().trim() + "', '" + jTRInte1.getText().trim() + "', '" +   jTRInte2.getText().trim() + "')";                    
        
        /*Si el registro ya existe entonces la consulta será de actualización*/
        if(bSi)
        {
            sQ = "UPDATE interbd SET "
                    + "inst         = '" + jTInst.getText().replace("\\", "\\\\").trim() + "',"
                    + "insteas      = '" + jTInstE.getText().replace("\\", "\\\\").trim() + "',"
                    + "usr          = '" + jTUsr.getText().trim() + "',"
                    + "usreas       = '" + jTUsrE.getText().trim() + "',"
                    + "contra       = '" + Star.sEncrip(new String(jPCont.getPassword())) + "',"
                    + "contraeas    = '" + Star.sEncrip(new String(jPContE.getPassword())) + "',"
                    + "bd           = '" + jTBD.getText().trim() + "',"
                    + "bdeas        = '" + jTBDE.getText().trim() + "',"
                    + "port         = " + sPort + ","
                    + "porteas      = " + sPortE + ","
                    + "nom          = '" + jTNomConta.getText().trim() + "',"
                    + "cta1cv       = '" + jTCargCV.getText().trim() + "',"
                    + "retivaflet   = " + jTRetIVAFlet.getText().trim() + ","
                    + "retiva       = " + jTRetHono.getText().trim() + ","
                    + "ivapendac    = '" + jTIVAPendAc.getText().trim() + "',"
                    + "ctaremvta1   = '" + jTRVta1.getText().trim() + "',"
                    + "ctaremvta2   = '" + jTRVta2.getText().trim() + "',"
                    + "ctaremrta1   = '" + jTRRent1.getText().trim() + "',"
                    + "ctaremrta2   = '" + jTRRent2.getText().trim() + "',"
                    + "ctaremint1   = '" + jTRInte1.getText().trim() + "',"
                    + "ctaremint2   = '" + jTRInte2.getText().trim() + "',"
                    + "ctaivapendpag= '" + jTIvaPendPag.getText().trim() + "',"
                    + "ctaivaxpag   = '" + jTIvaXPag.getText().trim() + "',"
                    + "ctabanc      = '" + jTBanc.getText().trim() + "',"
                    + "ctaivaacred  = '" + jTIVAAcred.getText().trim() + "',"
                    + "ctagaran     = '" + jTGaran.getText().trim() + "',"
                    + "retisr       = " + jTRetISR.getText().trim() + ","
                    + "cta1flet     = '" + jTCarg1Flet.getText().trim() + "',"
                    + "cta2flet     = '" + jTCarg2Flet.getText().trim() + "',"
                    + "cta3flet     = '" + jTAbon1Flet.getText().trim() + "',"                    
                    + "cta1hon      = '" + jTCarg1Hon.getText().trim() + "',"
                    + "cta2hon      = '" + jTCarg2Hon.getText().trim() + "',"
                    + "cta3hon      = '" + jTAbon1Hon.getText().trim() + "',"                    
                    + "cta1arr      = '" + jTCarg1Arr.getText().trim() + "',"
                    + "cta2arr      = '" + jTCarg2Arr.getText().trim() + "',"
                    + "cta3arr      = '" + jTAbon1Arr.getText().trim() + "',"
                    + "cta1merc     = '" + jTCarg1Merc.getText().trim() + "',"
                    + "cta2merc     = '" + jTCarg2Merc.getText().trim() + "',"                    
                    + "cta2gast     = '" + jTCarg2Gast.getText().trim() + "',"                    
                    + "cta1vta      = '" + jTCarg1Vta.getText().trim() + "',"
                    + "cta2vta      = '" + jTAbon1Vta.getText().trim() + "',"                    
                    + "cta3vta      = '" + jTAbon2Vta.getText().trim() + "',"                    
                    + "cta4vta      = '" + jTAbon3Vta.getText().trim() + "',"                    
                    + "ctadevsobvta = '" + jTDevSobVta.getText().trim() + "',"                    
                    + "usr2         = '" + jTUsrConta.getText().trim() + "',"
                    + "contra2      = '" + Star.sEncrip(new String(jPContConta.getPassword())) + "',"
                    + "sucu         = '" + Star.sSucu + "',"
                    + "nocaj        = '" + Star.sNoCaj + "',"
                    + "estac        = '" + Login.sUsrG + "' "
                    + "WHERE tip    = 'macthinconta'";                    
        }
        
        /*Inserta los datos de conexión en la base de datos*/
        try 
        {                            
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }

        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Mensajea de éxito*/
        JOptionPane.showMessageDialog(null, "Cambios guardados con éxito.", "Guardar Cambios", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));        
        
    }//GEN-LAST:event_jBGuaCActionPerformed

    
    /*Cuando se presiona una tecla en el botón de guardar cambios*/
    private void jBGuaCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBGuaCKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBGuaCKeyPressed

    
    /*Cuando el mouse entra en el botón de guardar*/
    private void jBGuaCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBGuaCMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBGuaC.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBGuaCMouseEntered

    
    /*Cuando el mouse sale del botón de guardar cambios*/
    private void jBGuaCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBGuaCMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBGuaC.setBackground(colOri);
        
    }//GEN-LAST:event_jBGuaCMouseExited

    
    /*Cuando el mouse entra en el botón del padrón de proveedores*/
    private void jBPadroMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBPadroMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBPadro.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBPadroMouseEntered

    
    /*Cuando el mouse sale del botón del padrón de proveedores*/
    private void jBPadroMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBPadroMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBPadro.setBackground(colOri);
        
    }//GEN-LAST:event_jBPadroMouseExited

    
    /*Cuando se presiona el botón de búscar archivo de PDF de padrón 1*/
    private void jBPadroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPadroActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta la imágen*/
        final JFileChooser fc                       = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar PDF Padrón 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Pólizas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control de la ruta de la póliza*/
        jTRutPadro.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTRutPadro.setCaretPosition(0);
        
    }//GEN-LAST:event_jBPadroActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar archivo de padrón de proveedors 1*/
    private void jBPadroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBPadroKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBPadroKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del padrón 1*/
    private void jTRutPadroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRutPadroFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRutPadro.setSelectionStart(0);jTRutPadro.setSelectionEnd(jTRutPadro.getText().length());
        
    }//GEN-LAST:event_jTRutPadroFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la ruta del padrón*/
    private void jTRutPadroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRutPadroFocusLost
 
        /*Coloca el caret en la posiciòn 0*/
        jTRutPadro.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRutPadro.getText().compareTo("")!=0)
            jTRutPadro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRutPadroFocusLost

    
    /*Cuando se presiona una tecla en el campo de la ruta del padrón de proveedores 1*/
    private void jTRutPadroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRutPadroKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRutPadroKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar padrón de proveedores*/
    private void jCSinPadroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinPadroKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinPadroKeyPressed

    
    /*Cuando se presiona una tecla en el panel administrativo*/
    private void jPAdminKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPAdminKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jPAdminKeyPressed

    
    /*Cuando el mouse entra en el botón de clientes 1*/
    private void jBCli1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCli1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCli1MouseEntered

    
    /*Cuando el mouse sale del botón de clientes 1*/
    private void jBCli1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli1MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCli1.setBackground(colOri);
        
    }//GEN-LAST:event_jBCli1MouseExited

    
    /*Cuando se presiona el botón de clientes 1*/    
    private void jBCli1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCli1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Clientes 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTCli1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCli1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCli1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar catálogo de clientes 1*/
    private void jBCli1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCli1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCli1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de clientes 1*/
    private void jTCli1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCli1.setSelectionStart(0);jTCli1.setSelectionEnd(jTCli1.getText().length());
        
    }//GEN-LAST:event_jTCli1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliente 1*/
    private void jTCli1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCli1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCli1.getText().compareTo("")!=0)
            jTCli1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCli1FocusLost

    
    /*Cuando se presiona una tecla en el campo de clientes 1*/
    private void jTCli1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCli1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCli1KeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar catálogo de clientes*/
    private void jCSinCliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCliKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCliKeyPressed

    
    /*Cuando el mouse entra en el botón de clientes 2*/
    private void jBCli2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCli2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCli2MouseEntered

    
    /*Cuando el mouse sale del botón de clientes 2*/
    private void jBCli2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCli2.setBackground(colOri);
        
    }//GEN-LAST:event_jBCli2MouseExited

    
    /*Cuando se presiona el botón de clientes 2*/
    private void jBCli2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCli2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Clientes 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTCli2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCli2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCli2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar catálogo de clientes 2*/
    private void jBCli2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCli2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCli2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de clientes 2*/
    private void jTCli2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCli2.setSelectionStart(0);jTCli2.setSelectionEnd(jTCli2.getText().length());
        
    }//GEN-LAST:event_jTCli2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliente 2*/
    private void jTCli2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCli2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCli2.getText().compareTo("")!=0)
            jTCli2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCli2FocusLost

    
    /*Cuando se presiona una tecla en el campo de clientes 2*/
    private void jTCli2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCli2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCli2KeyPressed

    
    /*Cuando el mouse entra en el botón de clientes 3*/
    private void jBCli3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli3MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCli3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCli3MouseEntered

    
    /*Cuando el mouse sale del botón de clientes 3*/
    private void jBCli3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli3MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCli3.setBackground(colOri);
        
    }//GEN-LAST:event_jBCli3MouseExited

    
    /*Cuando se presiona el botón de clientes 3*/
    private void jBCli3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCli3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Clientes 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTCli3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCli3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCli3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar catálogo de clientes 3*/
    private void jBCli3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCli3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCli3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cliente 3*/
    private void jTCli3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli3FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCli3.setSelectionStart(0);jTCli3.setSelectionEnd(jTCli3.getText().length());
        
    }//GEN-LAST:event_jTCli3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliente 3*/
    private void jTCli3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCli3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCli3.getText().compareTo("")!=0)
            jTCli3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCli3FocusLost

    
    /*Cuando se presiona una tecla en el campo del cliente 3*/
    private void jTCli3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCli3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCli3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cliente 4*/
    private void jTCli4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli4FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCli4.setSelectionStart(0);jTCli4.setSelectionEnd(jTCli4.getText().length());
        
    }//GEN-LAST:event_jTCli4FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliente 4*/
    private void jTCli4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli4FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCli4.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCli4.getText().compareTo("")!=0)
            jTCli4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCli4FocusLost

    
    /*Cuando se presiona una tecla en el campo de clientes 4*/
    private void jTCli4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCli4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCli4KeyPressed

    
    /*Cuando el mouse entra en el botón de clientes 4*/
    private void jBCli4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli4MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCli4.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCli4MouseEntered

    
    /*Cuando el mouse sale del botón de clientes 4*/
    private void jBCli4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli4MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCli4.setBackground(colOri);
        
    }//GEN-LAST:event_jBCli4MouseExited

    
    /*Cuando se presiona el botón de clientes 4*/
    private void jBCli4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCli4ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Clientes 4");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTCli4.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCli4.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCli4ActionPerformed

    
    /*Cuando se presiona una tecla en el campo de búscar catálogo de clientes 4*/
    private void jBCli4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCli4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCli4KeyPressed

    
    /*Cuando el mouse entra en el botón de clientes 5*/
    private void jBCli5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli5MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCli5.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCli5MouseEntered

    
    /*Cuando el mouse sale del botón de clientes 5*/
    private void jBCli5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCli5MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBCli5.setBackground(colOri);
        
    }//GEN-LAST:event_jBCli5MouseExited

    
    /*Cuando se presiona el botón de clientes 5*/
    private void jBCli5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCli5ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Clientes 5");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTCli5.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCli5.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCli5ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de búscar catálogo de clientes 5*/
    private void jBCli5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCli5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCli5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cliente 5*/
    private void jTCli5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli5FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCli5.setSelectionStart(0);jTCli5.setSelectionEnd(jTCli5.getText().length());
        
    }//GEN-LAST:event_jTCli5FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliente 5*/
    private void jTCli5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCli5FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCli5.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCli5.getText().compareTo("")!=0)
            jTCli5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCli5FocusLost

    
    /*Cuando se presiona una tecla en el campo del cliente 5*/
    private void jTCli5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCli5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCli5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la instancia de easy retail*/
    private void jTInstEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTInstEFocusGained
 
        /*Selecciona todo el texto cuando gana el foco*/
        jTInstE.setSelectionStart(0);jTInstE.setSelectionEnd(jTInstE.getText().length());        
        
    }//GEN-LAST:event_jTInstEFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la instancia de easy retail*/
    private void jTInstEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTInstEFocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTInstE.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTInstE.getText().compareTo("")!=0)
            jTInstE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTInstEFocusLost

    
    /*Cuando se presiona una tecla en el campo de la instancia de easy retail*/
    private void jTInstEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTInstEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTInstEKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del usuario de easy retail*/
    private void jTUsrEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrEFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTUsrE.setSelectionStart(0);jTUsrE.setSelectionEnd(jTUsrE.getText().length());        
        
    }//GEN-LAST:event_jTUsrEFocusGained

    private void jTUsrEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTUsrEFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTUsrEFocusLost

    
    /*Cuando se presiona una tecla en el campo del usuario de easy retail*/
    private void jTUsrEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTUsrEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTUsrEKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo e la contraseña de easy retail*/
    private void jPContEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContEFocusGained
 
        /*Selecciona todo el texto cuando gana el foco*/
        jPContE.setSelectionStart(0);jPContE.setSelectionEnd(jPContE.getText().length());        
        
    }//GEN-LAST:event_jPContEFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la contraseña de easy retail*/
    private void jPContEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPContEFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jPContE.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jPContE.getText().compareTo("")!=0)
            jPContE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jPContEFocusLost

    
    /*Cuando se presiona una tecla en el campo de la contraseña de easy retail*/
    private void jPContEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPContEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jPContEKeyPressed

    
    /*Cuando sucede una acción en el check de mostrar contraseña de easy retail*/
    private void jCMosCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCMosCEActionPerformed
        
        /*Si esta marcado entonces muestra la contraseña*/
        if(jCMosCE.isSelected())
            jPContE.setEchoChar((char)0);
        /*Else, ocultala*/
        else
            jPContE.setEchoChar('*');
        
    }//GEN-LAST:event_jCMosCEActionPerformed

    private void jCMosCEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCMosCEKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCMosCEKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la base de datos de easy retail*/
    private void jTBDEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBDEFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTBDE.setSelectionStart(0);jTBDE.setSelectionEnd(jTBDE.getText().length());        
        
    }//GEN-LAST:event_jTBDEFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la base de datos de easy retail*/
    private void jTBDEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBDEFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTBDE.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTBDE.getText().compareTo("")!=0)
            jTBDE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTBDEFocusLost

    
    /*Cuando se presiona una tecla en el campo de la base de datos de easy retail*/
    private void jTBDEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTBDEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTBDEKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del puerto de easy retail*/
    private void jTPortEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTPortEFocusGained
 
        /*Selecciona todo el texto cuando gana el foco*/
        jTPortE.setSelectionStart(0);jTPortE.setSelectionEnd(jTPortE.getText().length());        
        
    }//GEN-LAST:event_jTPortEFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del puerto de easy retail*/
    private void jTPortEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTPortEFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTPortE.setCaretPosition(0);
        
    }//GEN-LAST:event_jTPortEFocusLost

    
    /*Cuando se presiona una tecla en el campo del puerto de esasy retail*/
    private void jTPortEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPortEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTPortEKeyPressed

    private void jTPortEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPortEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTPortEKeyTyped

    
    /*Cuando el mouse entra en el botón de probar conexión con easy retail*/
    private void jBProbEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbEMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProbE.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProbEMouseEntered

    
    /*Cuando el mouse sale del botón de probar conexión con easy retail*/
    private void jBProbEMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProbEMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProbE.setBackground(colOri);
        
    }//GEN-LAST:event_jBProbEMouseExited

    
    /*Cuando se presiona el botón de probar conexión con easy retail*/
    private void jBProbEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProbEActionPerformed
        
        /*Válida los campos de conexión de easy retail*/
        vValCampConE();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
            
        /*Muestra la forma para simular que esta abriendo la base de datos*/
        Star.lCargGral = new LoadinGral("Probando Conexión Easy Retail...");
        Star.lCargGral.setVisible(true);

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
        
        /*Obtiene todos los campos de conexión*/        
        final String sInst  = jTInstE.getText().trim();
        final String sUsr   = jTUsrE.getText().trim();
        final String sPass  = new String(jPContE.getPassword());
        final String sBD    = jTBDE.getText().trim();
        final String sPortFi= sPort;
        
        /*Intenta conectar en un thread*/
        Thread th = new Thread()
        {
            @Override
            public void run()
            {                
                /*Abre la base de datos*/
                Connection  con;  
                try
                {
                    con = DriverManager.getConnection("jdbc:mysql://" + sInst +  sPortFi + "/" + sBD + "?user=" + sUsr + "&password=" + sPass );               
                }
                catch(SQLException ex)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);
                    
                    /*Agrega en el log*/
                    Login.vLog(ex.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos de Easy Retail. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                    return;
                }

                /*Esconde la forma de probar conexión*/       
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos
                if(Star.iCierrBas(con)==-1)
                    return;
            
                /*Mensaje de éxito*/
                JOptionPane.showMessageDialog(null, "Conexión exitosa a Easy Retail.", "Conexión", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));                                
            }
        };
        th.start();                        
        
    }//GEN-LAST:event_jBProbEActionPerformed

    
    /*Cuando se presiona una tecla en el campo de probar conexión con easy retail*/
    private void jBProbEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProbEKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProbEKeyPressed

    
    /*Cuando el mouse entra en el botón del almacén*/
    private void jBAlmaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBAlmaMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBAlma.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBAlmaMouseEntered

    
    /*Cuando el mouse sale del botón de almacén*/
    private void jBAlmaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBAlmaMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBAlma.setBackground(colOri);
        
    }//GEN-LAST:event_jBAlmaMouseExited

    
    /*Cuando se presiona el botón de almacenes*/    
    private void jBAlmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlmaActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Almacenes");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Almacenes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTAlma.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTAlma.setCaretPosition(0);
        
    }//GEN-LAST:event_jBAlmaActionPerformed

    
    /*Cuando se presiona una tecla en el botón de almacenes*/
    private void jBAlmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBAlmaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBAlmaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del almacén*/
    private void jTAlmaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAlmaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAlma.setSelectionStart(0);jTAlma.setSelectionEnd(jTAlma.getText().length());
        
    }//GEN-LAST:event_jTAlmaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo el almacén*/
    private void jTAlmaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAlmaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAlma.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAlma.getText().compareTo("")!=0)
            jTAlma.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAlmaFocusLost

    
    /*Cuando se presiona una tecla en el campo del almacén*/
    private void jTAlmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAlmaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAlmaKeyPressed

    
    /*Cuando se presiona una tecla en el chec de sincronizar almacenes*/
    private void jCSinAlmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinAlmaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinAlmaKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar proveedores*/
    private void jCSinProvsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinProvsKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinProvsKeyPressed

    
    /*Cuando el mouse entra en el botón de proveedor 1*/
    private void jBProv1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProv1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProv1MouseEntered

    
    /*Cuando el mouse sale del botón de proveedor 1*/
    private void jBProv1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv1MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProv1.setBackground(colOri);
        
    }//GEN-LAST:event_jBProv1MouseExited

    
    /*Cuando se presiona el botón de proveedores 1*/
    private void jBProv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProv1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Proveedores 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProv1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProv1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProv1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón del proveedor 1*/
    private void jBProv1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProv1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProv1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del proveedor 1*/
    private void jTProv1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProv1.setSelectionStart(0);jTProv1.setSelectionEnd(jTProv1.getText().length());
        
    }//GEN-LAST:event_jTProv1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del proveedor 1*/
    private void jTProv1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProv1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProv1.getText().compareTo("")!=0)
            jTProv1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProv1FocusLost

    
    /*Cuando se presiona una tecla en el campo del proveedor 1*/
    private void jTProv1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProv1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProv1KeyPressed

    
    /*Cuando el mouse entra en el botón de proveedor 2*/
    private void jBProv2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProv2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProv2MouseEntered

    
    /*Cuando el mouse entra en el botón del proveedor 2*/
    private void jBProv2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProv2.setBackground(colOri);
        
    }//GEN-LAST:event_jBProv2MouseExited

    
    /*Cuando se presiona el botón de proveedores 2*/
    private void jBProv2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProv2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Proveedores 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProv2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProv2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProv2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón del proveedor 2*/
    private void jBProv2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProv2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProv2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del proveedor 2*/
    private void jTProv2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProv2.setSelectionStart(0);jTProv2.setSelectionEnd(jTProv2.getText().length());
        
    }//GEN-LAST:event_jTProv2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del proveedor 2*/
    private void jTProv2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProv2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProv2.getText().compareTo("")!=0)
            jTProv2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProv2FocusLost

    
    /*Cuando se presiona una tecla en el campo del proveedor 2*/
    private void jTProv2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProv2KeyPressed
                
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProv2KeyPressed

    
    /*Cuando el mouse entra en el botón del proveedor 3*/
    private void jBProv3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv3MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProv3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProv3MouseEntered

    
    /*Cuando el mouse sale del botón de proveedor 3*/
    private void jBProv3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProv3MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProv3.setBackground(colOri);
        
    }//GEN-LAST:event_jBProv3MouseExited

    
    /*Cuando se presiona el botón de proveedores 3*/
    private void jBProv3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProv3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Proveedores 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Proveedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProv3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProv3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProv3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón del proveedor 3*/
    private void jBProv3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProv3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProv3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del proveedor 3*/
    private void jTProv3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv3FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProv3.setSelectionStart(0);jTProv3.setSelectionEnd(jTProv3.getText().length());
        
    }//GEN-LAST:event_jTProv3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del proveedor 3*/
    private void jTProv3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProv3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProv3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProv3.getText().compareTo("")!=0)
            jTProv3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProv3FocusLost

    
    /*Cuando se presiona una tecla en el campo del proveedor 3*/
    private void jTProv3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProv3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProv3KeyPressed

    
    /*Cuando el mouse entra en el botón del vendedor*/
    private void jBVendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVendMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVend.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVendMouseEntered

    
    /*Cuando el mouse sale del botón de vendedores*/
    private void jBVendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVendMouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVend.setBackground(colOri);
        
    }//GEN-LAST:event_jBVendMouseExited

    
    /*Cuando se presiona el botón de vendedores*/
    private void jBVendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVendActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Vendedores");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Vendedores", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTVend.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVend.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVendActionPerformed

    
    /*Cuando se presiona una tecla en el botón de vendedores*/
    private void jBVendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVendKeyPressed
       
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVendKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del vendedor*/
    private void jTVendFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVendFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVend.setSelectionStart(0);jTVend.setSelectionEnd(jTVend.getText().length());
        
    }//GEN-LAST:event_jTVendFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del vendedor*/
    private void jTVendFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVendFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVend.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVend.getText().compareTo("")!=0)
            jTVend.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVendFocusLost

    
    /*Cuando se presiona una tecla en el campo del vendedor*/
    private void jTVendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVendKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVendKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar vendedores*/
    private void jCSinVendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinVendKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinVendKeyPressed

    
    /*Cuando el mouse entra en el botón de productos 1*/
    private void jBProds1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProds1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProds1MouseEntered

    
    /*Cuando el mouse sale del botón de productos 1*/
    private void jBProds1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds1MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProds1.setBackground(colOri);
        
    }//GEN-LAST:event_jBProds1MouseExited

    
    /*Cuando se presiona el botón de productos 1*/
    private void jBProds1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProds1ActionPerformed
       
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Productos 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProds1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProds1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProds1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de productos 1*/
    private void jBProds1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProds1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProds1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de productos 1*/
    private void jTProds1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProds1.setSelectionStart(0);jTProds1.setSelectionEnd(jTProds1.getText().length());
        
    }//GEN-LAST:event_jTProds1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de los prouctos 1*/
    private void jTProds1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProds1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProds1.getText().compareTo("")!=0)
            jTProds1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProds1FocusLost

    
    /*Cuando se presiona una tecla en el campo de productos 1*/
    private void jTProds1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProds1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProds1KeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar productos*/
    private void jCSinProdsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinProdsKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinProdsKeyPressed

    
    /*Cuando el mouse entra en el botón de productos 2*/
    private void jBProds2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProds2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProds2MouseEntered

    
    /*Cuando el mouse sale del botón de productos 2*/
    private void jBProds2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProds2.setBackground(colOri);
        
    }//GEN-LAST:event_jBProds2MouseExited

    
    /*Cuando se presiona el botón de productos 2*/
    private void jBProds2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProds2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Productos 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProds2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProds2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProds2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de productos 2*/
    private void jBProds2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProds2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProds2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de productos 2*/
    private void jTProds2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProds2.setSelectionStart(0);jTProds2.setSelectionEnd(jTProds2.getText().length());
        
    }//GEN-LAST:event_jTProds2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de los prouctos 2*/
    private void jTProds2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProds2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProds2.getText().compareTo("")!=0)
            jTProds2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProds2FocusLost

    
    /*Cuando se presiona una tecla en el campo de productos 2*/
    private void jTProds2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProds2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProds2KeyPressed

    
    /*Cuando el mouse entra en el botón de productos 3*/
    private void jBProds3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds3MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBProds3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBProds3MouseEntered

    
    /*Cuando el mouse sale del botón de productos 3*/
    private void jBProds3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBProds3MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBProds3.setBackground(colOri);
        
    }//GEN-LAST:event_jBProds3MouseExited

    
    /*Cuando se presiona el botón de productos 3*/
    private void jBProds3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProds3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Productos 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Productos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTProds3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTProds3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBProds3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de productos 3*/
    private void jBProds3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBProds3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBProds3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de productos 3*/
    private void jTProds3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds3FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTProds3.setSelectionStart(0);jTProds3.setSelectionEnd(jTProds3.getText().length());
        
    }//GEN-LAST:event_jTProds3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de los prouctos 3*/
    private void jTProds3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTProds3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTProds3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTProds3.getText().compareTo("")!=0)
            jTProds3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTProds3FocusLost

    
    /*Cuando se presiona una tecla en el campo de productos 3*/
    private void jTProds3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProds3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTProds3KeyPressed
    
    
    /*Cuando el mouse entra en el botón de las existencias*/
    private void jBExistMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBExistMouseEntered
 
        /*Cambia el color del fondo del botón*/
        jBExist.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBExistMouseEntered

    
    /*Cuando el mouse sale del botón de las existencias*/
    private void jBExistMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBExistMouseExited
 
        /*Cambia el color del fondo del botón al original*/
        jBExist.setBackground(colOri);
        
    }//GEN-LAST:event_jBExistMouseExited

    
    /*Cuando se presiona el botón de las existencias*/
    private void jBExistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExistActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Existencias");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Existencias", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTExist.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTExist.setCaretPosition(0);
        
    }//GEN-LAST:event_jBExistActionPerformed

    
    /*Cuando se presiona una tecla en el botón de existencias*/
    private void jBExistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBExistKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBExistKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de las existencias*/
    private void jTExistFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTExistFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTExist.setSelectionStart(0);jTExist.setSelectionEnd(jTExist.getText().length());
        
    }//GEN-LAST:event_jTExistFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de las existencias*/
    private void jTExistFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTExistFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTExist.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTExist.getText().compareTo("")!=0)
            jTExist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTExistFocusLost

    
    /*Cuando se presiona una tecla en el campo de existencias*/
    private void jTExistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTExistKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTExistKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar existencias*/
    private void jCSinExistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinExistKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinExistKeyPressed

    
    /*Cuando el mouse entra en el botón de compras 1*/
    private void jBComp1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBComp1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBComp1MouseEntered

    
    /*Cuando el mouse sale del botón de compras 1*/
    private void jBComp1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp1MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBComp1.setBackground(colOri);
        
    }//GEN-LAST:event_jBComp1MouseExited

    
    /*Cuando se presiona el botón de búscar compras 1*/
    private void jBComp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComp1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Compras 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Compras 1", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTComp1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTComp1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBComp1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de compras 1*/
    private void jBComp1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBComp1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBComp1KeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar compras*/
    private void jCSinVtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinVtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinVtaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de compras 1*/
    private void jTComp1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTComp1.setSelectionStart(0);jTComp1.setSelectionEnd(jTComp1.getText().length());
        
    }//GEN-LAST:event_jTComp1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de compras 1*/
    private void jTComp1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTComp1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTComp1.getText().compareTo("")!=0)
            jTComp1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTComp1FocusLost

    
    /*Cuando se presiona una tecla en el campo de compras 1*/
    private void jTComp1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComp1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTComp1KeyPressed

    
    /*Cuando el mouse entra en el botón de compras 2*/
    private void jBComp2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBComp2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBComp2MouseEntered

    
    /*Cuando el mouse sal del botón de compras 2*/
    private void jBComp2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBComp2.setBackground(colOri);
        
    }//GEN-LAST:event_jBComp2MouseExited

    
    /*Cuando se presiona el botón de compras 2*/
    private void jBComp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComp2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Compras 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Compras 2", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTComp2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTComp2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBComp2ActionPerformed

    
    /*Cuando se presiona una tecla en el campo de compras 2*/
    private void jBComp2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBComp2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBComp2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de compras 2*/
    private void jTComp2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTComp2.setSelectionStart(0);jTComp2.setSelectionEnd(jTComp2.getText().length());
        
    }//GEN-LAST:event_jTComp2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de compras 2*/
    private void jTComp2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTComp2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTComp2.getText().compareTo("")!=0)
            jTComp2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTComp2FocusLost

    
    /*Cuando se presiona una tecla en el campo de compras 2*/
    private void jTComp2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComp2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTComp2KeyPressed

    
    /*Cuando el mouse entra en e botón de compras 3*/
    private void jBComp3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp3MouseEntered
 
        /*Cambia el color del fondo del botón*/
        jBComp3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBComp3MouseEntered

    
    /*Cuando el mouse sale del botón de compras 3*/
    private void jBComp3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp3MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBComp3.setBackground(colOri);
        
    }//GEN-LAST:event_jBComp3MouseExited

    
    /*Cuando se presiona el botón de compras 3*/
    private void jBComp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComp3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Compras 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Compras 3", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTComp3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTComp3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBComp3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de compras 3*/
    private void jBComp3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBComp3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBComp3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de compras 3*/
    private void jTComp3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp3FocusGained
 
        /*Selecciona todo el texto cuando gana el foco*/
        jTComp3.setSelectionStart(0);jTComp3.setSelectionEnd(jTComp3.getText().length());
        
    }//GEN-LAST:event_jTComp3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de compras 3*/
    private void jTComp3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp3FocusLost
 
        /*Coloca el caret en la posiciòn 0*/
        jTComp3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTComp3.getText().compareTo("")!=0)
            jTComp3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTComp3FocusLost

    
    /*Cuando se presiona una tecla en el botón de compras 3*/
    private void jTComp3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComp3KeyPressed
 
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTComp3KeyPressed

    
    /*Cuando el mouse entra en el botón de compras 4*/
    private void jBComp4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp4MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBComp4.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBComp4MouseEntered

    
    /*Cuando el mouse sale del botón de compras 4*/
    private void jBComp4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp4MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBComp4.setBackground(colOri);
        
    }//GEN-LAST:event_jBComp4MouseExited

    
    /*Cuando se presiona el botón de compras */
    private void jBComp4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComp4ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Compras 4");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Compras 4", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTComp4.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTComp4.setCaretPosition(0);
        
    }//GEN-LAST:event_jBComp4ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de compras 4*/
    private void jBComp4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBComp4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBComp4KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de compras 4*/
    private void jTComp4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp4FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTComp4.setSelectionStart(0);jTComp4.setSelectionEnd(jTComp4.getText().length());
        
    }//GEN-LAST:event_jTComp4FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de compras 4*/
    private void jTComp4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp4FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTComp4.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTComp4.getText().compareTo("")!=0)
            jTComp4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTComp4FocusLost

    
    /*Cuando se presiona una tecla en el botón de compras 4*/
    private void jTComp4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComp4KeyPressed
       
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTComp4KeyPressed

    
    /*Cuando el mouse entra en el botón de compras 5*/
    private void jBComp5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp5MouseEntered
 
        /*Cambia el color del fondo del botón*/
        jBComp5.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBComp5MouseEntered

    
    /*Cuando el mouse sale del botón de compras 5*/
    private void jBComp5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBComp5MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBComp5.setBackground(colOri);
        
    }//GEN-LAST:event_jBComp5MouseExited

    
    /*Cuando se presiona el botón de compras 5*/
    private void jBComp5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComp5ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Compras 5");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Compras 5", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTComp5.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTComp5.setCaretPosition(0);
        
    }//GEN-LAST:event_jBComp5ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de compras 5*/
    private void jBComp5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBComp5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBComp5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de las compras 5*/
    private void jTComp5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp5FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTComp5.setSelectionStart(0);jTComp5.setSelectionEnd(jTComp5.getText().length());
        
    }//GEN-LAST:event_jTComp5FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de compras 5*/
    private void jTComp5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTComp5FocusLost
                
        /*Coloca el caret en la posiciòn 0*/
        jTComp5.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTComp5.getText().compareTo("")!=0)
            jTComp5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTComp5FocusLost

    
    /*Cuando se presiona una tecla en el campo de compras 5*/
    private void jTComp5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComp5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTComp5KeyPressed

    
    /*Cuando el mouse entra en el botón de ventas 1*/
    private void jBVta1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVta1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVta1MouseEntered

    
    /*Cuando el mouse sale del botón de ventas 1*/
    private void jBVta1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta1MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVta1.setBackground(colOri);
        
    }//GEN-LAST:event_jBVta1MouseExited

    
    /*Cuando se presiona el botón de ventas 1*/
    private void jBVta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVta1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Ventas 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Ventas 1", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTVta1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVta1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVta1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de ventas 1*/
    private void jBVta1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVta1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVta1KeyPressed


    /*Cuando se gana el foco del teclado en el campo de ventas 1*/
    private void jTVta1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVta1.setSelectionStart(0);jTVta1.setSelectionEnd(jTVta1.getText().length());
        
    }//GEN-LAST:event_jTVta1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de ventas 1*/
    private void jTVta1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVta1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVta1.getText().compareTo("")!=0)
            jTVta1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVta1FocusLost

    
    /*Cuando se presiona una tecla en el campo de ventas 1*/
    private void jTVta1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVta1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVta1KeyPressed

    
    /*Cuando el mouse entra en el botón de ventas 2*/
    private void jBVta2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVta2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVta2MouseEntered

    
    /*Cuando el mouse sale del botón de ventas 2*/
    private void jBVta2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta2MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVta2.setBackground(colOri);
        
    }//GEN-LAST:event_jBVta2MouseExited

    
    /*Cuando se presiona el botón de ventas 2*/
    private void jBVta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVta2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Ventas 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Ventas 2", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTVta2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVta2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVta2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de ventas 2*/
    private void jBVta2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVta2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVta2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de ventas 2*/
    private void jTVta2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVta2.setSelectionStart(0);jTVta2.setSelectionEnd(jTVta2.getText().length());
        
    }//GEN-LAST:event_jTVta2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de ventas 2*/
    private void jTVta2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVta2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVta2.getText().compareTo("")!=0)
            jTVta2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVta2FocusLost

    
    /*Cuando se presiona una tecla en el campo de ventas 2*/
    private void jTVta2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVta2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVta2KeyPressed

    
    /*Cuando el mouse entra en el botón de venta 3*/
    private void jBVta3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta3MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVta3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVta3MouseEntered

    
    /*Cuando el mouse sale del botón de ventas 3*/
    private void jBVta3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta3MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVta3.setBackground(colOri);
        
    }//GEN-LAST:event_jBVta3MouseExited

    
    /*Cuando se presiona el botón de ventas 3*/
    private void jBVta3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVta3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Ventas 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Ventas 3", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTVta3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVta3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVta3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de ventas 3*/
    private void jBVta3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVta3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVta3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de ventas 3*/
    private void jTVta3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta3FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVta3.setSelectionStart(0);jTVta3.setSelectionEnd(jTVta3.getText().length());
        
    }//GEN-LAST:event_jTVta3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de ventas 3*/
    private void jTVta3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVta3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVta3.getText().compareTo("")!=0)
            jTVta3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVta3FocusLost

    
    /*Cuando se presiona una tecla en el campo de ventas 3*/
    private void jTVta3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVta3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVta3KeyPressed

    
    /*Cuando el mouse entra en el botón de ventas 4*/
    private void jBVta4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta4MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVta4.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVta4MouseEntered

    
    /*Cuando el mouse sale del botón de ventas 4*/
    private void jBVta4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta4MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVta4.setBackground(colOri);
        
    }//GEN-LAST:event_jBVta4MouseExited

    
    /*Cuando se presiona el botón de ventas 4*/
    private void jBVta4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVta4ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Ventas 4");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Ventas 4", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTVta4.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVta4.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVta4ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de ventas 4*/
    private void jBVta4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVta4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVta4KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de ventas 4*/
    private void jTVta4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta4FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVta4.setSelectionStart(0);jTVta4.setSelectionEnd(jTVta4.getText().length());
        
    }//GEN-LAST:event_jTVta4FocusGained

        
    /*Cuando se pierde el foco del teclado en el campo de ventas 4*/
    private void jTVta4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta4FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVta4.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVta4.getText().compareTo("")!=0)
            jTVta4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVta4FocusLost

    
    /*Cuando se presiona una tecla en el campo de ventas 4*/
    private void jTVta4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVta4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVta4KeyPressed

    
    /*Cuando el mouse entra en el botón de ventas 5*/
    private void jBVta5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta5MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVta5.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVta5MouseEntered

    
    /*Cuando el mouse sale del botón de ventas 5*/
    private void jBVta5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVta5MouseExited
        
        /*Cambia el color del fondo del botón al original*/
        jBVta5.setBackground(colOri);
        
    }//GEN-LAST:event_jBVta5MouseExited

    
    /*Cuando se presiona el botón de ventas 5*/
    private void jBVta5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVta5ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Ventas 5");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Ventas 5", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTVta5.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTVta5.setCaretPosition(0);
        
    }//GEN-LAST:event_jBVta5ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de ventas 5*/
    private void jBVta5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVta5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVta5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de ventas 5*/
    private void jTVta5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta5FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTVta5.setSelectionStart(0);jTVta5.setSelectionEnd(jTVta5.getText().length());
        
    }//GEN-LAST:event_jTVta5FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de ventas 5*/
    private void jTVta5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTVta5FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTVta5.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTVta5.getText().compareTo("")!=0)
            jTVta5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTVta5FocusLost

    
    /*Cuando se presiona una tecla en el campo de ventas 5*/
    private void jTVta5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTVta5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTVta5KeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar compras*/
    private void jCSinCompKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCompKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCompKeyPressed

    
    /*Cuando el mouse entra en el botón de CXC*/
    private void jBCXCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCXCMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCXC.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCXCMouseEntered

    
    /*Cuando el mouse sale del botón de CXC*/
    private void jBCXCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCXCMouseExited
 
        /*Cambia el color del fondo del botón al original*/
        jBCXC.setBackground(colOri);
        
    }//GEN-LAST:event_jBCXCMouseExited

    
    /*Cuando se presiona el botón de buscar cxc*/
    private void jBCXCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCXCActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar CXC");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "CXC", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCXC.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCXC.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCXCActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cxc*/
    private void jBCXCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCXCKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCXCKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de CXC*/
    private void jTCXCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCXCFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCXC.setSelectionStart(0);jTCXC.setSelectionEnd(jTCXC.getText().length());
        
    }//GEN-LAST:event_jTCXCFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de CXC*/
    private void jTCXCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCXCFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCXC.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCXC.getText().compareTo("")!=0)
            jTCXC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCXCFocusLost

    
    /*Cuando se presiona una tecla en el campo de cxc*/
    private void jTCXCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCXCKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCXCKeyPressed

    
    /*Cuando se presiona una tecla en el check de cxc*/    
    private void jCSinCXCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCXCKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCXCKeyPressed

    private void jBCXPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCXPMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCXPMouseEntered

    
    /*Cuando el mouse entra en el botón de CXP*/
    private void jBCXPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCXPMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBCXP.setBackground(colOri);
        
    }//GEN-LAST:event_jBCXPMouseExited

    
    /*Cuando se presiona el botón de CXP*/
    private void jBCXPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCXPActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar CXP");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "CXP", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCXP.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCXP.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCXPActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cxp*/
    private void jBCXPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCXPKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCXPKeyPressed

    
    /*Cuando se pierde el foco del teclado en el campo de CXP*/
    private void jTCXPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCXPFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCXP.setSelectionStart(0);jTCXP.setSelectionEnd(jTCXP.getText().length());
        
    }//GEN-LAST:event_jTCXPFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de CXP*/
    private void jTCXPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCXPFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCXP.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCXP.getText().compareTo("")!=0)
            jTCXP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCXPFocusLost

    
    /*Cuando se presiona una tecla en el botón de cxp*/
    private void jTCXPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCXPKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCXPKeyPressed

    
    /*Cuando se presiona una tecla en el check de cxp*/    
    private void jCSinCXPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCXPKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCXPKeyPressed

    
    /*Cuando se presiona una tecla en el botón de depósitos en garantía*/
    private void jBDepGarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBDepGarKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBDepGarKeyPressed

    
    /*Cuando el mouse entra en el botón de depósitos en garantía*/
    private void jBDepGarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDepGarMouseEntered
 
        /*Cambia el color del fondo del botón*/
        jBDepGar.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBDepGarMouseEntered

    
    /*Cuando el mouse sale del botón de depósitos en garantía*/
    private void jBDepGarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDepGarMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBDepGar.setBackground(colOri);
        
    }//GEN-LAST:event_jBDepGarMouseExited

    
    /*Cuando se presiona el botón de depósitos en garantía*/
    private void jBDepGarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDepGarActionPerformed
        
        /*Válida los campos de conexión de la base de datos de contabilidad*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
        
        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para mandar los depósitos en garantía a contabilidad*/
        DepGara d = new DepGara(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta);
        d.setVisible(true);
        
    }//GEN-LAST:event_jBDepGarActionPerformed

    
    /*Cuando se presona una tecla en el panel de asientos*/
    private void jPAsienKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPAsienKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jPAsienKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo 1 de fletes*/
    private void jTCarg1FletFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1FletFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg1Flet.setSelectionStart(0);jTCarg1Flet.setSelectionEnd(jTCarg1Flet.getText().length());
        
    }//GEN-LAST:event_jTCarg1FletFocusGained

    
    /*Cuando se gana el foco del teclado en el campo del cargo 2 de fletes*/
    private void jTCarg2FletFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2FletFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg2Flet.setSelectionStart(0);jTCarg2Flet.setSelectionEnd(jTCarg2Flet.getText().length());
        
    }//GEN-LAST:event_jTCarg2FletFocusGained

    
    /*Cuando se gana el foco del teclado en el campo del abono 1 flete*/
    private void jTAbon1FletFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1FletFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon1Flet.setSelectionStart(0);jTAbon1Flet.setSelectionEnd(jTAbon1Flet.getText().length());
        
    }//GEN-LAST:event_jTAbon1FletFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo 1*/
    private void jTCarg1FletFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1FletFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg1Flet.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg1Flet.getText().compareTo("")!=0)
            jTCarg1Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg1FletFocusLost

    
    /*Cuando se pierde el foco del teclado en el campo del cargo 2 del flete*/
    private void jTCarg2FletFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2FletFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg2Flet.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg2Flet.getText().compareTo("")!=0)
            jTCarg2Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg2FletFocusLost

    
    /*Cuando se pierde el foco del teclado en el campo del abono 1 de fletes*/
    private void jTAbon1FletFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1FletFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon1Flet.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon1Flet.getText().compareTo("")!=0)
            jTAbon1Flet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAbon1FletFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo 1 del flete*/
    private void jTCarg1FletKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg1FletKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg1FletKeyPressed

    
    /*Cuando se presiona una tecla en el campo del cargo 2 de fletes*/
    private void jTCarg2FletKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg2FletKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg2FletKeyPressed

    
    /*Cuando se presiona una tecla en el campo del abono 1 de fletes*/
    private void jTAbon1FletKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon1FletKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon1FletKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo de la retencion del IVA*/
    private void jTRetIVAFletFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetIVAFletFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRetIVAFlet.setSelectionStart(0);jTRetIVAFlet.setSelectionEnd(jTRetIVAFlet.getText().length());
        
    }//GEN-LAST:event_jTRetIVAFletFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la retención del IVA*/
    private void jTRetIVAFletFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetIVAFletFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRetIVAFlet.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRetIVAFlet.getText().compareTo("")!=0)
            jTRetIVAFlet.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRetIVAFletFocusLost

    
    /*Cuando se presiona una tecla en el campo de la retención del IVA*/
    private void jTRetIVAFletKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRetIVAFletKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRetIVAFletKeyPressed

    
    /*Cuando se tipea una tecla en el campo de retención de IVA*/
    private void jTRetIVAFletKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRetIVAFletKeyTyped
        
        /*Comprueba que el carácter este en los límites permitidos para numeración*/
        if(((evt.getKeyChar() < '0') || (evt.getKeyChar() > '9')) && (evt.getKeyChar() != '\b') && (evt.getKeyChar() != '.')) 
            evt.consume();
        
    }//GEN-LAST:event_jTRetIVAFletKeyTyped

    
    /*Cuando se gana el foco del teclado en el campo de la retención del ISR*/
    private void jTRetISRFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetISRFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRetISR.setSelectionStart(0);jTRetISR.setSelectionEnd(jTRetISR.getText().length());
        
    }//GEN-LAST:event_jTRetISRFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la retención del ISR*/
    private void jTRetISRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetISRFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRetISR.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRetISR.getText().compareTo("")!=0)
            jTRetISR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRetISRFocusLost

    
    /*Cuando se presiona una tecla en el campo de la retención del ISR*/
    private void jTRetISRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRetISRKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRetISRKeyPressed

    
    /*Cuando se tipea una tecla en el campo de la retención del ISR*/
    private void jTRetISRKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRetISRKeyTyped
        
        /*Comprueba que el carácter este en los límites permitidos para numeración*/
        if(((evt.getKeyChar() < '0') || (evt.getKeyChar() > '9')) && (evt.getKeyChar() != '\b') && (evt.getKeyChar() != '.')) 
            evt.consume();
        
    }//GEN-LAST:event_jTRetISRKeyTyped

    
    /*Cuando se gana el foco del teclado en el campo del cargo de arrendamiento 1*/
    private void jTCarg1ArrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1ArrFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg1Arr.setSelectionStart(0);jTCarg1Arr.setSelectionEnd(jTCarg1Arr.getText().length());
        
    }//GEN-LAST:event_jTCarg1ArrFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo arrendamiento 1*/
    private void jTCarg1ArrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1ArrFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg1Arr.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg1Arr.getText().compareTo("")!=0)
            jTCarg1Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg1ArrFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo del arrendaminto 1*/
    private void jTCarg1ArrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg1ArrKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg1ArrKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo de arrendamiento 2*/
    private void jTCarg2ArrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2ArrFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg2Arr.setSelectionStart(0);jTCarg2Arr.setSelectionEnd(jTCarg2Arr.getText().length());
        
    }//GEN-LAST:event_jTCarg2ArrFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo arrendamiento 2*/
    private void jTCarg2ArrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2ArrFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg2Arr.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg2Arr.getText().compareTo("")!=0)
            jTCarg2Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg2ArrFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo del arrendaminto 2*/
    private void jTCarg2ArrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg2ArrKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg2ArrKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del abono del arrendaminto 1*/
    private void jTAbon1ArrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1ArrFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon1Arr.setSelectionStart(0);jTAbon1Arr.setSelectionEnd(jTAbon1Arr.getText().length());
        
    }//GEN-LAST:event_jTAbon1ArrFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del abono arrendamiento 1*/
    private void jTAbon1ArrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1ArrFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon1Arr.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon1Arr.getText().compareTo("")!=0)
            jTAbon1Arr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAbon1ArrFocusLost

    
    /*Cuando se presiona una tecla en el campo del abono del arrendamiento 1*/
    private void jTAbon1ArrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon1ArrKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon1ArrKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo de la compra de mercancia 1*/
    private void jTCarg1MercFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1MercFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg1Merc.setSelectionStart(0);jTCarg1Merc.setSelectionEnd(jTCarg1Merc.getText().length());
        
    }//GEN-LAST:event_jTCarg1MercFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo de la mercancia 1*/
    private void jTCarg1MercFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1MercFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg1Merc.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg1Merc.getText().compareTo("")!=0)
            jTCarg1Merc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg1MercFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de la mercancia 1*/
    private void jTCarg1MercKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg1MercKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg1MercKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo de la compra de mercancia 2*/
    private void jTCarg2MercFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2MercFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg2Merc.setSelectionStart(0);jTCarg2Merc.setSelectionEnd(jTCarg2Merc.getText().length());
        
    }//GEN-LAST:event_jTCarg2MercFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo de la mercancia 2*/
    private void jTCarg2MercFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2MercFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg2Merc.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg2Merc.getText().compareTo("")!=0)
            jTCarg2Merc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg2MercFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de la mercancia 2*/
    private void jTCarg2MercKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg2MercKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg2MercKeyPressed

                
    /*Cuando se gana el foco del teclado en el campo del cargo de la compra de servicio 2*/
    private void jTCarg2GastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2GastFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg2Gast.setSelectionStart(0);jTCarg2Gast.setSelectionEnd(jTCarg2Gast.getText().length());
        
    }//GEN-LAST:event_jTCarg2GastFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del carogo del servicio 2*/
    private void jTCarg2GastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2GastFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg2Gast.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg2Gast.getText().compareTo("")!=0)
            jTCarg2Gast.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg2GastFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo del servicio 2*/
    private void jTCarg2GastKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg2GastKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg2GastKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo 1 de los honorarios*/
    private void jTCarg1HonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1HonFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg1Hon.setSelectionStart(0);jTCarg1Hon.setSelectionEnd(jTCarg1Hon.getText().length());
        
    }//GEN-LAST:event_jTCarg1HonFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo 1 de los honorarios*/
    private void jTCarg1HonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1HonFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg1Hon.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg1Hon.getText().compareTo("")!=0)
            jTCarg1Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg1HonFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de honorarios 1*/
    private void jTCarg1HonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg1HonKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg1HonKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo 2 de los honorarios*/
    private void jTCarg2HonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2HonFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg2Hon.setSelectionStart(0);jTCarg2Hon.setSelectionEnd(jTCarg2Hon.getText().length());
        
    }//GEN-LAST:event_jTCarg2HonFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo 2 de honorarios*/
    private void jTCarg2HonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg2HonFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg2Hon.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg2Hon.getText().compareTo("")!=0)
            jTCarg2Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg2HonFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de los honorarios 2*/
    private void jTCarg2HonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg2HonKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg2HonKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del abono de los honorarios*/
    private void jTAbon1HonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1HonFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon1Hon.setSelectionStart(0);jTAbon1Hon.setSelectionEnd(jTAbon1Hon.getText().length());
        
    }//GEN-LAST:event_jTAbon1HonFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del abono de honorarios*/
    private void jTAbon1HonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1HonFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon1Hon.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon1Hon.getText().compareTo("")!=0)
            jTAbon1Hon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAbon1HonFocusLost

    
    /*Cuando se presiona una tecla en el campo de abono de honorarios*/
    private void jTAbon1HonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon1HonKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon1HonKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo de la compra venta*/
    private void jTCargCVFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCargCVFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCargCV.setSelectionStart(0);jTCargCV.setSelectionEnd(jTCargCV.getText().length());
        
    }//GEN-LAST:event_jTCargCVFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo de la compra venta*/
    private void jTCargCVFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCargCVFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCargCV.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCargCV.getText().compareTo("")!=0)
            jTCargCV.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCargCVFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de la compra venta*/
    private void jTCargCVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCargCVKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCargCVKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo 1 de ventas*/
    private void jTCarg1VtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1VtaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCarg1Vta.setSelectionStart(0);jTCarg1Vta.setSelectionEnd(jTCarg1Vta.getText().length());
        
    }//GEN-LAST:event_jTCarg1VtaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cargo 1 de venta*/
    private void jTCarg1VtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCarg1VtaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCarg1Vta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCarg1Vta.getText().compareTo("")!=0)
            jTCarg1Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCarg1VtaFocusLost

    
    /*Cuando se presiona una tecla en el campo de cargo de venta 1*/
    private void jTCarg1VtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCarg1VtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCarg1VtaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del abono 1 de ventas*/
    private void jTAbon1VtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1VtaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon1Vta.setSelectionStart(0);jTAbon1Vta.setSelectionEnd(jTAbon1Vta.getText().length());
        
    }//GEN-LAST:event_jTAbon1VtaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del abono 1 de ventas*/
    private void jTAbon1VtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon1VtaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon1Vta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon1Vta.getText().compareTo("")!=0)
            jTAbon1Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAbon1VtaFocusLost

    
    /*Cuando se presiona una tecla en el campo de abono 1 de ventas*/
    private void jTAbon1VtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon1VtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon1VtaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del abono 2*/
    private void jTAbon2VtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon2VtaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon2Vta.setSelectionStart(0);jTAbon2Vta.setSelectionEnd(jTAbon2Vta.getText().length());
        
    }//GEN-LAST:event_jTAbon2VtaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del abono 2*/
    private void jTAbon2VtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon2VtaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon2Vta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon2Vta.getText().compareTo("")!=0)
            jTAbon2Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));        
        
    }//GEN-LAST:event_jTAbon2VtaFocusLost

    
    /*Cuando se presiona una tecla en el campo de abono 2 de ventas*/
    private void jTAbon2VtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon2VtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon2VtaKeyPressed

    
    /*Cuando se gana el foco del teclado en en campo del abono 3 de ventas*/
    private void jTAbon3VtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon3VtaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTAbon3Vta.setSelectionStart(0);jTAbon3Vta.setSelectionEnd(jTAbon3Vta.getText().length());
        
    }//GEN-LAST:event_jTAbon3VtaFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del abono 3 de vetas*/
    private void jTAbon3VtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTAbon3VtaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTAbon3Vta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTAbon3Vta.getText().compareTo("")!=0)
            jTAbon3Vta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTAbon3VtaFocusLost

    
    /*Cuando se presiona una tecla en el campo de abono 3 de ventas*/
    private void jTAbon3VtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAbon3VtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTAbon3VtaKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del banco*/
    private void jTBancFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBancFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTBanc.setSelectionStart(0);jTBanc.setSelectionEnd(jTBanc.getText().length());
        
    }//GEN-LAST:event_jTBancFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del banco*/
    private void jTBancFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTBancFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTBanc.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTBanc.getText().compareTo("")!=0)
            jTBanc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTBancFocusLost

    
    /*Cuando se presiona una tecla en el campo del banco*/
    private void jTBancKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTBancKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTBancKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la garantía*/
    private void jTGaranFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTGaranFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTGaran.setSelectionStart(0);jTGaran.setSelectionEnd(jTGaran.getText().length());
        
    }//GEN-LAST:event_jTGaranFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la garantía*/
    private void jTGaranFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTGaranFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTGaran.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTGaran.getText().compareTo("")!=0)
            jTGaran.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTGaranFocusLost

    
    /*Cuando se presiona una tecla en el campo de la garantía*/
    private void jTGaranKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTGaranKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTGaranKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del iva pendiente por pagar*/
    private void jTIvaPendPagFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIvaPendPagFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTIvaPendPag.setSelectionStart(0);jTIvaPendPag.setSelectionEnd(jTIvaPendPag.getText().length());
        
    }//GEN-LAST:event_jTIvaPendPagFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del iva pendiente por pagar*/
    private void jTIvaPendPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIvaPendPagFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTIvaPendPag.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTIvaPendPag.getText().compareTo("")!=0)
            jTIvaPendPag.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTIvaPendPagFocusLost

    
    /*Cuando se presiona una tecla en el campo del iva pendiente por pagar*/
    private void jTIvaPendPagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIvaPendPagKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTIvaPendPagKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del iva por pagar*/
    private void jTIvaXPagFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIvaXPagFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTIvaXPag.setSelectionStart(0);jTIvaXPag.setSelectionEnd(jTIvaXPag.getText().length());
        
    }//GEN-LAST:event_jTIvaXPagFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del iva pendiente por pagar*/
    private void jTIvaXPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIvaXPagFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTIvaXPag.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTIvaXPag.getText().compareTo("")!=0)
            jTIvaXPag.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTIvaXPagFocusLost

    
    /*Cuando se presiona una tecla en el campo del iva por pagar*/
    private void jTIvaXPagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIvaXPagKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTIvaXPagKeyPressed

    
    /*Cuando el mouse entra en el botón de factura*/
    private void jBFacMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBFacMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBFac.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBFacMouseEntered

    
    /*Cuando el mouse sale del botón de factura*/
    private void jBFacMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBFacMouseExited
       
        /*Cambia el color del fondo del botón*/
        jBFac.setBackground(colOri);
        
    }//GEN-LAST:event_jBFacMouseExited

    
    /*Cuando se presiona el botón de factura*/
    private void jBFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFacActionPerformed
        
        /*Válida los campos de conexión de la base de datos de contabilidad*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
        
        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para mandar las ventas*/
        VtasCont d = new VtasCont(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta);
        d.setVisible(true);        
        
    }//GEN-LAST:event_jBFacActionPerformed

    
    /*Cuando se presiona una tecla en el botón de facturas*/
    private void jBFacKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBFacKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBFacKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cargo 1 de la nota de crédito*/
    private void jTDevSobVtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTDevSobVtaFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTDevSobVta.setSelectionStart(0);jTDevSobVta.setSelectionEnd(jTDevSobVta.getText().length());
        
    }//GEN-LAST:event_jTDevSobVtaFocusGained

    
    /*Cuando se pierde el foco del teclado en el camo del cargo 1 de la nota de crédito*/
    private void jTDevSobVtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTDevSobVtaFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTDevSobVta.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTDevSobVta.getText().compareTo("")!=0)
            jTDevSobVta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTDevSobVtaFocusLost

    
    /*Cuando se presiona una tecla en el campo del cargo de la nota de crédito 1*/
    private void jTDevSobVtaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTDevSobVtaKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTDevSobVtaKeyPressed

    
    /*Cuando el mouse entra en el botón de compras*/
    private void jBCompMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCompMouseEntered
 
        /*Cambia el color del fondo del botón*/
        jBComp.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCompMouseEntered

    
    /*Cuando el mouse sale del botón de compras*/
    private void jBCompMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCompMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBComp.setBackground(colOri);
        
    }//GEN-LAST:event_jBCompMouseExited

    
    /*Cuando se presiona el botón de compras*/
    private void jBCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCompActionPerformed
        
        /*Válida los campos de conexión de la base de datos de contabilidad*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
        
        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para mandar las compras*/
        CompCont d = new CompCont(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta);
        d.setVisible(true);        
        
    }//GEN-LAST:event_jBCompActionPerformed

    
    /*Cuando se presiona una tecla en el botón de compras*/
    private void jBCompKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCompKeyPressed
 
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCompKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del iva pendiente por acreditar*/
    private void jTIVAPendAcFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIVAPendAcFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTIVAPendAc.setSelectionStart(0);jTIVAPendAc.setSelectionEnd(jTIVAPendAc.getText().length());
        
    }//GEN-LAST:event_jTIVAPendAcFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del iva pendiente por acreditar*/
    private void jTIVAPendAcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIVAPendAcFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTIVAPendAc.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTIVAPendAc.getText().compareTo("")!=0)
            jTIVAPendAc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTIVAPendAcFocusLost

    
    /*Cuando se presiona una tecla en el campo del iva pendiente por acreditar*/
    private void jTIVAPendAcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIVAPendAcKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTIVAPendAcKeyPressed

    
    /*Cuando se presiona una tecla en el botón de visor de pólizas*/
    private void jBVisPolKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBVisPolKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBVisPolKeyPressed

    
    /*Cuando el mouse entra en el botón de visor de pólizas*/
    private void jBVisPolMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVisPolMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBVisPol.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBVisPolMouseEntered

    
    /*Cuando el mouse sale del botón de visor de polizas*/
    private void jBVisPolMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBVisPolMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBVisPol.setBackground(colOri);
        
    }//GEN-LAST:event_jBVisPolMouseExited

    
    /*Cuando se presiona el botón de visor de pólizas*/
    private void jBVisPolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVisPolActionPerformed
        
        /*Válida los campos de conexión*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }

        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para ver las cuentas*/
        cats.VerPolCont v = new cats.VerPolCont(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta);
        v.setVisible(true);
        
    }//GEN-LAST:event_jBVisPolActionPerformed

    
    /*Cuando se gana el foco del teclado en el campo de la retención del iva de honorarios*/
    private void jTRetHonoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetHonoFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRetHono.setSelectionStart(0);jTRetHono.setSelectionEnd(jTRetHono.getText().length());
        
    }//GEN-LAST:event_jTRetHonoFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la retención del iva de honorarios*/
    private void jTRetHonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRetHonoFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRetHono.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRetHono.getText().compareTo("")!=0)
            jTRetHono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));

        /*Si es caena vacia entonces que sea 0*/
        if(jTRetHono.getText().compareTo("")==0)
            jTRetHono.setText("0");            
            
    }//GEN-LAST:event_jTRetHonoFocusLost

    
    /*Cuando se presiona una tecla en el campo de la retención del iva de los honorarios*/
    private void jTRetHonoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRetHonoKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRetHonoKeyPressed

    
    /*Cuando el mouse entra en el botón de búscar archivo de correos de clientes*/
    private void jBCliCloMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCliCloMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBCliClo.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBCliCloMouseEntered

    
    /*Cuando el mouse sale del botón de búscar archivo de correos de clientes*/
    private void jBCliCloMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCliCloMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBCliClo.setBackground(colOri);
        
    }//GEN-LAST:event_jBCliCloMouseExited

    
    /*Cuando se presiona el botón de búscar archivo de correos*/
    private void jBCliCloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCliCloActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Correos de Clientes");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clientes", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
                
        /*Coloca la ruta completa en el control del cliente*/
        jTCliCo.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCliCo.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCliCloActionPerformed

    
    /*Cuando se presiona una tecla el botón de búscar archivo de correos de clientes*/
    private void jBCliCloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCliCloKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCliCloKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del cliente 6*/
    private void jTCliCoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCliCoFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCliCo.setSelectionStart(0);jTCliCo.setSelectionEnd(jTCliCo.getText().length());
        
    }//GEN-LAST:event_jTCliCoFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del cliete 6*/
    private void jTCliCoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCliCoFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCliCo.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCliCo.getText().compareTo("")!=0)
            jTCliCo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCliCoFocusLost

    
    /*Cuando se presiona una tecla en el campo del cliente 6*/
    private void jTCliCoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCliCoKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCliCoKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar correos de clientes*/
    private void jCSinCliCoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCliCoKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCliCoKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del iva acreditable*/
    private void jTIVAAcredFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIVAAcredFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTIVAAcred.setSelectionStart(0);jTIVAAcred.setSelectionEnd(jTIVAAcred.getText().length());
        
    }//GEN-LAST:event_jTIVAAcredFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del iva acreditable*/
    private void jTIVAAcredFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIVAAcredFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTIVAAcred.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTIVAAcred.getText().compareTo("")!=0)
            jTIVAAcred.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTIVAAcredFocusLost

    
    /*Cuando se presiona una tecla en el campo del iva acreditable*/
    private void jTIVAAcredKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIVAAcredKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTIVAAcredKeyPressed

    
    /*Cuando el mouse entra en el botón de kardex*/
    private void jBKardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBKardMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBKard.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBKardMouseEntered

    
    /*Cuando el mouse sale del botón de kardex*/
    private void jBKardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBKardMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBKard.setBackground(colOri);
        
    }//GEN-LAST:event_jBKardMouseExited

    
    /*Cuando se presiona el botón de búscar archivo de kardex*/
    private void jBKardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKardActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Kardex");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Kardex", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTKard.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTKard.setCaretPosition(0);
        
    }//GEN-LAST:event_jBKardActionPerformed

    
    /*Cuando se presiona una tecla en el botón de kardex*/
    private void jBKardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBKardKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBKardKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del kardex*/
    private void jTKardFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTKardFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTKard.setSelectionStart(0);jTKard.setSelectionEnd(jTKard.getText().length());
        
    }//GEN-LAST:event_jTKardFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del kardex*/
    private void jTKardFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTKardFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTKard.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTKard.getText().compareTo("")!=0)
            jTKard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTKardFocusLost

    
    /*Cuando se presiona una tecla en el campo del kardex*/
    private void jTKardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTKardKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTKardKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar kardex*/
    private void jCSinKardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinKardKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinKardKeyPressed

    
    /*Cuando el mouse entra en el botón de existencias series*/
    private void jBSer1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSer1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBSer1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBSer1MouseEntered

    
    /*Cuando el mouse sale del botón de existencias series*/
    private void jBSer1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSer1MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBSer1.setBackground(colOri);
        
    }//GEN-LAST:event_jBSer1MouseExited

    
    /*Cuando se presiona el botón de existencias series*/
    private void jBSer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSer1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Series 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Series", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTSer1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTSer1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBSer1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de existencias series*/
    private void jBSer1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBSer1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBSer1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de serie*/
    private void jTSer1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTSer1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTSer1.setSelectionStart(0);jTSer1.setSelectionEnd(jTSer1.getText().length());
        
    }//GEN-LAST:event_jTSer1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de serie*/
    private void jTSer1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTSer1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTSer1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTSer1.getText().compareTo("")!=0)
            jTSer1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTSer1FocusLost

    
    /*Cuando se presiona una tecla en el campo de existencias de series*/
    private void jTSer1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTSer1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTSer1KeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar existencias de series*/
    private void jCSinSerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinSerKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinSerKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remisión uso interno 1*/
    private void jTRInte1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRInte1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRInte1.setSelectionStart(0);jTRInte1.setSelectionEnd(jTRInte1.getText().length());
        
    }//GEN-LAST:event_jTRInte1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de remisión interna 1*/
    private void jTRInte1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRInte1FocusLost

        /*Coloca el caret en la posiciòn 0*/
        jTRInte1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRInte1.getText().compareTo("")!=0)
            jTRInte1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));                
        
    }//GEN-LAST:event_jTRInte1FocusLost

    
    /*Cuando se presiona una tecla en el campo de la remisión interna 1*/
    private void jTRInte1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRInte1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRInte1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remisión uso interno 2*/
    private void jTRInte2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRInte2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRInte2.setSelectionStart(0);jTRInte2.setSelectionEnd(jTRInte2.getText().length());
        
    }//GEN-LAST:event_jTRInte2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de remisión interna 2*/
    private void jTRInte2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRInte2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRInte2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRInte2.getText().compareTo("")!=0)
            jTRInte2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));                
        
    }//GEN-LAST:event_jTRInte2FocusLost

    
    /*Cuando se presiona una tecla en el campo de la remisión interna 2*/
    private void jTRInte2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRInte2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRInte2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remanufactura rentas 1*/
    private void jTRRent1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRRent1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRRent1.setSelectionStart(0);jTRRent1.setSelectionEnd(jTRRent1.getText().length());
        
    }//GEN-LAST:event_jTRRent1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de remanufactura renta 1*/
    private void jTRRent1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRRent1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRRent1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRRent1.getText().compareTo("")!=0)
            jTRRent1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));                
        
    }//GEN-LAST:event_jTRRent1FocusLost

    
    /*Cuando se presiona una tecla en el campo de remanufactura de renta 1*/
    private void jTRRent1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRRent1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRRent1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remanufactura rentas 2*/
    private void jTRRent2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRRent2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRRent2.setSelectionStart(0);jTRRent2.setSelectionEnd(jTRRent2.getText().length());
        
    }//GEN-LAST:event_jTRRent2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de remanufactura renta 2*/
    private void jTRRent2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRRent2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRRent2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRRent2.getText().compareTo("")!=0)
            jTRRent2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));                
        
    }//GEN-LAST:event_jTRRent2FocusLost

    
    /*Cuando se presiona una tecla en el campo de remanufactura de renta 2*/
    private void jTRRent2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRRent2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRRent2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remanufactura de venta 1*/
    private void jTRVta1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRVta1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRVta1.setSelectionStart(0);jTRVta1.setSelectionEnd(jTRVta1.getText().length());
        
    }//GEN-LAST:event_jTRVta1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remanufactura 1*/
    private void jTRVta1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRVta1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRVta1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRVta1.getText().compareTo("")!=0)
            jTRVta1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRVta1FocusLost

    
    /*Cuando se presiona una tecla en el campo de la remanufactura de venta 1*/
    private void jTRVta1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRVta1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRVta1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de remanufactura de venta 2*/
    private void jTRVta2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRVta2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTRVta2.setSelectionStart(0);jTRVta2.setSelectionEnd(jTRVta2.getText().length());
        
    }//GEN-LAST:event_jTRVta2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remanufactura 2*/
    private void jTRVta2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRVta2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTRVta2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTRVta2.getText().compareTo("")!=0)
            jTRVta2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTRVta2FocusLost

    
    /*Cuando se presiona una tecla en el campo de la remanufactura de venta 2*/
    private void jTRVta2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRVta2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTRVta2KeyPressed

    
    /*Cuando el mouse entra en el botón de remisión 1*/
    private void jBRem1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem1MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBRem1.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBRem1MouseEntered

    
    /*Cuando el mouse sale del botón de remisión 1*/
    private void jBRem1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem1MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBRem1.setBackground(colOri);
        
    }//GEN-LAST:event_jBRem1MouseExited

    
    /*Cuando se presiona el botón de remisión 1*/
    private void jBRem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRem1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Remisión 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTR1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTR1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBRem1ActionPerformed


    /*Cuando se presiona una tecla en el botón de la remisión 1*/    
    private void jBRem1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBRem1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBRem1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la remisión 1*/
    private void jTR1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTR1.setSelectionStart(0);jTR1.setSelectionEnd(jTR1.getText().length());
        
    }//GEN-LAST:event_jTR1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remisión 1*/
    private void jTR1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTR1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTR1.getText().compareTo("")!=0)
            jTR1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTR1FocusLost

    
    /*Cuando se presiona una tecla en el campo de remisión 1*/ 
    private void jTR1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTR1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTR1KeyPressed

    
    /*Cuando se presiona una tecla en el checkbox de sincronizar remisiones*/
    private void jCSinRemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinRemKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinRemKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la remisión 2*/
    private void jTR2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTR2.setSelectionStart(0);jTR2.setSelectionEnd(jTR2.getText().length());
        
    }//GEN-LAST:event_jTR2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remisión 2*/
    private void jTR2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTR2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTR2.getText().compareTo("")!=0)
            jTR2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTR2FocusLost

    
    /*Cuando se presiona una tecla en el campo de remisión 2*/ 
    private void jTR2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTR2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTR2KeyPressed

    
    /*Cuando el mouse entra en el botón de remisión 2*/
    private void jBRem2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBRem2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBRem2MouseEntered

    
    /*Cuando el mouse sale del botón de remisión 2*/
    private void jBRem2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem2MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBRem2.setBackground(colOri);
        
    }//GEN-LAST:event_jBRem2MouseExited

    
    /*Cuando se presiona el botón de remisión 2*/
    private void jBRem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRem2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Remisión 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTR2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTR2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBRem2ActionPerformed


    /*Cuando se presiona una tecla en el botón de remisión 2*/ 
    private void jBRem2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBRem2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBRem2KeyPressed

    
    /*Cuando el mouse entra en el botón de remisión 3*/
    private void jBRem3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem3MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBRem3.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBRem3MouseEntered

    
    /*Cuando el mouse sale del botón de remisión 3*/
    private void jBRem3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem3MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBRem3.setBackground(colOri);
        
    }//GEN-LAST:event_jBRem3MouseExited


    /*Cuando se presiona el botón de remisión 3*/    
    private void jBRem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRem3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Remisión 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTR3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTR3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBRem3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de remisión 3*/ 
    private void jBRem3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBRem3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBRem3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la remisión 3*/
    private void jTR3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR3FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTR3.setSelectionStart(0);jTR3.setSelectionEnd(jTR3.getText().length());
        
    }//GEN-LAST:event_jTR3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remisión 3*/
    private void jTR3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTR3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTR3.getText().compareTo("")!=0)
            jTR3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTR3FocusLost

    
    /*Cuando se presiona una tecla en el campo de remisión 3*/ 
    private void jTR3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTR3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTR3KeyPressed

    
    /*Cuando el mouse entra en el botón de remisión 4*/
    private void jBRem4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem4MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBRem4.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBRem4MouseEntered

    
    /*Cuando el mouse sale del botón de remisión 4*/
    private void jBRem4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem4MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBRem4.setBackground(colOri);
        
    }//GEN-LAST:event_jBRem4MouseExited

    
    /*Cuado se presiona el botón de remisión 4*/
    private void jBRem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRem4ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Remisión 4");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTR4.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTR4.setCaretPosition(0);
        
    }//GEN-LAST:event_jBRem4ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de remisión 4*/ 
    private void jBRem4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBRem4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBRem4KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la remisión 4*/
    private void jTR4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR4FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTR4.setSelectionStart(0);jTR4.setSelectionEnd(jTR4.getText().length());
        
    }//GEN-LAST:event_jTR4FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remisión 4*/
    private void jTR4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR4FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTR4.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTR4.getText().compareTo("")!=0)
            jTR4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTR4FocusLost

    
    /*Cuando se presiona una tecla en el campo de remisión 4*/ 
    private void jTR4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTR4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTR4KeyPressed

    
    /*Cuando el mouse entra en el botón de remisión 5*/
    private void jBRem5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem5MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBRem5.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBRem5MouseEntered

    
    /*Cuando el mouse sale del botón de remisión 5*/
    private void jBRem5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBRem5MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBRem5.setBackground(colOri);
        
    }//GEN-LAST:event_jBRem5MouseExited

    
    /*Cuando se presiona el botón de remisión 5*/
    private void jBRem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRem5ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Remisión 5");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Remisiones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTR5.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTR5.setCaretPosition(0);
        
    }//GEN-LAST:event_jBRem5ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de remisión 5*/ 
    private void jBRem5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBRem5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBRem5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la remisión 5*/
    private void jTR5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR5FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTR5.setSelectionStart(0);jTR5.setSelectionEnd(jTR5.getText().length());
        
    }//GEN-LAST:event_jTR5FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la remisión 5*/
    private void jTR5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTR5FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTR5.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTR5.getText().compareTo("")!=0)
            jTR5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTR5FocusLost

    
    /*Cuando se presiona una tecla en el campo de remisión 5*/ 
    private void jTR5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTR5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTR5KeyPressed

    
    /*Cuando el mouse entra en el botón de series 2*/
    private void jBSer2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSer2MouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBSer2.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBSer2MouseEntered

    
    /*Cuando el mouse sale del botón de series 2*/
    private void jBSer2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSer2MouseExited
        
        /*Cambia el color del fondo del botón*/
        jBSer2.setBackground(colOri);
        
    }//GEN-LAST:event_jBSer2MouseExited

    
    /*Cuando se presiona el botón de series 2*/
    private void jBSer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSer2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar Series 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es texto plano entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".txt"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo de texto plano.", "Series", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTSer2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTSer2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBSer2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de series 2*/
    private void jBSer2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBSer2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
                
    }//GEN-LAST:event_jBSer2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de serie 2*/
    private void jTSer2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTSer2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTSer2.setSelectionStart(0);jTSer2.setSelectionEnd(jTSer2.getText().length());
        
    }//GEN-LAST:event_jTSer2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de series 2*/
    private void jTSer2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTSer2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTSer2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTSer2.getText().compareTo("")!=0)
            jTSer2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTSer2FocusLost

    
    /*Cuando se presiona una tecla en el campo de series 2*/
    private void jTSer2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTSer2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTSer2KeyPressed

    
    /*Cuando se presiona una tecla en el una tecla en el botón de activos fijos*/
    private void jBActFijKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBActFijKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBActFijKeyPressed

    
    /*Cuando el mouse entra en el boton de activo fijo*/
    private void jBActFijMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBActFijMouseEntered

        /*Cambia el color del fondo del botón*/
        jBActFij.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBActFijMouseEntered

    
    /*Cuando el mosue sale del botón de activo fijo*/
    private void jBActFijMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBActFijMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBActFij.setBackground(colOri);
        
    }//GEN-LAST:event_jBActFijMouseExited

    
    /*Cuando se presiona el botón de activo fijo*/
    private void jBActFijActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBActFijActionPerformed
        
        /*Válida los campos de conexión de la base de datos de contabilidad*/
        vValCampCon();
        if(bErr)
        {
            /*Resetea la bandera y regresa*/
            bErr    = false;
            return;
        }
        
        /*Si el campo de nombre de empresa esta vacio entonces*/
        if(jTNomConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El nombre de la empresa de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTNomConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTNomConta.grabFocus();
            return;
        }
        
        /*Si el campo de usuario de contabilidad esta vacio entonces*/
        if(jTUsrConta.getText().compareTo("")==0)
        {
            /*Mensjaea*/
            JOptionPane.showMessageDialog(null, "El usuario de contabilidad esta vacio.", "Contabilidad", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            
            /*Coloca el borde rojo*/                               
            jTUsrConta.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
            
            /*Coloca el foco del teclado en el control y regresa*/
            jTUsrConta.grabFocus();
            return;
        }
        
        /*Abre la base de datos de contabilidad para probar la conexión*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
            return;

        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Muestra la forma para mandar las compras*/
        InterActFij d = new InterActFij(jTUsr.getText().trim(), jTInst.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), jTNomConta.getText().trim(), jTUsrConta.getText().trim(), sContConta, jTPort.getText().trim());
        d.setVisible(true);        
        
    }//GEN-LAST:event_jBActFijActionPerformed

    
    /*Cuando el mouse entra en el botón de activo fijo*/
    private void jBActMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBActMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBAct.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBActMouseEntered

    
    /*Cuando el mouse sale del botón de activo fijo*/
    private void jBActMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBActMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBAct.setBackground(colOri);
        
    }//GEN-LAST:event_jBActMouseExited

    
    /*Cuando se presiona el botón de búscar archivo de activo fijo*/
    private void jBActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBActActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar activo fijo");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es xlsx entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".xls"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo .XLSX.", "Series", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTActFij.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTActFij.setCaretPosition(0);
        
    }//GEN-LAST:event_jBActActionPerformed

    
    /*Cuando se presiona una tecla en el botón del activo fijo*/
    private void jBActKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBActKeyPressed
 
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBActKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo del activo fijo*/
    private void jTActFijFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTActFijFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTActFij.setSelectionStart(0);jTActFij.setSelectionEnd(jTActFij.getText().length());
        
    }//GEN-LAST:event_jTActFijFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo del activo fijo*/
    private void jTActFijFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTActFijFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTActFij.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTActFij.getText().compareTo("")!=0)
            jTActFij.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTActFijFocusLost

    
    /*Cuando se presiona una tecla en el campo el activo fijo*/
    private void jTActFijKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTActFijKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTActFijKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar activo fijo*/
    private void jCSinActKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinActKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinActKeyPressed

    
    /*Cuando el mouse entra en el botón de clasificaciones*/
    private void jBClasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBClasMouseEntered
        
        /*Cambia el color del fondo del botón*/
        jBClas.setBackground(Star.colBot);
        
    }//GEN-LAST:event_jBClasMouseEntered

    
    /*Cuando el mouse sale del botón de clasificaciones*/
    private void jBClasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBClasMouseExited
        
        /*Cambia el color del fondo del botón*/
        jBClas.setBackground(colOri);
        
    }//GEN-LAST:event_jBClasMouseExited

    
    /*Cuando se presiona el botón de clasificaciones*/
    private void jBClasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBClasActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar clasificaciones");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Clasificaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control del cliente*/
        jTClas.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTClas.setCaretPosition(0);
        
    }//GEN-LAST:event_jBClasActionPerformed

    
    /*Cuando se presiona una tecla en el botón de clasificaciones*/
    private void jBClasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBClasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBClasKeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la clasificación*/
    private void jTClasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTClasFocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTClas.setSelectionStart(0);jTClas.setSelectionEnd(jTClas.getText().length());
        
    }//GEN-LAST:event_jTClasFocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la clasificación*/
    private void jTClasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTClasFocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTClas.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTClas.getText().compareTo("")!=0)
            jTClas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTClasFocusLost

    
    /*Cuando se presiona una tecla en el campo de la clasificación*/
    private void jTClasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTClasKeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTClasKeyPressed

    
    /*Cuando se presiona una tecla en el check de la sincronización de clasificaciones*/
    private void jCSinClasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinClasKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinClasKeyPressed

    
    /*Cuando se presiona una tecla en el check de sincronizar cotizaciones*/
    private void jCSinCotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSinCotKeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jCSinCotKeyPressed

    private void jBCot1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot1MouseEntered

    private void jBCot1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot1MouseExited

    
    /*Cuando se presiona el botón de cotizaciones 1*/
    private void jBCot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCot1ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar cotización 1");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCot1.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCot1.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCot1ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cotización*/
    private void jBCot1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCot1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCot1KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la cotización 1*/
    private void jTCot1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot1FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCot1.setSelectionStart(0);jTCot1.setSelectionEnd(jTCot1.getText().length());
        
    }//GEN-LAST:event_jTCot1FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la cotización 1*/
    private void jTCot1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot1FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCot1.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCot1.getText().compareTo("")!=0)
            jTCot1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCot1FocusLost

    
    /*Cuadno se presiona una tecla en el campo de la cotización 1*/
    private void jTCot1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCot1KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCot1KeyPressed

    private void jBCot2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot2MouseEntered

    private void jBCot2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot2MouseExited

    
    /*Cuando se presiona el botón de cotizaciones 2*/
    private void jBCot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCot2ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar cotización 2");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCot2.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCot2.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCot2ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cotización 2*/
    private void jBCot2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCot2KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCot2KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la cotización 2*/
    private void jTCot2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot2FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCot2.setSelectionStart(0);jTCot2.setSelectionEnd(jTCot2.getText().length());
        
    }//GEN-LAST:event_jTCot2FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de las cotizaciones 2*/
    private void jTCot2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot2FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCot2.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCot2.getText().compareTo("")!=0)
            jTCot2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCot2FocusLost

    
    /*Cuando se presiona una tecla en el campo de la cotización 2*/
    private void jTCot2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCot2KeyPressed
       
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCot2KeyPressed

    private void jBCot3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot3MouseEntered

    private void jBCot3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot3MouseExited

    
    /*Cuando se presiona el botón de cotizaciones 3*/
    private void jBCot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCot3ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar cotización 3");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCot3.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCot3.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCot3ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cotización 3*/
    private void jBCot3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCot3KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCot3KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la cotización 3*/
    private void jTCot3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot3FocusGained

        /*Selecciona todo el texto cuando gana el foco*/
        jTCot3.setSelectionStart(0);jTCot3.setSelectionEnd(jTCot3.getText().length());
        
    }//GEN-LAST:event_jTCot3FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la cotización 3*/
    private void jTCot3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot3FocusLost
        
        /*Coloca el caret en la posiciòn 0*/
        jTCot3.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCot3.getText().compareTo("")!=0)
            jTCot3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCot3FocusLost

    
    /*Cuando se presiona una tecla en el campo de la cotización 3*/
    private void jTCot3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCot3KeyPressed
 
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCot3KeyPressed

    private void jBCot4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot4MouseEntered

    private void jBCot4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot4MouseExited

    
    /*Cuando se presiona el botón de cotizaciones 4*/
    private void jBCot4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCot4ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar cotización 4");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCot4.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCot4.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCot4ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cotización 4*/
    private void jBCot4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCot4KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCot4KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la cotización*/
    private void jTCot4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot4FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCot4.setSelectionStart(0);jTCot4.setSelectionEnd(jTCot4.getText().length());
        
    }//GEN-LAST:event_jTCot4FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la cotización 4*/
    private void jTCot4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot4FocusLost
 
        /*Coloca el caret en la posiciòn 0*/
        jTCot4.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCot4.getText().compareTo("")!=0)
            jTCot4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCot4FocusLost

    
    /*Cuando se presiona una tecla en el campo de la cotización 4*/
    private void jTCot4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCot4KeyPressed
 
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCot4KeyPressed

    private void jBCot5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot5MouseEntered

    private void jBCot5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCot5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCot5MouseExited

    
    /*Cuando se presiona el botón de cotizaciones 5*/
    private void jBCot5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCot5ActionPerformed
        
        /*Configura el file chooser para escoger la ruta del directorio donde esta el archivo*/
        final JFileChooser fc   = new JFileChooser  ();
        fc.setDialogTitle                           ("Buscar cotización 5");
        fc.setAcceptAllFileFilterUsed               (false);

        /*Si el usuario presiono aceptar entonces*/        
        if(fc.showSaveDialog(this)!=JFileChooser.APPROVE_OPTION)
            return;
        
        /*Si el archivo no es PDF entonces*/
        if(!fc.getSelectedFile().getName().toLowerCase().endsWith(".pdf"))
        {
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo PDF.", "Cotizaciones", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;            
        }
        
        /*Coloca la ruta completa en el control*/
        jTCot5.setText(fc.getCurrentDirectory().getAbsolutePath() + "\\" + fc.getSelectedFile().getName());
        jTCot5.setCaretPosition(0);
        
    }//GEN-LAST:event_jBCot5ActionPerformed

    
    /*Cuando se presiona una tecla en el botón de cotización 5*/
    private void jBCot5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBCot5KeyPressed
        
        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jBCot5KeyPressed

    
    /*Cuando se gana el foco del teclado en el campo de la cotización 5*/
    private void jTCot5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot5FocusGained
        
        /*Selecciona todo el texto cuando gana el foco*/
        jTCot5.setSelectionStart(0);jTCot5.setSelectionEnd(jTCot5.getText().length());
        
    }//GEN-LAST:event_jTCot5FocusGained

    
    /*Cuando se pierde el foco del teclado en el campo de la cotización 5*/
    private void jTCot5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTCot5FocusLost
 
        /*Coloca el caret en la posiciòn 0*/
        jTCot5.setCaretPosition(0);
        
        /*Coloca el borde negro si tiene datos, caso contrario de rojo*/
        if(jTCot5.getText().compareTo("")!=0)
            jTCot5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204,204,255)));
        
    }//GEN-LAST:event_jTCot5FocusLost

    
    /*Cuando se presiona una tecla en el campo de la cotización 5*/
    private void jTCot5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCot5KeyPressed

        //Llama a la función escalable
        vKeyPreEsc(evt);
        
    }//GEN-LAST:event_jTCot5KeyPressed
    
                                      
    /*Procesa las cuentas*/
    private void vCtas()
    {
        /*Carga el documento de las cuentas de primer nivel del archivo*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCtas.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
                    
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            
        
        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("ctas1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
         
        /*Carga el documento de las cuentas de segundo nivel del archivo*/        
        try
        {
            p = PDDocument.load(new File(jTCtas2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
                    
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            
        
        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("ctas2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las cuentas de tercer nivel del archivo*/        
        try
        {
            p = PDDocument.load(new File(jTCtas3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
                    
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            
        
        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("ctas3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
                
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        /*Comprueba si existe la tabla temporal para cuentas*/
        boolean bExi    = true;
        try
        {
            sQ = "SELECT COUNT(*) AS coun FROM sys.tables WHERE name = 'tmpctas' AND type = 'U'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            if(rs.next())
            {
                /*Si el conteo es igual a 0 entonces no existe la tabla y coloca la bandera*/
                if(rs.getInt("coun")==0)
                    bExi    = false;
            }
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }
        
        /*Si la tabla no existe entonces*/
        if(!bExi)
        {
            /*Crea la tabla temporal*/
            try 
            {                
                sQ = "CREATE TABLE tmpctas (id INT PRIMARY KEY IDENTITY, codigo VARCHAR(30), nombre VARCHAR(MAX), tip VARCHAR(3), ctamayor INT, afectable BIT, ctapad VARCHAR(MAX) DEFAULT '', ctaefectivo BIT, export BIT)";                    
                st = con.createStatement();
                st.execute(sQ);
             }
             catch(SQLException | HeadlessException e) 
             { 
                /*Esconde la forma de loading*/
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos
                if(Star.iCierrBas(con)==-1)
                    return;

                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                return;
            }    
            
        }/*Fin de if(!bExi)*/                    
        
        /*Borra la tabla de cuentas temporal que no son las bases del sistema*/
        try 
        {                
            sQ = "DELETE FROM tmpctas";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }    
        
        /*Abre el archivo creado de las cuentas de primer nivel para leerlo*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("ctas1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }
        
        /*Recorre todo el archivo para insertar las cuentas de primer nivel en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {                
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;
                
                /*Separa la línea por tubería y recorre los resultados*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Obtiene la cuenta*/
                String sCta    = stk.nextToken().trim();
                
                /*Determina la naturaleza de la cuenta*/
                String sNatu;
                if(Integer.parseInt(sCta)>=Integer.parseInt(jTCtaAct.getText().substring(0, 4)) && Integer.parseInt(sCta)<Integer.parseInt(jTCtaPas.getText().substring(0, 4)))
                    sNatu    = "A";
                else if(Integer.parseInt(sCta)>=Integer.parseInt(jTCtaPas.getText().substring(0, 4)) && Integer.parseInt(sCta)<Integer.parseInt(jTCtaCapi.getText().substring(0, 4)))
                    sNatu    = "P";
                else
                    sNatu    = "C";                              
                
                /*Obtiene el nombre de la cuenta*/
                String sNom     = stk.nextToken().trim();                
                
                /*Determina el tipo de cuenta que es*/
                String sTip = "1";
                if(sNom.toLowerCase().replace(" ", "").contains("activo"))
                    sTip    = "3";
                else if(sNom.toLowerCase().replace(" ", "").contains("pasivo"))
                    sTip    = "3";
                else if(sNom.toLowerCase().replace(" ", "").contains("capital"))
                    sTip    = "3";
                
                /*Determina si es la cuenta de efectivo*/
                String sEfe = "0";
                if(sNom.toLowerCase().replace(" ", "").contains("bancos"))
                    sEfe    = "1";
                
                /*Completa la cuenta con los 0 faltantes*/
                sCta    += "00000000";
                      
                /*Si el nombre es mayor a 50 entonces recortalo*/
                if(sNom.length()>=49)
                    sNom    = sNom.substring(0, 49);
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cuenta: " + sCta);
                
                /*Inserta la cuenta de primer nivel*/
                try 
                {                
                    sQ = "INSERT INTO tmpctas(codigo,           nombre,                                tip,                 ctamayor,      afectable,    export,     ctapad,                ctaefectivo) "
                                + "VALUES('" +sCta + "',  '" + sNom.replace("'", "''") + "',    '" +  sNatu + "',    " +   sTip + ",      0,            0,          '',                " + sEfe + ")";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las cuentas de segundo nivel para leerlo*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("ctas2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }
                
        /*Recorre todo el archivo para insertar las cuentas de segundo nivel en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;
                
                /*Separa la línea por tubería y recorre los resultados*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Separa el primer segmento en espacios*/
                java.util.StringTokenizer stkInt = new java.util.StringTokenizer(stk.nextToken(), " ");
                
                /*Obtiene el primer segmento de la cuenta*/                
                String sCta1    = stkInt.nextToken();
                                
                /*Si no tiene mas tolens entonces continua*/
                if(!stkInt.hasMoreTokens())
                    continue;
                
                /*Obtiene el segundo segmento de la cuenta*/
                String sCta2    = stkInt.nextToken();
                
                /*Determina la naturaleza de la cuenta*/
                String sNatu;
                if(Integer.parseInt(sCta1)>Integer.parseInt(jTCtaAct.getText().substring(0, 4)) && Integer.parseInt(sCta1)<Integer.parseInt(jTCtaPas.getText().substring(0, 4)))
                    sNatu    = "A";
                else if(Integer.parseInt(sCta1)>Integer.parseInt(jTCtaPas.getText().substring(0, 4)) && Integer.parseInt(sCta1)<Integer.parseInt(jTCtaCapi.getText().substring(0, 4)))
                    sNatu    = "P";
                else
                    sNatu    = "C";                              
                
                /*Obtiene todo el nombre de la cuenta*/
                String sNom     = "";
                while(stk.hasMoreTokens())
                    sNom        += stk.nextToken();                
                
                /*Completa la cuenta con los 0 faltantes*/
                String sCta    = sCta1 + sCta2 + "0000";
                       
                /*Obtiene la cuenta padre*/
                String sCtaPad  = sCta.substring(0, 4) + "00000000";
                
                /*Si el nombre es mayor a 50 entonces recortalo*/
                if(sNom.length()>=49)
                    sNom    = sNom.substring(0, 49);
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cuenta: " + sCta);
                
                /*Inserta la cuenta de primer nivel*/
                try 
                {                
                    sQ = "INSERT INTO tmpctas(codigo,          nombre,                                 tip,           ctamayor,      afectable,    export,            ctapad,                         ctaefectivo) "
                                + "VALUES('" + sCta + "',  '" + sNom.replace("'", "''") + "',    '" +  sNatu + "',    2,             1,            0,          '" +   sCtaPad + "',                   0)";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las cuentas de tercer nivel para leerlo*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("ctas3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }
                
        /*Recorre todo el archivo para insertar las cuentas de tercer nivel en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;
                
                /*Separa la línea por tubería y recorre los resultados*/
                java.util.StringTokenizer stk   = new java.util.StringTokenizer(sLec, "|");
                
                /*Separa por espacios el primer token*/
                java.util.StringTokenizer stkInt= new java.util.StringTokenizer(stk.nextToken(), " ");
                
                /*Obtiene el pimer segmento de la cuenta*/
                String sCta1    = stkInt.nextToken();
                                
                /*Si no hay mas tokens entonces continua*/
                if(!stkInt.hasMoreTokens())
                    continue;                
                
                /*Obtiene el segundo segmento de la cuenta*/
                String sCta2    = stkInt.nextToken();
                
                /*Si no hay mas tokens entonces continua*/
                if(!stkInt.hasMoreTokens())
                    continue;                
                
                /*Obtiene el tercer segmento de la cuenta*/
                String sCta3    = stkInt.nextToken();
                
                /*Determina la naturaleza de la cuenta*/
                String sNatu;
                if(Integer.parseInt(sCta1)>Integer.parseInt(jTCtaAct.getText().substring(0, 4)) && Integer.parseInt(sCta1)<Integer.parseInt(jTCtaPas.getText().substring(0, 4)))
                    sNatu    = "A";
                else if(Integer.parseInt(sCta1)>Integer.parseInt(jTCtaPas.getText().substring(0, 4)) && Integer.parseInt(sCta1)<Integer.parseInt(jTCtaCapi.getText().substring(0, 4)))
                    sNatu    = "P";
                else
                    sNatu    = "C";                              
                
                /*Obtiene todo el nombre de la cuenta*/
                String sNom     = "";
                while(stk.hasMoreTokens())
                    sNom        += stk.nextToken();                
                
                /*Completa la cuenta*/
                String sCta    = sCta1 + sCta2 + sCta3;
                       
                /*Obtiene la cuenta padre*/
                String sCtaPad  = sCta.substring(0, 8) + "0000";
                
                /*Si el nombre es mayor a 50 entonces recortalo*/
                if(sNom.length()>=49)
                    sNom    = sNom.substring(0, 49);
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cuenta: " + sCta);
                
                /*Inserta la cuenta de primer nivel*/
                try 
                {                
                    sQ = "INSERT INTO tmpctas(codigo,          nombre,                                 tip,           ctamayor,      afectable,    export,            ctapad,                         ctaefectivo) "
                                + "VALUES('" + sCta + "',  '" + sNom.replace("'", "''") + "',    '" +  sNatu + "',    2,             1,            0,          '" +   sCtaPad + "',                   0)";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Borra los archivos*/
        new File("ctas.txt").delete();
        new File("ctas2.txt").delete();
        new File("ctas3.txt").delete();
        
        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Manda a llamar join data para la interfaz con contabilidad de cuentas*/
        try
        {
            Process pro = new ProcessBuilder("joindata.exe", jTInst.getText().trim(),jTUsr.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), "ctas", jTUsrConta.getText().trim(), jTNomConta.getText().trim(), sContConta).start();
        }
        catch(Exception e)
        {
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);                  
        }            
                
    }/*Fin de private void vCtas()*/
                        
    
    /*Crea el documento txt e insertalo en la base de datos*/
    private void vCrePadro()
    {
        /*Carga el documento del padrón*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTRutPadro.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("padro.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;             
        String      sQ              = "";                              

        /*Borra la tabla de padrones temporal*/
        try 
        {                
            sQ = "DELETE FROM tmppadro";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
               return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de padrón*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("padro.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de padrón*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el nombre*/
                String sNom     = stk.nextToken().trim().replace("'", "''");

                /*Obtiene el tipo de proveedor*/
                String sTip     = stk.nextToken().trim().replace("'", "''");

                /*Obtiene el RFC, si no hay mas datos que sea cadena vacia*/
                String sRFC;
                if(!stk.hasMoreTokens())
                    sRFC        = "";
                else
                    sRFC        = stk.nextToken().trim().replace("'", "''");                                                    

                /*Obtiene el teléfono, si no hay mas datos que sea cadena vacia*/
                String sTel;
                if(!stk.hasMoreTokens())
                    sTel        = "";
                else
                    sTel        = stk.nextToken().trim().replace("'", "''");                                                    

                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando padrón: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO tmppadro(cod,             nom,                    tip,                    rfc,              tel,               export) "
                                + "VALUES('" + sCod + "',  '" + sNom + "',    '" +      sTip + "',    '" +      sRFC + "',   '" + sTel + "',         0)";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                       return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("padro.txt").delete();        
            
    }/*Fin de private void vCrePadro()*/
            
            
    /*Crea la tabla temporal del padrón si no existe*/
    private void vCreTamPad()
    {
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              

        /*Comprueba si existe la tabla temporal para padrón*/
        boolean bExi    = true;
        try
        {
            sQ = "SELECT COUNT(*) AS coun FROM sys.tables WHERE name = 'tmppadro' AND type = 'U'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            if(rs.next())
            {
                /*Si el conteo es igual a 0 entonces no existe la tabla y coloca la bandera*/
                if(rs.getInt("coun")==0)
                    bExi    = false;
            }
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }

        /*Si la tabla no existe entonces*/
        if(!bExi)
        {
            /*Crea la tabla temporal*/
            try 
            {                
                sQ = "CREATE TABLE tmppadro (id INT PRIMARY KEY IDENTITY, cod VARCHAR(30), nom VARCHAR(MAX), tel VARCHAR(MAX), rfc VARCHAR(50), tip VARCHAR(MAX), export BIT)";                    
                st = con.createStatement();
                st.executeUpdate(sQ);
             }
             catch(SQLException | HeadlessException e) 
             {                
                /*Esconde la forma de loading*/
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos
                if(Star.iCierrBas(con)==-1)
                    return;
                
                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                return;
            }    

        }/*Fin de if(!bExi)*/                    
        
        //Cierra la base de datos
        Star.iCierrBas(con);
        
    }/*Fin de private void vCreTamPad()*/
                
        
    /*Procesa el padrón*/
    private void vPadro()
    {
        /*Crea la tabla temporal del padrón si no existe*/
        vCreTamPad();
        
        /*Si tiene que leer el archivo de padrón entonces*/
        if(jTRutPadro.getText().compareTo("")!=0)
        {
            /*Crea el documento txt e insertalo en la base de datos*/
            vCrePadro();            
        }
        
        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Manda a llamar join data para la interfaz con contabilidad de cuentas*/
        try
        {
            Process pro = new ProcessBuilder("joindata.exe",jTInst.getText().trim(),jTUsr.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), "padro", jTUsrConta.getText().trim(), jTNomConta.getText().trim(), sContConta).start();
        }
        catch(Exception e)
        {
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);                  
        }            
                
    }/*Fin de private void vPadro()*/
    
    
    /*Procesa los vendedores*/
    private void vVend()
    {
        /*Carga el documento de los vendedores*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTVend.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vend.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de usuarios*/
        try 
        {                
            sQ = "DELETE FROM estacs WHERE estac <> 'SUP'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de los vendedores*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vend.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Obtiene la impresora por default*/
        PrintService se = PrintServiceLookup.lookupDefaultPrintService(); 
        
        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el nombre*/
                String sNom     = stk.nextToken().trim().replace("'", "''");

                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando vendedor: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO estacs(estac,           nom,         52m,             descu,              habdesc,    imptic,                 impfac,             cort,            pass,                          sucu,                 nocaj,                 estacglo,             admcaj,     vend) "
                             + "VALUES('" + sCod + "',  '" + sNom + "',    0,               0,                  1,   '" +   se.getName() + "', '" + se.getName() + "',  1,          '" + Star.sEncrip("") + "', '" +    Star.sSucu + "', '" + Star.sNoCaj + "', '" + Login.sUsrG + "',  0,          1)";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 {                     
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("vend.txt").delete();        
                
    }/*Fin de private void vVend()*/
    
    
    /*Procesa los almacenes*/
    private void vAlma()
    {
        /*Carga el documento de los almacenes*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTAlma.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("alma.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de almacenes*/
        try 
        {                
            sQ = "DELETE FROM almas WHERE alma <> 'SYS'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de los almacenes*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("alma.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el nombre*/
                String sNom     = stk.nextToken().trim().replace("'", "''");

                /*Obtiene la dirección 1, si no hay mas datos que sea cadena vacia*/
                String sDir1;
                if(!stk.hasMoreTokens())
                    sDir1        = "";
                else
                    sDir1        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la dirección 2, si no hay mas datos que sea cadena vacia*/
                String sDir2;
                if(!stk.hasMoreTokens())
                    sDir2        = "";
                else
                    sDir2        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la dirección 3, si no hay mas datos que sea cadena vacia*/
                String sDir3;
                if(!stk.hasMoreTokens())
                    sDir3        = "";
                else
                    sDir3        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando almacén: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO almas(alma,           almadescrip,    respon,         dir1,            dir2,            dir3,            sucu,                    nocaj,                 estac) "
                             + "VALUES('" + sCod + "',  '" + sNom + "',     '',     '" +    sDir1 + "', '" + sDir2 + "', '" + sDir3 + "', '" + Star.sSucu  + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("alma.txt").delete();        
                
    }/*Fin de private void vAlma()*/
    
    
    /*Procesa las clasificaciones*/
    private void vClas()
    {
        /*Carga el documento de las clasificaciones*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTClas.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("clas.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de clasificaciones de productos*/
        try 
        {                
            sQ = "DELETE FROM clasjeraprod";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
               Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de las clasificaciones*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("clas.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod;
                if(!stk.hasMoreTokens())
                    continue;
                else
                    sCod        = stk.nextToken().trim().replace("'", "''");                                                    

                /*Obtiene la descripción*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    continue;
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando clasificación: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO clasjeraprod(     clas,                                    rut,          estac,                                       sucu,                                    nocaj,                                    extr1,                     extr2) " + 
                                           "VALUES('" + sCod.replace(" ", "-").trim() + "-',     '', '" +      Login.sUsrG.replace("'", "''") +"',  '" +    Star.sSucu.replace("'", "''") + "','" +  Star.sNoCaj.replace("'", "''") + "', '" + sDescrip.trim() + "', '" + sCod.replace(" ", "").trim() + "')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 {                     
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Recorre todas las clasificaciones insertadas*/                
        ResultSet   rs;
        try
        {
            sQ = "SELECT * FROM clasjeraprod";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            while(rs.next())                               
            {
                /*Inicialmente esta es la clasificación*/
                String sClas    = "Clasificaciones|";
                
                /*Contiene la clasificación*/
                String sClasG   = "";
                
                //se saca la descripcion
                String sDescrip = rs.getString("extr1");
                
                /*Tokeniza el valor de la clasifiación obtenido*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(rs.getString("clas"), "-");
                                        
                /*Recorre los tokens*/
                while(stk.hasMoreTokens())
                {                    
                    /*Completa la clasificación*/
                    sClasG      += stk.nextToken();
                    
                    /*Obtiene la cadena que le corresponde a esa clasificación*/
                    sClas       += sGetClas(con, sClasG) + "|";                                        
                }                                 
                
                /*Quita la última tubería*/
                sClas           = sClas.substring(0, sClas.length() - 1);
                
                /*Actualiza ese registro para que tenga la clasificación*/
                if(sUpdReg(con, rs.getString("id_id"), sClas,sDescrip)==null)
                    return;
            }
        }
        catch(SQLException e)
        {
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;

            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }
//        
//        /*Actualiza los campos que utilice y dejalos limpios*/
//        try 
//        {                
//            sQ = "UPDATE clasjeraprod SET "                    
//                    + "clas             = ''";                    
//            st = con.createStatement();
//            st.executeUpdate(sQ);
//         }
//         catch(SQLException | HeadlessException e) 
//         { 
//            /*Cierra la base de datos*/
//            try           
//            {
//                con.close();
//            }
//            catch(SQLException ex)
//            {
//                /*Agrega en el log*/
//                Login.vLog(ex.getMessage());
//
//                /*Mensajea y regresa*/   
//                JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
//                return;
//            }
//
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
//            return;
//        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
            
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("clas.txt").delete();        
                
    }/*Fin de private void vClas()*/
    
    
    /*Actualiza ese registro para que tenga la clasificación*/
    private String sUpdReg(Connection con, String sId, String sClas, String sDescrip)
    {
        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              
        
        
        
        /*Actualiza la existencia del producto*/
        try 
        {                
            sQ = "UPDATE clasjeraprod SET "
                    + "rut          = '" + sClas + "', "
                    + "clas          = '" + sDescrip + "' "
                    + "WHERE id_id  = " + sId;                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa nulo*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
            return null;
        }

        /*Regresa que todo fue bien*/
        return "";
        
    }/*Fin de private String sUpdReg(Connection con, String sId, String sClas)*/
                
                
    /*Actualiza ese registro para que tenga la clasificación*/
    private String sUpdRegP(Connection con, String sId, String sClas)
    {
        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              
        
        
        
        /*Actualiza la existencia del producto*/
        try 
        {                
            sQ = "UPDATE prods SET "
                    + "clasjera     = '" + sClas + "' "
                    + "WHERE id_id  = " + sId;                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa nulo*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
            return null;
        }

        /*Regresa que todo fue bien*/
        return "";
        
    }/*Fin de private String sUpdRegP(Connection con, String sId, String sClas)*/
    
    
    /*Función de utilidad para la migración, obtiene la cadena que debe de ir por esa clasificación*/
    private String sGetClas(Connection con, String sClas)
    {
        /*Declara variables de la base de datos*/
        Statement   st;        
        ResultSet   rs;
        String      sQ              = "";                              
        
        
        
        
        /*Obtiene la cadena que se debe sustituir*/
        try
        {
            sQ = "SELECT extr1 FROM clasjeraprod WHERE extr2 = '" + sClas + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces devuelve el resultado*/
            if(rs.next())                               
                return rs.getString("extr1");
        }
        catch(SQLException e)
        {
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa nulo*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return null;
        }

        /*Regresa que no fue bien*/
        return null;
        
    }/*Fin de private String sGetClas(Connection con, String sClas)*/
            
    
    /*Procesa el CXC*/
    private void vCXC()
    {
        /*Carga el documento de CXC*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCXC.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cxc.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra todos los CXC*/
        try 
        {                
            sQ = "DELETE FROM cxc";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de CXC*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cxc.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                //Se obtiene el folio
                String sFolio   = stk.nextToken().trim();
                
                //Obtiene el noser o tipo 
                String sTipo    = stk.nextToken().trim();
                
                /*Obtiene el codigo del clienete*/
                String sNoCli   = stk.nextToken().trim();
                
                /*Obtiene el subtotal*/
                String sSubtotal  = stk.nextToken().trim();
                
                /*Obtiene el total que funcionara como cargo*/
                String sTotal  = stk.nextToken().trim();
                
                /*Obten el pago que funcionara como abono al documento*/
                String sPago  = stk.nextToken().trim();
                
                /*Obtiene la fecha de vencimiento*/
                String sFechV  = stk.nextToken().trim();
                
                /*Obtiene la de alta*/
                String sFechAlt  = stk.nextToken().trim();
                
                /*Obtiene la de alta*/
                String sFechCan  = stk.nextToken().trim();
                
                //se les da formato a las fechas
                /*Contiene el día, mes y año*/
                String sDia;
                String sMes;
                String sAno;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFechV,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFechV   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkF  = new java.util.StringTokenizer(sFechAlt,"/");
                sDia    = stkF.nextToken();
                sMes    = stkF.nextToken();
                sAno    = stkF.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFechAlt   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                
                
                
                Star.lCargGral.jTInf.setText("Insertando cxc: " + sNoCli.trim());

                //si esta cancelada brincala
                if(sFechCan.compareTo("0/  0/00")!=0)
                    continue;
                
                
                /*Contiene el código del cliente y la serie*/
                
                String      sCodCli     = "";
                String      sSer        = "";
                
                /*Obtiene el código del cliente en base al nombre*/                
                ResultSet   rs;
                try
                {
                    sQ = "SELECT ser, ser + codemp AS codemp FROM emps WHERE codemp = '" + sNoCli.trim() + "'";	
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())                               
                    {
                        sCodCli         = rs.getString("codemp");                                                  
                        sSer            = rs.getString("ser");
                    }
                }
                catch(SQLException e)
                {
                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
                    return;
                }
                //se crea el noser
                String sNoser = sTipo.charAt(0) +""+ sTipo.charAt(1) +""+ sTipo.charAt(2);
                
                //Inserta CXC en la base de datos 
                if(Double.parseDouble(sTotal.replace("$", "").replace(",", ""))>0)
                    //                          sNoRefer, sNoSer, sEmpre , sSer, sSubTot  , sImpue, sTot  , sCarg , sAbon, sFVenc        , sFDoc  , sConcep, sFormPag, sFol, sComen, sConcepPag)
                    if(Star.iInsCXCP(con, "cxc", sFolio  , sNoser, sCodCli, sSer, sSubtotal, "0"   , sTotal, sTotal, "0"  , "'"+sFechV+"'","'"+ sFechAlt+"'", sNoser, ""      , "0" , ""    , "" ,""       )==-1)
                        return;
                
                if(Double.parseDouble(sPago.replace("$", "").replace(",", ""))>0)
                    //                          sNoRefer, sNoSer, sEmpre , sSer, sSubTot  , sImpue, sTot  , sCarg , sAbon, sFVenc , sFDoc, sConcep, sFormPag, sFol, sComen, sConcepPag)
                    if(Star.iInsCXCP(con, "cxc", sFolio  , sNoser, sCodCli, sSer, sSubtotal, "0"   , sTotal, "0"   , sPago, "'"+sFechV+"'", "'"+sFechV+"'", "ABON "+sNoser   , ""      , "0" , ""    , "" ,""       )==-1)
                        return;
                               
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("cxc.txt").delete();        
                
    }/*Fin de private void vCXC()*/
    
    
    /*Procesa el activo fijo*/
    private void vAct()
    {
        /*Crea la instancia hacia el archivo a importar*/
        FileInputStream file;
        try
        {
            file    =  new FileInputStream(new File(jTActFij.getText().trim()));
        }
        catch(Exception e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/    
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }                    
        
        /*Instancia el objeto de excel*/
        org.apache.poi.ss.usermodel.Workbook wkbok;
        try
        {
            wkbok   = WorkbookFactory.create(file);
        }
        catch(IOException | InvalidFormatException e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/    
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }                                        

        /*Obtiene la primera hoja del libro*/
        org.apache.poi.ss.usermodel.Sheet  sheet         = wkbok.getSheetAt(0);
        
        /*Abre la base de datos*/
        Connection  con;
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + Star.sInstancia + ":" + Star.sPort + "/" + Star.sBD + "?user=" + Star.sUsuario + "&password=" + Star.sContrasenia );
            con.setAutoCommit(false);
        }
        catch(SQLException | HeadlessException e)
        {
            /*Escone el loading*/
            if(Star.lCargGral!=null)                        
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));
            return;
        }

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";

        /*Borra todos los activos fijos*/
        try 
        {            
            sQ = "DELETE FROM actfij";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde el loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());                        
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
        }
        
        /*Contador de fila*/
        int iConta                  = 1;               

        /*Inicializa el contador de la celda por cada fila*/
        int iContCell               = 1;

        /*Recorre todas las hojas de excel*/
        Iterator<Row> rowIt     = sheet.iterator();
        while(rowIt.hasNext())
        {                       
            /*Recorre todas columnas del archivo*/
            Row row             = rowIt.next();
            Iterator<Cell> cellIterator = row.cellIterator();

            /*Si el contador es igual a uno entonces continua ya que no quiero leer la primera fila de encabezados y que continue*/
            if(iConta==1)
            {
                ++iConta;
                continue;
            }

            /*Contiene los valores de la fila a insertar*/                    
            String sProd        = "";
            String sDescrip     = "";            
            String sFAdq        = "";
            String sFIniDep     = "";
            String sCostOri     = "";
            String sPorDep      = "0";            
            
            /*Recorre todas las celdas de la fila*/
            while(cellIterator.hasNext())
            {
                /*Obtiene el objeto de la celda*/
                Cell cell       = cellIterator.next();                 
                
                /*Obtiene los valores especificos*/
                if(iContCell==1)       
                {
                    /*Obtiene el código del producto*/
                    if(cell.getCellType()==Cell.CELL_TYPE_NUMERIC)
                        sProd   = Double.toString(cell.getNumericCellValue());
                    else                    
                        sProd   = cell.getStringCellValue();                                     
                                                            
                    /*Coloca el producto que se esta insertando*/
                    Star.lCargGral.jTInf.setText("Insertando producto: " + sProd);
                }
                else if(iContCell==2)                                                                                                       
                    sDescrip    = cell.getStringCellValue();                                                                                      
                else if(iContCell==3)                                                                    
                {
                    /*Obtiene la fecha de adquisición*/
                    java.util.Date dtDat    = cell.getDateCellValue();
                    java.text.SimpleDateFormat prsDat   = new java.text.SimpleDateFormat("yyy-MM-dd");
                    sFAdq       = prsDat.format(dtDat);
                }
                else if(iContCell==4)                                                                    
                {
                    /*Obtiene la fecha de inicio de depreciación*/
                    java.util.Date dtDat    = cell.getDateCellValue();
                    java.text.SimpleDateFormat prsDat   = new java.text.SimpleDateFormat("yyy-MM-dd");
                    sFIniDep    = prsDat.format(dtDat);                                                                                                                                                                                                 
                }
                else if(iContCell==5)                                                                    
                    sCostOri    = Double.toString(cell.getNumericCellValue());
                else if(iContCell==6)                                                                    
                    sPorDep     = Double.toString(cell.getNumericCellValue());
                /*Aqui termina de leer*/
                else
                    break;
                
                /*Aumenta en uno el contador de las celdas*/
                ++iContCell;
            }
            
            /*Si el producto es fin de archivo entonces sal del búcle*/
            if(sProd.compareTo("FINARCHIVO")==0)                    
                break;                    

            /*Multiplica el porcentaje de depreciación * 100 para que sea el correcto*/
            sPorDep = Double.toString(Double.parseDouble(sPorDep)*100);
            
            /*Aumenta en uno el contador de las filas*/
            ++iConta;
            
            /*Resetea el contador de celdas*/
            iContCell   = 1;

            /*Obtiene el porcentaje de depreciación anual de ese producto*/
            String sPorProd = Double.toString(Double.parseDouble(sPorDep)/12);                
        
            /*Obtiene los meses y días posibles para depreciación*/
            String sMesDia  = Double.toString(100.0 / Double.parseDouble(sPorProd));                

            /*Obtengo los meses que tengo que sumar*/
            String sMes     = Integer.toString((int)Double.parseDouble(sMesDia));                
            
            /*Declara objetos de fecha*/
            java.util.Date dtIniDep;
            java.text.SimpleDateFormat prsDat;
            
            /*Convierte a fecha el inicio de depreciación*/            
            try
            {
                prsDat    = new java.text.SimpleDateFormat("yyy-MM-dd");            
                dtIniDep = prsDat.parse(sFIniDep);
            }
            catch(Exception e)
            {
                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Mensajea y regresa*/   
                JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  en por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
                return;
            }                

            /*Declara el objeto calendario*/        
            Calendar cal = Calendar.getInstance(); 

            /*Inicializalo con la fecha de inicio de depreciación*/
            cal.setTime(dtIniDep);

            /*Sumale los meses que se puede depreciar*/
            cal.add(Calendar.MONTH, Integer.parseInt(sMes));        

            /*Obtiene la fecha que quedo*/
            dtIniDep   = cal.getTime();
            
            /*Deja la fecha de fin de depreciación correcta*/
            String sFFinDep = prsDat.format(dtIniDep);

            /*Inserta en la base de datos el registro*/            
            try
            {
                sQ  = "INSERT INTO actfij(prod,       alma, lug,    ctadepre,   ctadedu,    ctagast,    serprod,        descrip,            porcendep,      porcendedu,  cost,         sal, exportconta,    totmesbaj, totacumes, totvalactbaj, totestadbaj, costsal,   fadquisreal,        fadquisusr,     finidep,            ffindep,       fbajdep, estadusr,   tipact,     comen,      baj,        estac,                  sucu,                   nocaj,            export, falt) "
                           + "VALUES('" + sProd + "', '',   '',     '',         '',         '',         '',     '" +    sDescrip + "', " +  sPorDep + ",    0,       " + sCostOri + ", 0,   0,              0,         0,         0,            0,           0,    '" + sFAdq + "',  '" +   sFAdq + "','" + sFIniDep + "', '" + sFFinDep + "', NOW(),   '',         '',         '',         0,    '" +  Login.sUsrG + "', '" +  Star.sSucu + "', '" +   Star.sNoCaj + "', 0,      NOW())";                
                st = con.createStatement();                        
                st.executeUpdate(sQ);
            }
            catch(SQLException | HeadlessException e)
            {
                /*Esconde el loading*/
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos
                if(Star.iCierrBas(con)==-1)
                    return;
            
                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Llama al recolector de basura y mensajea*/
                System.gc();                       

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, "Error en fila: "  + iConta + " celda: " + iContCell + " por " + e.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                    
                return;
            }                                                                        

        }/*Fin de while(rowIt.hasNext())*/                                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        /*Esconde la forma de loading*/
        if(Star.lCargGral!=null)
            Star.lCargGral.setVisible(false);

        //Cierra la base de datos
        Star.iCierrBas(con);
        
    }/*Fin de private void vAct()*/
    
    
    /*Procesa el kardex*/
    private void vKard()
    {
        /*Carga el documento de kardex*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTKard.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("kard.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra todos los movimientos anteriores*/
        try 
        {                
            sQ = "DELETE FROM ingres";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                    
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("kard.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {           
            /*Contiene las variables de lectura del archivo*/
            String sProd    = "";
            String sUnid    = "";
            String sConcep  = "";
            String sAlma    = "";
            String sRefer   = "";
            String sAlma2;
            String sEnt     = "0";
            String sSal     = "0";
            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {                
                /*Si el primer carácter no es tubería o sígno de gato entonces continua*/
                if(sLec.charAt(0)!='|' && sLec.charAt(0)!='&')
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                                    
                /*Si la línea empieza con tubería entonces*/
                if(sLec.charAt(0)=='|')
                {
                    /*Obtiene el código del producto*/
                    sProd   = stk.nextToken().trim();
                    
                    /*Obtiene la unidad y continua*/
                    sUnid   = stk.nextToken().trim();
                    continue;                                        
                }
                else if(sLec.charAt(0)=='&')                
                {
                    /*Obtiene el concepto*/
                    sConcep = stk.nextToken().trim().replace("&", "");
                    
                    /*Obtiene el almacén*/
                    if(!stk.hasMoreTokens())
                        sAlma       = "";
                    else
                        sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                    
                    /*Obtiene la referencia*/
                    if(!stk.hasMoreTokens())
                        sRefer      = "";
                    else
                        sRefer      = stk.nextToken().trim().replace("'", "''");                                                    
                    
                    /*Obtiene el almacén 2*/
                    if(!stk.hasMoreTokens())
                        sAlma2      = "";
                    else
                        sAlma2      = stk.nextToken().trim().replace("'", "''");                                                    
                    
                    /*Obtiene la entrada*/
                    if(!stk.hasMoreTokens())
                        sEnt        = "0";
                    else
                        sEnt        = stk.nextToken().trim().replace("'", "''");                                                    
                    
                    /*Obtiene la salida*/
                    if(!stk.hasMoreTokens())
                        sSal        = "0";
                    else
                        sSal        = stk.nextToken().trim().replace("'", "''");                                                    
                }                                                                        

                /*Determina la cantidad entre entrada y salida*/
                String sCant        = sEnt;
                if(Double.parseDouble(sSal)!=0)
                    sCant           = sSal;
                
                /*Determina el tipo de movimiento que será*/
                String sTipE        = "0";
                if(Double.parseDouble(sSal)!=0)
                    sTipE           = "1";
                
                /*Si no existe el concepto entonces crealo*/                
                vCreConcepIngre(con, sConcep);
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando kardex: " + sProd.trim());

                /*Si la cantidad es cadena vacia  entonces continua*/
                if(sCant.compareTo("")==0)
                    continue;
                
                /*Registra el ingreso/salida al almacén*/
                try 
                {            
                    sQ = "INSERT INTO ingres(             prod,                                      alma,                                    concep,                                  cant,                estac,                                      falt,            sucu,                                    nocaj,                                        entsal,          unid) " + 
                                          "VALUES('" +    sProd.replace("'", "''") + "','" +         sAlma.replace("'", "''") + "','" +       sConcep.replace("'", "''") + "', " +     sCant + ",'" +       Login.sUsrG.replace("'", "''") + "',        now(), '" +      Star.sSucu.replace("'", "''") + "','" +  Star.sNoCaj.replace("'", "''") + "',  " +     sTipE + ", '" +  sUnid.replace("'", "''") + "')";            
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException ex) 
                 { 
                     /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(ex.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + ex.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
                    return;
                }
            
                /*Contiene la descripicón del producto*/
                String sDescrip    = "";
                
                /*Obtiene algunos datos de ese producto*/
                ResultSet rs;
                try
                {
                    sQ = "SELECT descrip FROM prods WHERE prod = '" + sProd + "'";	
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())                               
                        sDescrip = rs.getString("descrip");
                }
                catch(SQLException e)
                {
                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
                    return;
                }
                
                /*Registra el producto que se esta sacando del inventario en la tabla de monitor de inventarios*/
                if(!Star.vRegMoniInv(con, sProd.replace("'", "''"), sCant, sDescrip.replace("'", "''"), sAlma.replace("'", "''"), Login.sUsrG , sRefer, sConcep.replace("'", "''"), sUnid.replace("'", "''"), "", "", sTipE))                                
                    return;                                                                                                                                                                                                             
                            
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("kard.txt").delete();        
                
    }/*Fin de private void vKard()*/
    
    
    /*Procesa las existencias por serie*/
    private void vSer()
    {
        /*Carga el documento 1 de series*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTSer1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("ser.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra todas las existencias de series anteriores*/
        try 
        {                
            sQ = "DELETE FROM serieprod";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("ser.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {           
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {                
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Obtiene el producto*/
                String sProd;
                if(!stk.hasMoreTokens())
                    sProd       = "";
                else
                    sProd       = stk.nextToken().trim().replace("'", "''");                                                    

                /*Obtiene la cantidad*/
                String sCant;
                if(!stk.hasMoreTokens())
                    sCant       = "0";
                else
                    sCant       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el almacén*/
                String sAlma;
                if(!stk.hasMoreTokens())
                    sAlma       = "";
                else
                    sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la serie*/
                String sSer;
                if(!stk.hasMoreTokens())
                    sSer        = "";
                else
                    sSer        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el comentario*/
                String sComen;
                if(!stk.hasMoreTokens())
                    sComen      = "";
                else
                    sComen      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando existencia serie: " + sSer.trim());
                        
                /*Inserta la serie en la base de datos*/
                try 
                {                            
                    sQ  = "INSERT INTO serieprod (  prod,           ser,                    alma,           exist,          estac,                 sucu,                   nocaj,                 comen) "
                                    + "VALUES('" + sProd + "', '" + sSer.trim() + "', '" +  sAlma + "', " + sCant + ", '" + Login.sUsrG + "', '" + Star.sSucu + "', '" +   Star.sNoCaj + "', '" + sComen + "')";
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log y mensajea*/
                    Login.vLog(e.getMessage());           
                    
                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, Star.class.getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(Star.class.getClass().getResource(Star.sRutIconEr)));            
                    return;
                 }    
                            
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Abre el archivo de series 2 para irlo recorriendo*/
        java.io.BufferedReader br = null;
        try 
        { 
            /*Abre el archivo*/
            br = new java.io.BufferedReader(new java.io.FileReader(jTSer2.getText().trim()));

            /*Recorre todo el archivo*/
            String sLin;
            while((sLin = br.readLine())!=null) 
            {                    
                /*Tokeniza por tubería*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLin, "|");                              
                
            }/*Fin de while((sLin = br.readLine())!=null) */
        }
        catch(IOException e) 
        {   
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        } 
                
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("ser.txt").delete();        
                
    }/*Fin de private void vSer()*/
    
    
    /*Procesa el CXP*/
    private void vCXP()
    {
        /*Carga el documento de CXP*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCXP.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cxp.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra todos los CXCp*/
        try 
        {                
            sQ = "DELETE FROM cxp";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado de CXP*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cxp.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                //Se obtiene el folio
                String sFolio   = stk.nextToken().trim();
                
                //Obtiene el noser o tipo 
                String sTipo    = stk.nextToken().trim();
                
                /*Obtiene el codigo del clienete*/
                String sNoProv   = stk.nextToken().trim();
                
                /*Obtiene el subtotal*/
                String sSubtotal  = stk.nextToken().trim();
                
                /*Obtiene el total que funcionara como cargo*/
                String sTotal  = stk.nextToken().trim();
                
                /*Obten el pago que funcionara como abono al documento*/
                String sPago  = stk.nextToken().trim();
                
                /*Obtiene la fecha de vencimiento*/
                String sFechV  = stk.nextToken().trim();
                
                /*Obtiene la de alta*/
                String sFechAlt  = stk.nextToken().trim();
                
                /*Obtiene la de alta*/
                String sFechCan  = stk.nextToken().trim();
                
                //se les da formato a las fechas
                /*Contiene el día, mes y año*/
                String sDia;
                String sMes;
                String sAno;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFechV,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFechV   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkF  = new java.util.StringTokenizer(sFechAlt,"/");
                sDia    = stkF.nextToken();
                sMes    = stkF.nextToken();
                sAno    = stkF.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFechAlt   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando CXP: " + sNoProv.trim());
                
                //si esta cancelada brincala
                if(sFechCan.compareTo("0/  0/00")!=0)
                    continue;
                
                
                
                
                

                /*Contiene el código del proveedor y la serie*/
                String      sProv       = "";
                String      sSer        = "";
                
                /*Obtiene el código del proveedor en base al nombre*/                
                ResultSet   rs;
                try
                {
                    sQ = "SELECT ser, CONCAT_WS('',ser, prov) AS prov FROM provs WHERE prov = '" + sNoProv.trim() + "'";	
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())                               
                    {
                        sProv           = rs.getString("prov");                                                  
                        sSer            = rs.getString("ser");
                    }
                }
                catch(SQLException e)
                {
                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
                    return;
                }
                
                //se crea el noser
                String sNoser = "";
                if(sTipo.compareTo("FACTURA")==0)
                    sNoser    = "COMP";
                else
                    sNoser     = "ORDC";
                //Inserta CXP en la base de datos
                if(Double.parseDouble(sTotal.replace("$", "").replace(",", ""))>0)
                    //                         sNoRefer,sNoSer, sEmpre , sSer,sSubTot  ,sImpue, sTot  , sCarg , sAbon, sFVenc         , sFDoc   , sConcep,sFormPag,  sFol, sComen,sConcepPag)
                    if(Star.iInsCXCP(con, "cxp", sFolio,sNoser, sProv  , sSer,sSubtotal, "0"  , sTotal, sTotal, "0"  ,  "'"+sFechV+"'","'"+ sFechAlt+"'", sNoser , ""     ,  "0" ,  ""   , ""  ,""     )==-1)
                        return;
                 if(Double.parseDouble(sPago.replace("$", "").replace(",", ""))>0)
                     //                         sNoRefer,sNoSer, sEmpre , sSer,sSubTot  ,sImpue, sTot  , sCarg , sAbon, sFVenc         , sFDoc   , sConcep          ,sFormPag,  sFol, sComen,sConcepPag)
                    if(Star.iInsCXCP(con, "cxp", sFolio,sNoser, sProv  , sSer,sSubtotal, "0"  , sTotal, "0"    , sPago  ,  "'"+sFechV+"'" ,"'"+ sFechV+"'"  , "ABON " + sNoser , ""     ,  "0" ,  ""   , ""  ,""     )==-1)
                        return;
                                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("cxp.txt").delete();        
                
    }/*Fin de private void vCXP()*/
    
    
    /*Procesa las existencias*/
    private void vExis()
    {
        /*Carga el documento de las existencias*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTExist.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("exis.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                                       
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
         
        /*Abre el archivo creado de las existencias*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("exis.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        //se borra la base de datencias generales
        try 
        {                
            sQ = "DELETE FROM existalma";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
        }
        catch(SQLException | HeadlessException e) 
        {             
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {   
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del producto*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el código del almacén*/
                String sAlma    = stk.nextToken().trim().replace("'", "''");

                /*Obtiene el código del almacén*/
                String sExis    = stk.nextToken().trim().replace("'", "''");

                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando existencia de producto: " + sCod);
        
                /*Variable de base de datos*/
                ResultSet   rs;                                      
                
                //Comprueba si ese producto existe                
                int iRes        = Star.iExistProd(con, sCod.trim());

                //Si hubo error entonces regresa
                if(iRes==-1)
                    return;

                //Si el producto existe entonces coloca la bandera                
                boolean bSi     = false;
                if(iRes==1)
                    bSi         = true;
                
                //si existe entonces si se puede agregar
                if(bSi)                    
                {
                    /*Realiza la modificación de existencia en el almacén*/ 
                    //                 conexion,codProducto,                    conAlmacen,                     cantidad, siempre signo de mas por ser un agregado
                    if(Star.iAfecExisProd(con, sCod .replace("'", "''").trim(), sAlma.replace("'", "''").trim(), sExis, "+")==-1)
                        return;

                    /*Actualiza la existencia general del producto*/
                    if(Star.iCalcGralExis(con,  sCod .replace("'", "''").trim())==-1)
                        return;
                }
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("exis.txt").delete();        
                
    }/*Fin de private void vExis()*/
    
    
    /*Procesa las compras*/
    private void vComp()
    {
        /*Carga el documento de las compras 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTComp1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("comp1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento de las compras 2*/        
        try
        {
            p = PDDocument.load(new File(jTComp2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("comp2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las compras 3*/        
        try
        {
            p = PDDocument.load(new File(jTComp3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("comp3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las compras 4*/        
        try
        {
            p = PDDocument.load(new File(jTComp4.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("comp4.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las compras 5*/        
        try
        {
            p = PDDocument.load(new File(jTComp5.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("comp5.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                                                   
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;        
        ResultSet   rs;        
        String      sQ              = "";                              

        /*Borra todas las compras*/
        try 
        {                
            sQ = "DELETE FROM comprs";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Borra las partidas de las compras*/
        try 
        {                
            sQ = "DELETE FROM partcomprs";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                         
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Abre el archivo creado de las compras 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("comp1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Contiene el almacén de toda la compra*/
        String sAlma    = "";
        
        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el tipo de documento*/
                String sTipDoc;
                if(!stk.hasMoreTokens())
                    sTipDoc     = "";
                else
                    sTipDoc     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la fecha, si no hay mas datos que sea cadena vacia*/
                String sFech    = "";
                if(!stk.hasMoreTokens())
                    sFech       = "";
                else
                    sFech       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la referencia, si no hay mas datos que sea cadena vacia*/
                String sRefer;
                if(!stk.hasMoreTokens())
                    sRefer      = "";
                else
                    sRefer      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el almacén, si no hay mas datos que sea cadena vacia*/                
                if(!stk.hasMoreTokens())
                    sAlma       = "";
                else
                    sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                                
                /*Obtiene la referencia del proveedor, si no hay mas datos que sea cadena vacia*/
                String sRefProv;
                if(!stk.hasMoreTokens())
                    sRefProv    = "";
                else
                    sRefProv    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la fecha de vencimiento, si no hay mas datos que sea cadena vacia*/
                String sFVenc;
                if(!stk.hasMoreTokens())
                    sFVenc      = "";
                else
                    sFVenc      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la referencia varios, si no hay mas datos que sea cadena vacia*/
                String sRefVar;
                if(!stk.hasMoreTokens())
                    sRefVar     = "";
                else
                    sRefVar     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Determina si sera una órden de compra o una compra*/
                if(sTipDoc.compareTo("FACTURA")==0)
                    sTipDoc     = "COMP";
                else
                    sTipDoc     = "ORDC";
                
                /*Contiene el día, mes y año*/
                String sDia;
                String sMes;
                String sAno;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFech,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFech   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Descompone la cadena en tokens para obtener la fecha de vencimiento correcta*/                
                stkM    = new java.util.StringTokenizer(sFVenc,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha de vencimiento correctamente*/
                sFVenc  = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando compra: " + sFol);
                
                //Inserta la compra
                if(Star.iInsComprs(con, sFol, "COMP", "", "", sFol, "'" + sFech + "'", "0", "0", "0", "'CO'", "'" + sFech + "'", "", "", "'" + sFVenc + "'", sTipDoc, "now()", "", "", "", "0", sRefer, "0", "0")==-1)
                    return;
                                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Abre el archivo creado de las compras 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("comp2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el plazo de pago*/
                String sPlaz;
                if(!stk.hasMoreTokens())
                    sPlaz       = "";
                else
                    sPlaz       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el subtotal, si no hay mas datos que sea cadena vacia*/
                String sSubTot;
                if(!stk.hasMoreTokens())
                    sSubTot     = "";
                else
                    sSubTot     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el impuesto, si no hay mas datos que sea cadena vacia*/
                String sImpue;
                if(!stk.hasMoreTokens())
                    sImpue      = "";
                else
                    sImpue      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el total, si no hay mas datos que sea cadena vacia*/
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot        = "";
                else
                    sTot        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si el total tiene el signo de menos entonces*/
                if(sTot.contains("-"))                
                {
                    /*Quita el signo de menos y colocalo al principio*/
                    sTot        = sTot.replace("-", "").replace(",", "");                                    
                    sTot        = "-" + sTot;
                }
                
                /*Obtiene la fecha de envío, si no hay mas datos que sea cadena vacia*/
                String sFEnvi;
                if(!stk.hasMoreTokens())
                    sFEnvi      = "";
                else
                    sFEnvi      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la fecha de recepción, si no hay mas datos que sea cadena vacia*/
                String sFRecep;
                if(!stk.hasMoreTokens())
                    sFRecep     = "";
                else
                    sFRecep     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el estatus, si no hay mas datos que sea cadena vacia*/
                String sEstatu;
                if(!stk.hasMoreTokens())
                    sEstatu     = "";
                else
                    sEstatu     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el nombre del proveedor, si no hay mas datos que sea cadena vacia*/
                String sNom;
                if(!stk.hasMoreTokens())
                    sNom        = "";
                else
                    sNom        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Determina el estatus de la compra*/
                if(sEstatu.compareTo("A")==0)
                    sEstatu     = "CO";
                else
                    sEstatu     = "CA";
                
                //Declara variables locales
                String sCarg ="0";
                String sAbon ="0";
                
                //Se determina el estatus 
                if(sEstatu.compareTo("CO")==0)
                {
                    try
                    {

                        sQ = "SELECT norefer,SUM(carg) AS cargo,SUM(abon) AS abono FROM cxp WHERE norefer = '" + sFol.trim() + "' GROUP BY norefer";	                                        
                        st = con.createStatement();
                        rs = st.executeQuery(sQ);
                        /*Si hay datos entonces obtiene el resultado*/
                        if(rs.next())
                        {
                            sCarg     = rs.getString("cargo");
                            sAbon     = rs.getString("abono");
                        }

                    }
                    catch(SQLException e)
                    {                        
                        /*Esconde la forma de loading*/
                        if(Star.lCargGral!=null)
                            Star.lCargGral.setVisible(false);

                        //Cierra la base de datos
                        if(Star.iCierrBas(con)==-1)
                            return;
                        
                        /*Agrega en el log*/
                        Login.vLog(e.getMessage());

                        /*Mensajea y regresa*/
                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                        return;
                    }
                    
                    //Si el cargo es igual que el abono esta completa la venta si no es pendiente
                    if(Double.parseDouble(sCarg)-Double.parseDouble(sAbon)<=0)
                        sEstatu         = "CO"; 
                    else
                        sEstatu         = "PE"; 

                }//Fin if(sEstatu.compareTo("CO")==0)
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando compra 2: " + sFol);
                
                /*Actualiza la compra*/
                try 
                {                
                    sQ = "UPDATE comprs SET "
                            + "subtot       = " + sSubTot.replace(",", "") + ", "
                            + "impue        = " + sImpue.replace(",", "") + ", "
                            + "tot          = " + sTot.replace(",", "") + ", "
                            + "estado       = '" + sEstatu + "', "
                            + "nomprov      = '" + sNom + "' "
                            + "WHERE nodoc  = '" + sFol + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 {                     
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las compras 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("comp3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el código del producto*/
                String sProd;
                if(!stk.hasMoreTokens())
                    sProd       = "";
                else
                    sProd       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código de producto 2, si no hay mas datos que sea cadena vacia*/
                String sProd2;
                if(!stk.hasMoreTokens())
                    sProd2     = "";
                else
                    sProd2     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la descripción, si no hay mas datos que sea cadena vacia*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip    = "";
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando compra 3: " + sFol);
                
                /*Obtiene la compra que tiene ese folio*/
                String sCodCom  = "";
                try
                {
                    sQ = "SELECT codcomp FROM comprs WHERE nodoc = '" + sFol.trim() + "'";	                                        
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sCodCom = rs.getString("codcomp");
                }
                catch(SQLException e)
                {                                        
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                       Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                                
                /*Inserta la partida*/
                try 
                {                
                    sQ = "INSERT INTO partcomprs(   prod,                    descrip,                    codcom,             alma,   cant,   cantlotpend,unid,   cost,   costpro, serprod,   comenser,   descu,  descad, impo,       garan,      mon,        tipcam,        codimpue) "
                                    + "VALUES('" +  sProd2.trim() + "', '" + sDescrip.trim() + "', '" +  sCodCom + "',       '',     0,      0,          '',     0,      0,       '',        '',         0,      0,      0,          '',         '',         0,             'IVA')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las compras 4*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("comp4.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();
                
                /*Obtiene la garantía*/
                String sGaran;
                if(!stk.hasMoreTokens())
                    sGaran      = "";
                else
                    sGaran      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la garantía es cadena vacia continua*/
                if(sGaran.compareTo("")==0)
                    continue;
                
                /*Obtiene la unidad, si no hay mas datos que sea cadena vacia*/
                String sUnid;
                if(!stk.hasMoreTokens())
                    sUnid       = "";
                else
                    sUnid       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el peso unitario, si no hay mas datos que sea cadena vacia*/
                String sPes;
                if(!stk.hasMoreTokens())
                    sPes        = "";
                else
                    sPes        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio sugerido, si no hay mas datos que sea cadena vacia*/
                String sPreSug;
                if(!stk.hasMoreTokens())
                    sPreSug     = "";
                else
                    sPreSug     = stk.nextToken().trim().replace(",", "");                                                    
                
                /*Obtiene el costo actual, si no hay mas datos que sea cadena vacia*/
                String sCost;
                if(!stk.hasMoreTokens())
                    sCost       = "";
                else
                    sCost       = stk.nextToken().trim().replace(",", "");                                                                    
                
                /*Obtiene el tipo de cambio, si no hay mas datos que sea cadena vacia*/
                String sTipCam;
                if(!stk.hasMoreTokens())
                    sTipCam     = "";
                else
                    sTipCam     = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el campo vacio, si no hay mas datos que sea cadena vacia*/
                String sC;
                if(!stk.hasMoreTokens())
                    sC          = "";
                else
                    sC          = stk.nextToken().trim();                                                                    
                
                /*Obtiene la cantidad, si no hay mas datos que sea cadena vacia*/
                String sCant;
                if(!stk.hasMoreTokens())
                    sCant       = "0";
                else
                    sCant       = stk.nextToken().trim();                                                                    
                                
                /*Obtiene el importe, si no hay mas datos que sea cadena vacia*/
                String sImpo;
                if(!stk.hasMoreTokens())
                    sImpo       = "";
                else
                    sImpo       = stk.nextToken().trim().replace(",", "");                                                                    
                
                /*Obtiene el código del producto, si no hay mas datos que sea cadena vacia*/
                String sProd;
                if(!stk.hasMoreTokens())
                    sProd       = "";
                else
                    sProd       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando compra 4: " + sFol);
                                
                /*Obtiene la compra que tiene ese folio*/
                String sCodCom  = "";
                try
                {
                    sQ = "SELECT codcomp FROM comprs WHERE nodoc = '" + sFol + "'";	                    
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sCodCom = rs.getString("codcomp");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
                /*Actualiza la compra*/
                try 
                {                
                    sQ = "UPDATE partcomprs SET "
                            + "garan        = '" + sGaran + "',"
                            + "unid         = '" + sUnid + "', "
                            + "alma         = '" + sAlma + "', "
                            + "cost         = " + sCost + ", "
                            + "impo         = " + sImpo + ", "
                            + "cant         = " + sCant + ", "
                            + "recib        = " + sCant + ", "
                            + "codcom       = '" + sCodCom + "', "
                            + "tipcam       = " + sTipCam + " "
                            + "WHERE codcom = '" + sCodCom + "' AND prod = '" + sProd + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 {                      
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Abre el archivo creado de las compras 5*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("comp5.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el código del proveedor*/
                String sProv;
                if(!stk.hasMoreTokens())
                    sProv       = "";
                else
                    sProv       = stk.nextToken().trim().replace("'", "''").trim();                                                    
                
                /*Obtiene la moneda*/
                String sMon;
                if(!stk.hasMoreTokens())
                    sMon        = "";
                else
                    sMon        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando compra 5: " + sFol);
                
                /*Actualiza la compra*/
                try 
                {                
                    sQ = "UPDATE comprs SET "
                            + "prov         = '" + sProv + "', "                            
                            + "mon          = '" + sMon + "' "                            
                            + "WHERE nodoc  = '" + sFol + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
                    
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Borra los archivos*/
        new File("comp1.txt").delete();        
        new File("comp2.txt").delete();        
        new File("comp3.txt").delete();        
        new File("comp4.txt").delete();        
        new File("comp5.txt").delete();
                
    }/*Fin de private void vComp()*/
    

    /*Procesa las ventas*/
    private void vVta()
    {
        /*Carga el documento de las ventas 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTVta1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vta1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento de las ventas 2*/        
        try
        {
            p = PDDocument.load(new File(jTVta2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vta2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las ventas 3*/        
        try
        {
            p = PDDocument.load(new File(jTVta3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vta3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las ventas 4*/        
        try
        {
            p = PDDocument.load(new File(jTVta4.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vta4.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las ventas 5*/        
        try
        {
            p = PDDocument.load(new File(jTVta5.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("vta5.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                                                   
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;        
        ResultSet   rs;        
        String      sQ              = "";                              

        /*Borra todas las ventas*/
        try 
        {                
            sQ = "DELETE FROM vtas";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {              
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Borra las partidas de las ventas*/
        try 
        {                
            sQ = "DELETE FROM partvta";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Abre el archivo creado de las ventas 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vta1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Contiene el almacén de toda la venta*/
        String sAlma    = "";
        
        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene la fecha*/                
                String sFech;
                if(!stk.hasMoreTokens())
                    sFech       = "";
                else
                    sFech       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la fecha es cadena vacia entonces continua*/
                if(sFech.compareTo("")==0)
                    continue;
                
                /*Obtiene el tipo de movimiento que es, si no hay mas datos que sea cadena vacia*/
                String sTip;
                if(!stk.hasMoreTokens())
                    sTip       = "";
                else
                    sTip       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código del vendedor, si no hay mas datos que sea cadena vacia*/
                String sCodVend;
                if(!stk.hasMoreTokens())
                        sCodVend    = "";
                else
                    sCodVend    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el almacén, si no hay mas datos que sea cadena vacia*/                
                if(!stk.hasMoreTokens())
                    sAlma       = "";
                else
                    sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                                
                /*Obtiene el descuento, si no hay mas datos que sea cadena vacia*/
                String sDesc;
                if(!stk.hasMoreTokens())
                    sDesc       = "0";
                else
                    sDesc       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el total con impuesto, si no hay mas datos que sea cadena vacia*/                
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot  = "0";
                else
                    sTot        = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Obtiene el impuesto, si no hay mas datos que sea cadena vacia*/                
                String sImpue;
                if(!stk.hasMoreTokens())
                    sImpue      = "0";
                else
                    sImpue      = stk.nextToken().trim().replace("$", "").replace(",", "");
                                                
                /*Obtiene el neto, si no hay mas datos que sea cadena vacia*/                
                String sSubTot;
                if(!stk.hasMoreTokens())
                    sSubTot     = "0";
                else
                    sSubTot     = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Obtiene la moneda, si no hay mas datos que sea cadena vacia*/                
                String sMon;
                if(!stk.hasMoreTokens())
                    sMon        = "";
                else
                    sMon        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Contiene el día, mes y año*/
                String sDia;
                String sMes;
                String sAno;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFech,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                /*Si el mes es menor o igual a 9 entonces completalo con un 0*/
                if(Integer.parseInt(sMes)<=9)
                    sMes    = "0" + sMes;
                
                /*Si el día es menor o igual a 9 entonces completalo con un 0*/
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFech   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Determina el tipo de documento que será*/
                sTip    = "FAC";
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando venta con folio: " + sFol.trim());
                
                /*Comprueba si el folio ya existe*/                                
                boolean bSi = false;
                try
                {
                    sQ = "SELECT * FROM vtas WHERE norefer = '" + sFol.trim() + "'";
                    
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces coloca la bandera*/
                    if(rs.next())
                        bSi = true;
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
            
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                /*Si la moneda nacional es MN entonces que sea PESOS*/
                if(sMon.replace(".", "").compareTo("MN")==0)
                    sMon    = "PESOS";
                else
                    sMon    = "USD";
                
                /*Crea la consulta dependiendo de si ya existe la venta o no*/
                if(bSi)
                    sQ  = "UPDATE vtas SET subtot = subtot + " + sSubTot + ", impue = impue + " + sImpue + ", tot = tot +  " + sTot + " WHERE  norefer = '" + sFol + "'";
                else
                {
                    //Inserta en la base de datos la nueva venta
                    if(Star.iInsVtas(con, "FAC", sFol.trim(), "", "", sSubTot.replace("$", "").replace(",", ""), sImpue.replace("$", "").replace(",", ""), sTot.replace("$", "").replace(",", ""), "now()","'" + sFech + "'", "'" + sFech + "'", "'CO'", "0", "", sTip, "0", "", "", "", "1", sDesc.replace("$", "").replace(",", ""), "0", "1", "0", sCodVend, sMon, "1", "C", "", "", "", "", "", "", "", "", "", "", "", "", "S", "", "0", "0", "0", "0","", "")==-1)
                         return;
                }
                    
                if(bSi)
                /*Ejecuta la consulta*/
                try 
                {                                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);                    
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
                /*Resetea los totales*/
                sSubTot     = "0";
                sImpue      = "0";
                sTot        = "0";
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Abre el archivo creado de las ventas 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vta2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el código 1*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código 2, si no hay mas datos que sea cadena vacia*/
                String sCod2;
                if(!stk.hasMoreTokens())
                    sCod2       = "";
                else
                    sCod2       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la descripción, si no hay mas datos que sea cadena vacia*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip    = "";
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la descripción es cadena vacia entonces continua*/
                if(sDescrip.compareTo("")==0)
                    continue;
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando venta 2: " + sFol.trim());
                
                /*Obtiene la venta basandonos en el norefer*/                
                String sVta     = "";
                try
                {
                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "'";	                      
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sVta     = rs.getString("vta");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                //Si la venta es cadena vacia entonces continua
                if(sVta.compareTo("")==0)
                    continue;
                
                /*Inserta la partida*/
                try 
                {                
                    sQ = "INSERT INTO partvta(prod,            descrip,           vta,      tipdoc,    cant,   tipcam,     unid,        alma,          serprod,        comenser,   pre,    descu,  peps,           mon,        impo,       impue,       ueps,   codimpue) "
                               + "VALUES('" + sCod1 + "', '" + sDescrip + "', " + sVta + ", 'FAC',     0,      0,          '',     '" + sAlma + "',    '',             '',         0,      0,      ueps,           '',         0,          0,           0,      'IVA')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;
            
                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las ventas 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vta3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene la descripción*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip    = "";
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la garantía en días, si no hay mas datos que sea cadena vacia*/
                String sGaran;
                if(!stk.hasMoreTokens())
                    sGaran      = "";
                else
                    sGaran      = stk.nextToken().trim().replace("'", "''");                                                    

                /*Si la garantía es cadena vacia entonces continua*/
                if(sGaran.compareTo("")==0)
                    continue;
                
                /*Obtiene el peso unitario, si no hay mas datos que sea cadena vacia*/
                String sPes;
                if(!stk.hasMoreTokens())
                    sPes        = "";
                else
                    sPes        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio de lista, si no hay mas datos que sea cadena vacia*/
                String sPreList;
                if(!stk.hasMoreTokens())
                    sPreList    = "0";
                else
                    sPreList    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio sugerido, si no hay mas datos que sea cadena vacia*/
                String sPreSug;
                if(!stk.hasMoreTokens())
                    sPreSug     = "0";
                else
                    sPreSug     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código 1, si no hay mas datos que sea cadena vacia*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando venta 3: " + sFol.trim());
                
                /*Obtiene la venta basandonos en el norefer*/                
                String sVta     = "";
                try
                {
                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "'";	                                        
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sVta     = rs.getString("vta");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                //Si la venta es cadena vacia entonces continua
                if(sVta.compareTo("")==0)
                    continue;
                
                /*Actualiza la venta en la partda*/
                try 
                {                
                    sQ = "UPDATE partvta SET "
                            + "garan        = '" + sGaran + "' "                            
                            + "WHERE        vta = " + sVta + " AND prod = '" + sCod1.trim() + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las ventas 4*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vta4.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();
                
                /*Obtiene la moneda*/
                String sMon;
                if(!stk.hasMoreTokens())
                    sMon        = "";
                else
                    sMon        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio de lista de venta, si no hay mas datos que sea cadena vacia*/
                String sPreListVta;
                if(!stk.hasMoreTokens())
                    sPreListVta = "";
                else
                    sPreListVta = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si el precio de lista de venta es cadena vacia entonces continua*/
                if(sPreListVta.compareTo("")==0)
                    continue;
                
                /*Obtiene la cantidad, si no hay mas datos que sea cadena vacia*/
                String sCant;
                if(!stk.hasMoreTokens())
                    sCant       = "";
                else
                    sCant       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio unitario, si no hay mas datos que sea cadena vacia*/
                String sPreUnit;
                if(!stk.hasMoreTokens())
                    sPreUnit    = "";
                else
                    sPreUnit    = stk.nextToken().trim().replace(",", "");                                                    
                
                /*Obtiene el tipo de cambio, si no hay mas datos que sea cadena vacia*/
                String sTipCam;
                if(!stk.hasMoreTokens())
                    sTipCam     = "";
                else
                    sTipCam     = stk.nextToken().trim().replace(",", "");                                                                    
                
                /*Obtiene el el descuento, si no hay mas datos que sea cadena vacia*/
                String sDesc;
                if(!stk.hasMoreTokens())
                    sDesc       = "";
                else
                    sDesc       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el importe vacio, si no hay mas datos que sea cadena vacia*/
                String sImp;
                if(!stk.hasMoreTokens())
                    sImp        = "";
                else
                    sImp        = stk.nextToken().trim();                                                                    
                
                /*Obtiene el código 1, si no hay mas datos que sea cadena vacia*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "0";
                else
                    sCod1       = stk.nextToken().trim();                                                                    
                                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando venta 4: " + sFol.trim());

                /*Obtiene la venta basandonos en el norefer*/                
                String sVta     = "";
                try
                {
                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "'";	                                        
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sVta     = rs.getString("vta");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                //Si la venta es cadena vacia entonces continua
                if(sVta.compareTo("")==0)
                    continue;
                
                /*Actualiza la partida de la venta*/
                try 
                {                
                    sQ = "UPDATE partvta SET "                            
                            + "cant         = " + sCant.replace(",", "") + ", "
                            + "cantentre    = " + sCant.replace(",", "") + ", "
                            + "pre          = " + sPreUnit.replace(",", "") + ", "
                            + "descu        = " + sDesc + ", "
                            + "impo         = " + sImp.replace(",", "") + " "                            
                            + "WHERE vta    = " + sVta + " AND prod = '" + sCod1 + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Abre el archivo creado de las ventas 5*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("vta5.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el el asiento contable*/
                String sAsien;
                if(!stk.hasMoreTokens())
                    sAsien      = "";
                else
                    sAsien      = stk.nextToken().trim().replace("'", "''").trim();                                                    
                
                /*Obtiene es estatus*/
                String sEstatu;
                if(!stk.hasMoreTokens())
                    sEstatu     = "";
                else
                    sEstatu     = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Si el estatus es cadena vacia entonces continua*/
                if(sEstatu.compareTo("")==0)
                    continue;
                
                /*Obtiene es código 1*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Obtiene el total*/
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot        = "";
                else
                    sTot        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Obtiene es código del cliente*/
                String sCli;
                if(!stk.hasMoreTokens())
                    sCli        = "";
                else
                    sCli        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    

                /*Obtiene la unidad*/
                String sUnid;
                if(!stk.hasMoreTokens())
                    sUnid       = "";
                else
                    sUnid       = stk.nextToken().trim().replace("'", "''").trim();                                                    
                
                /*Determina el estatus de la venta*/
                if(sEstatu.compareTo("A")==0)
                    sEstatu         = "CO";                
                else
                    sEstatu         = "CA"; 
                
                //Declara variables locales
                String sCarg ="0";
                String sAbon ="0";
                
                //Se determina el estatus 
                if(sEstatu.compareTo("CO")==0)
                {
                    try
                    {

                        sQ = "SELECT norefer,SUM(carg) AS cargo,SUM(abon) AS abono FROM cxc WHERE norefer = '" + sFol.trim() + "' GROUP BY norefer";	                                        
                        st = con.createStatement();
                        rs = st.executeQuery(sQ);
                        /*Si hay datos entonces obtiene el resultado*/
                        if(rs.next())
                        {
                            sCarg     = rs.getString("cargo");
                            sAbon     = rs.getString("abono");
                        }

                    }
                    catch(SQLException e)
                    {
                        /*Esconde la forma de loading*/
                        if(Star.lCargGral!=null)
                            Star.lCargGral.setVisible(false);

                        //Cierra la base de datos
                        if(Star.iCierrBas(con)==-1)
                            return;

                        /*Agrega en el log*/
                        Login.vLog(e.getMessage());

                        /*Mensajea y regresa*/
                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                        return;
                    }
                    
                    //Si el cargo es igual que el abono esta completa la venta si no es pendiente
                    if(Double.parseDouble(sCarg)-Double.parseDouble(sAbon)<=0)
                        sEstatu         = "CO"; 
                    else
                        sEstatu         = "PE";

                }//Fin if(sEstatu.compareTo("CO")==0)
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando venta 5: " + sFol.trim());
                
                /*Obtiene la venta basandonos en el norefer*/                
                String sVta     = "";
                try
                {
                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "'";	                                        
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sVta     = rs.getString("vta");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                //Si la venta es cadena vacia entonces continua
                if(sVta.compareTo("")==0)
                    continue;
                
                /*Actualiza la venta*/
                try 
                {                
                    sQ = "UPDATE vtas SET "
                            + "estad        = '" + sEstatu + "', "
                            + "codemp       = '" + sCli + "' "
                            + "WHERE vta    = " + sVta;                                                            
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

                /*Actualiza la partida*/
                try 
                {                
                    sQ = "UPDATE partvta SET "                            
                            + "unid         = '" + sUnid + "' "
                            + "WHERE vta    = " + sVta + " AND prod = '" + sCod1 + "'";                                                            
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;            
        }

        /*Borra los archivos*/
        new File("vta1.txt").delete();        
        new File("vta2.txt").delete();        
        new File("vta3.txt").delete();        
        new File("vta4.txt").delete();        
        new File("vta5.txt").delete();
                
    }/*Fin de private void vVta()*/
    
    
    /*Procesa las cotizaciones*/
    private void vCot()
    {
        /*Carga el documento de las cotizaciones 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCot1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cot1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento de las cotizaciones 2*/        
        try
        {
            p = PDDocument.load(new File(jTCot2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cot2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las cotizaciones 3*/        
        try
        {
            p = PDDocument.load(new File(jTCot3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cot3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las cotizaciones 4*/        
        try
        {
            p = PDDocument.load(new File(jTCot4.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cot4.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las cotizaciones 5*/        
        try
        {
            p = PDDocument.load(new File(jTCot5.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cot5.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                                                   
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;        
        ResultSet   rs;        
        String      sQ              = "";                              

        /*Borra todas las cotizaciones*/
        try 
        {                
            sQ = "DELETE FROM cots";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {                        
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Borra las partidas de las cotizaciones*/
        try 
        {                
            sQ = "DELETE FROM partcot";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
        
        /*Abre el archivo creado de las cotizaciones 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cot1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Contiene el almacén de toda la cotización*/
        String sAlma    = "";
                
        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene la fecha*/
                String sFech;
                if(!stk.hasMoreTokens())
                    sFech       = "";
                else
                    sFech       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la fecha es cadena vacia entonces continua*/
                if(sFech.compareTo("")==0)
                    continue;
                
                /*Obtiene el tipo de movimiento que es, si no hay mas datos que sea cadena vacia*/
                String sTip;
                if(!stk.hasMoreTokens())
                    sTip       = "";
                else
                    sTip       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código del vendedor, si no hay mas datos que sea cadena vacia*/
                String sCodVend;
                if(!stk.hasMoreTokens())
                        sCodVend    = "";
                else
                    sCodVend    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el almacén, si no hay mas datos que sea cadena vacia*/                
                if(!stk.hasMoreTokens())
                    sAlma       = "";
                else
                    sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                                
                /*Obtiene el descuento, si no hay mas datos que sea cadena vacia*/
                String sDesc;
                if(!stk.hasMoreTokens())
                    sDesc       = "0";
                else
                    sDesc       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el total con impuesto, si no hay mas datos que sea cadena vacia*/                
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot  = "0";
                else
                    sTot        = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Obtiene el impuesto, si no hay mas datos que sea cadena vacia*/                
                String sImpue;
                if(!stk.hasMoreTokens())
                    sImpue      = "0";
                else
                    sImpue      = stk.nextToken().trim().replace("$", "").replace(",", "");
                                                
                /*Obtiene el neto, si no hay mas datos que sea cadena vacia*/                
                String sSubTot;
                if(!stk.hasMoreTokens())
                    sSubTot     = "0";
                else
                    sSubTot     = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Contiene el día, mes y año*/
                String sDia;
                String sMes;
                String sAno;
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFech,"/");
                sDia    = stkM.nextToken();
                sMes    = stkM.nextToken();
                sAno    = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFech   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Determina el tipo de documento que será*/
                sTip    = "COT";
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cotización con folio: " + sFol.trim());
                
                /*Comprueba si el folio ya existe*/                                
                boolean bSi = false;
                try
                {
                    sQ = "SELECT codcot FROM cots WHERE codcot = '" + sFol.trim() + "'";	                                                            
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces coloca la bandera*/
                    if(rs.next())
                        bSi = true;
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                /*Crea la consulta dependiendo de si ya existe la cotización o no*/
                if(bSi)
                    sQ  = "UPDATE cots SET subtot = subtot + " + sSubTot + ", impue = impue + " + sImpue + ", tot = tot +  " + sTot + " WHERE  codcot = '" + sFol + "'";
                else
                    sQ = "INSERT INTO cots(codcot,                  falt,            estac,             totdescu,      tot,           impue,                           subtot,      noser,       mon,    codemp,     ser,        estad,  observ,        sucu,                   nocaj,               totcost,       tipcam,     proy,   subtotgral, subtotgral2,    manobr, subtotmat,  subtotmat2,     descrip) "
                            + "VALUES('" + sFol.trim() + "', '" +   sFech + "', '" + sCodVend + "', " + sDesc + ", " + sTot + "," +   sImpue.replace(",", "") + ", " + sSubTot + ", 'COT',       '',     '',         '',         'CO',   '',     '" +   Star.sSucu + "', '" +   Star.sNoCaj + "',    0,             1,          '',     0,          0,              0,      0,          0,              '')";                    
                
                /*Ejecuta la consulta*/
                try 
                {                                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
                /*Resetea los totales*/
                sSubTot     = "0";
                sImpue      = "0";
                sTot        = "0";
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Abre el archivo creado de las cotizaciones 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cot2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el código 1*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código 2, si no hay mas datos que sea cadena vacia*/
                String sCod2;
                if(!stk.hasMoreTokens())
                    sCod2       = "";
                else
                    sCod2       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la descripción, si no hay mas datos que sea cadena vacia*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip    = "";
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la descripción es cadena vacia entonces continua*/
                if(sDescrip.compareTo("")==0)
                    continue;
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cotización 2: " + sFol.trim());
                
                /*Actualiza la cotización*/
                try 
                {                
                    sQ = "INSERT INTO partcot(prod,            descrip,            codcot,     cant,   tipcam,     unid,        alma,          serprod,        comenser,   pre,    mon,        impo,       impueimpo,   pre2,   desc1,  desc2,  desc3,  desc4, desc5,   impo2,  impueval,   impueimpo2,     codimpue) "
                               + "VALUES('" + sCod1 + "', '" + sDescrip + "', '" + sFol + "',  0,      0,          '',     '" + sAlma + "',    '',             '',         0,      '',         0,          0,           0,      0,      0,      0,      0,      0,      0,      16,         0,              'IVA')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las cotizaciones 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cot3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene la descripción*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip    = "";
                else
                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la garantía en días, si no hay mas datos que sea cadena vacia*/
                String sGaran;
                if(!stk.hasMoreTokens())
                    sGaran      = "";
                else
                    sGaran      = stk.nextToken().trim().replace("'", "''");                                                    

                /*Si la garantía es cadena vacia entonces continua*/
                if(sGaran.compareTo("")==0)
                    continue;
                
                /*Obtiene el peso unitario, si no hay mas datos que sea cadena vacia*/
                String sPes;
                if(!stk.hasMoreTokens())
                    sPes        = "";
                else
                    sPes        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio de lista, si no hay mas datos que sea cadena vacia*/
                String sPreList;
                if(!stk.hasMoreTokens())
                    sPreList    = "0";
                else
                    sPreList    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio sugerido, si no hay mas datos que sea cadena vacia*/
                String sPreSug;
                if(!stk.hasMoreTokens())
                    sPreSug     = "0";
                else
                    sPreSug     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código 1, si no hay mas datos que sea cadena vacia*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando cotización 3: " + sFol.trim());
                
                /*Actualiza la cotización en la partda*/
                try 
                {                
                    sQ = "UPDATE partcot SET "
                            + "garan        = '" + sGaran + "' "                            
                            + "WHERE codcot = '" + sFol + "' AND prod = '" + sCod1.trim() + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las cotizaciones 4*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cot4.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();
                
                /*Obtiene la moneda*/
                String sMon;
                if(!stk.hasMoreTokens())
                    sMon        = "";
                else
                    sMon        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio de lista de venta, si no hay mas datos que sea cadena vacia*/
                String sPreListVta;
                if(!stk.hasMoreTokens())
                    sPreListVta = "";
                else
                    sPreListVta = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si el precio de lista de venta es cadena vacia entonces continua*/
                if(sPreListVta.compareTo("")==0)
                    continue;
                
                /*Obtiene la cantidad, si no hay mas datos que sea cadena vacia*/
                String sCant;
                if(!stk.hasMoreTokens())
                    sCant       = "";
                else
                    sCant       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio unitario, si no hay mas datos que sea cadena vacia*/
                String sPreUnit;
                if(!stk.hasMoreTokens())
                    sPreUnit    = "";
                else
                    sPreUnit    = stk.nextToken().trim().replace(",", "");                                                    
                
                /*Obtiene el tipo de cambio, si no hay mas datos que sea cadena vacia*/
                String sTipCam;
                if(!stk.hasMoreTokens())
                    sTipCam     = "";
                else
                    sTipCam     = stk.nextToken().trim().replace(",", "");                                                                    
                
                /*Obtiene el el descuento, si no hay mas datos que sea cadena vacia*/
                String sDesc;
                if(!stk.hasMoreTokens())
                    sDesc       = "";
                else
                    sDesc       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el importe vacio, si no hay mas datos que sea cadena vacia*/
                String sImp;
                if(!stk.hasMoreTokens())
                    sImp        = "";
                else
                    sImp        = stk.nextToken().trim();                                                                    
                
                /*Obtiene el código 1, si no hay mas datos que sea cadena vacia*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "0";
                else
                    sCod1       = stk.nextToken().trim();                                                                    
                                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando cotización 4: " + sFol.trim());

                /*Si el importe es cadena vacia entonces regresa*/
                if(sImp.compareTo("")==0)
                    continue;
                
                /*Actualiza la partida de la cotizació*/
                try 
                {                
                    sQ = "UPDATE partcot SET "                            
                            + "cant         = " + sCant.replace(",", "") + ", "                            
                            + "pre          = " + sPreUnit.replace(",", "") + ", "
                            + "desc1        = " + sDesc + ", "
                            + "impo         = " + sImp.replace(",", "") + " "                            
                            + "WHERE codcot = '" + sFol + "' AND prod = '" + sCod1 + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

                /*Actualiza la moneda de la cotización*/
                try 
                {                
                    sQ = "UPDATE cots SET "
                            + "mon          = '" + sMon.replace(".", "") + "' "                            
                            + "WHERE codcot = '" + sFol + "'";                                        
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Abre el archivo creado de las cotizaciones 5*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cot5.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Si el segundo carácter es un dígito entonces continua*/
                if(Character.isDigit(sLec.charAt(1)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el el asiento contable*/
                String sAsien;
                if(!stk.hasMoreTokens())
                    sAsien      = "";
                else
                    sAsien      = stk.nextToken().trim().replace("'", "''").trim();                                                    
                
                /*Obtiene es estatus*/
                String sEstatu;
                if(!stk.hasMoreTokens())
                    sEstatu     = "";
                else
                    sEstatu     = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Si el estatus es cadena vacia entonces continua*/
                if(sEstatu.compareTo("")==0)
                    continue;
                
                /*Obtiene es código 1*/
                String sCod1;
                if(!stk.hasMoreTokens())
                    sCod1       = "";
                else
                    sCod1       = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Obtiene el total*/
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot        = "";
                else
                    sTot        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
                
                /*Obtiene es código del cliente*/
                String sCli;
                if(!stk.hasMoreTokens())
                    sCli        = "";
                else
                    sCli        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    

                /*Obtiene la unidad*/
                String sUnid;
                if(!stk.hasMoreTokens())
                    sUnid       = "";
                else
                    sUnid       = stk.nextToken().trim().replace("'", "''").trim();                                                    
                
                /*Determina el estatus de la venta*/
                if(sEstatu.compareTo("A")==0)
                    sEstatu         = "CO";                
                else
                    sEstatu         = "CA";                
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando cotización 5: " + sFol.trim());

                /*Actualiza la cotizción*/
                try 
                {                
                    sQ = "UPDATE cots SET "
                            + "estad        = '" + sEstatu + "', "
                            + "codemp       = '" + sCli + "' "
                            + "WHERE codcot = '" + sFol + "'";                                                            
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

                /*Actualiza la partida*/
                try 
                {                
                    sQ = "UPDATE partcot SET "                            
                            + "unid         = '" + sUnid + "' "
                            + "WHERE codcot = '" + sFol + "' AND prod = '" + sCod1 + "'";                                                            
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Borra los archivos*/
        new File("cot1.txt").delete();        
        new File("cot2.txt").delete();        
        new File("cot3.txt").delete();        
        new File("cot4.txt").delete();        
        new File("cot5.txt").delete();
                
    }/*Fin de private void vCot()*/
    
    
    /*Procesa las remisiones*/
    private void vRem()
    {
        /*Carga el documento de las remisiones 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTR1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("rem1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento de las remisiones 2*/        
        try
        {
            p = PDDocument.load(new File(jTR2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("rem2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las remisones 3*/        
        try
        {
            p = PDDocument.load(new File(jTR3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("rem3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las remisiones 4*/        
        try
        {
            p = PDDocument.load(new File(jTR4.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("rem4.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento de las remisiones 5*/        
        try
        {
            p = PDDocument.load(new File(jTR5.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("rem5.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                                                   
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;        
        ResultSet   rs;        
        String      sQ              = "";                              

        /*Borra las partidas de las remisiones*/
        try 
        {                
            sQ = "DELETE FROM partvta WHERE tipdoc = 'REM'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         {              
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
                
        /*Borra todas las remisiones*/
        try 
        {                
            sQ = "DELETE FROM vtas WHERE tipdoc = 'REM'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               
                
        /*Abre el archivo creado de las remisiones 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("rem1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Contiene el almacén de toda la remisión*/
        String sAlma    = "";
                
        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
                
                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene la fecha*/
                String sFech;
                if(!stk.hasMoreTokens())
                    sFech       = "";
                else
                    sFech       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Si la fecha es cadena vacia entonces continua*/
                if(sFech.compareTo("")==0)
                    continue;
                
                /*Obtiene el tipo de movimiento que es, si no hay mas datos que sea cadena vacia*/
                String sTip;
                if(!stk.hasMoreTokens())
                    sTip       = "";
                else
                    sTip       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código del vendedor, si no hay mas datos que sea cadena vacia*/
                String sCodVend;
                if(!stk.hasMoreTokens())
                        sCodVend    = "";
                else
                    sCodVend    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el almacén, si no hay mas datos que sea cadena vacia*/                
                if(!stk.hasMoreTokens())
                    sAlma       = "";
                else
                    sAlma       = stk.nextToken().trim().replace("'", "''");                                                    
                                
                /*Obtiene el descuento, si no hay mas datos que sea cadena vacia*/
                String sDesc;
                if(!stk.hasMoreTokens())
                    sDesc       = "0";
                else
                    sDesc       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el subtotal, si no hay mas datos que sea cadena vacia*/                
                String sSubTot;
                if(!stk.hasMoreTokens())
                    sSubTot     = "0";
                else
                    sSubTot     = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Obtiene el impuesto, si no hay mas datos que sea cadena vacia*/                
                String sImpue;
                if(!stk.hasMoreTokens())
                    sImpue      = "0";
                else
                    sImpue      = stk.nextToken().trim().replace("$", "").replace(",", "");
                                                
                /*Obtiene el total, si no hay mas datos que sea cadena vacia*/                
                String sTot;
                if(!stk.hasMoreTokens())
                    sTot        = "0";
                else
                    sTot        = stk.nextToken().trim().replace("$", "").replace(",", "");
                
                /*Descompone la cadena en tokens para obtener la fecha correcta*/                
                java.util.StringTokenizer stkM  = new java.util.StringTokenizer(sFech,"/");
                String sDia     = stkM.nextToken();
                String sMes     = stkM.nextToken();
                String sAno     = stkM.nextToken();
                
                /*Determina el número del mes que será de todo el año*/
                if(sMes.compareTo("ENE")==0)
                    sMes    = "01";
                else if(sMes.compareTo("FEB")==0)
                    sMes    = "02";
                else if(sMes.compareTo("MAR")==0)
                    sMes    = "03";
                else if(sMes.compareTo("ABR")==0)
                    sMes    = "04";
                else if(sMes.compareTo("MAY")==0)
                    sMes    = "05";
                else if(sMes.compareTo("JUN")==0)
                    sMes    = "06";
                else if(sMes.compareTo("JUL")==0)
                    sMes    = "07";
                else if(sMes.compareTo("AGO")==0)
                    sMes    = "08";
                else if(sMes.compareTo("SEP")==0)
                    sMes    = "09";
                else if(sMes.compareTo("OCT")==0)
                    sMes    = "10";
                else if(sMes.compareTo("NOV")==0)
                    sMes    = "11";
                else if(sMes.compareTo("DIC")==0)
                    sMes    = "12";
                
                //Completa el día correcto
                if(Integer.parseInt(sDia)<=9)
                    sDia    = "0" + sDia;
                
                /*Completa la fecha correctamente*/
                sFech   = "20" + sAno + "-" + sMes + "-" + sDia;
                
                /*Determina el tipo de documento que será*/
                sTip    = "REM";
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando remisión con folio: " + sFol.trim());
                
                //Inserta en la base de datos la nueva venta
                if(Star.iInsVtas(con, "REM", sFol.trim(), "", "", sSubTot.replace("$", "").replace(",", ""), sImpue.replace("$", "").replace(",", ""), sTot.replace("$", "").replace(",", ""), "now()", "'" + sFech + "'","'" + sFech + "'", "'CO'", "0", "", sTip, "0", "", "", "", "0", sDesc.replace("$", "").replace(",", ""), "0", "1", "0", sCodVend, "", "1", "C", "", "", "", "", "", "", "", "", "", "", "", "", "S", "", "0", "0", "0", "0","", "")==-1)
                     return;
                                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Abre el archivo creado de las remisiones 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("rem2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es la tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el folio*/
                String sFol     = stk.nextToken().trim();

                /*Obtiene el código del cliente*/
                String sCli;
                if(!stk.hasMoreTokens())
                    sCli        = "";
                else
                    sCli        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el estatus*/
                String sEstatu;
                if(!stk.hasMoreTokens())
                    sEstatu     = "CO";
                else
                    sEstatu     = stk.nextToken().trim();                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando remisión 2: " + sFol.trim());
                
                /*Obtiene la venta basandonos en el norefer*/                
                String sVta     = "";
                try
                {
                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "' AND tipdoc = 'REM'";	                                                            
                    st = con.createStatement();
                    rs = st.executeQuery(sQ);
                    /*Si hay datos entonces obtiene el resultado*/
                    if(rs.next())
                        sVta     = rs.getString("vta");
                }
                catch(SQLException e)
                {
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }                
                
                /*Actualiza la remisión*/
                try 
                {                
                    sQ = "UPDATE vtas SET "
                            + "codemp       = '" + sCli + "' "
                            + "WHERE vta    = " + sVta;                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las remisiones 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("rem3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

//        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
//        try
//        {            
//            /*Recorre todo el fichero*/
//            String sLec;
//            while((sLec = read.readLine())!=null) 
//            {
//                /*Si el primer carácter no es la tubería entonces continua*/
//                if(sLec.charAt(0)!='|')
//                    continue;
//
//                /*Separa la línea por | para recorrerla*/
//                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
//
//                /*Obtiene el folio*/
//                String sFol     = stk.nextToken().trim();
//
//                /*Obtiene el código del producto, si no hay mas datos que sea cadena vacia*/
//                String sProd;
//                if(!stk.hasMoreTokens())
//                    sProd       = "";
//                else
//                    sProd       = stk.nextToken().trim().replace("'", "''");                                                    
//                
//                /*Obtiene la descripción*/
//                String sDescrip;
//                if(!stk.hasMoreTokens())
//                    sDescrip    = "";
//                else
//                    sDescrip    = stk.nextToken().trim().replace("'", "''");                                                    
//                                
//                /*Muestra lo que se esta insertando*/
//                Star.lCargGral.jTInf.setText("Insertando remisión 3: " + sFol.trim());
//                
//                /*Obtiene la venta basandonos en el norefer*/                
//                String sVta     = "";
//                try
//                {
//                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "' AND tipdoc = 'REM'";	                                                            
//                    st = con.createStatement();
//                    rs = st.executeQuery(sQ);
//                    /*Si hay datos entonces obtiene el resultado*/
//                    if(rs.next())
//                        sVta     = rs.getString("vta");
//                }
//                catch(SQLException e)
//                {
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega enel log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }                
//                
//                /*Si la venta es cadena vacia entonces continua*/
//                if(sVta.compareTo("")==0)
//                    continue;
//                
//                /*Inserta la partida de la remisión*/                
//                try 
//                {                
//                    sQ = "INSERT INTO partvta(prod,            descrip,           vta,      tipdoc,    cant,   tipcam,     unid,   alma,  serprod,        comenser,   pre,    descu,  peps,           mon,        impo,       impue,       ueps,    codimpue) "
//                               + "VALUES('" + sProd + "', '" + sDescrip + "', " + sVta + ", 'REM',     0,      0,          '',     '',    '',             '',         0,      0,      ueps,           '',         0,          0,           0,       'IVA')";                    
//                    st = con.createStatement();
//                    st.executeUpdate(sQ);
//                 }
//                 catch(SQLException | HeadlessException e) 
//                 { 
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega en el log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }
//
//            }/*Fin de while((sLec = read.readLine())!=null) */
//        }   
//        catch(IOException | NumberFormatException | HeadlessException e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega enel log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
//            return;
//        }                    
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de las remisiones 4*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("rem4.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

//        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
//        try
//        {            
//            /*Recorre todo el fichero*/
//            String sLec;
//            while((sLec = read.readLine())!=null) 
//            {
//                /*Si el primer carácter no es la tubería entonces continua*/
//                if(sLec.charAt(0)!='|')
//                    continue;
//
//                /*Separa la línea por | para recorrerla*/
//                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
//
//                /*Obtiene el folio*/
//                String sFol     = stk.nextToken().trim();
//                
//                /*Obtiene el producto*/
//                String sProd;
//                if(!stk.hasMoreTokens())
//                    sProd       = "";
//                else
//                    sProd       = stk.nextToken().trim().replace("'", "''");                                                    
//                
//                /*Si el código del producto es cadena vacia entonces continua*/
//                if(sProd.compareTo("")==0)
//                    continue;
//                
//                /*Obtiene la garantía en días, si no hay mas datos que sea cadena vacia*/
//                String sGaran;
//                if(!stk.hasMoreTokens())
//                    sGaran      = "";
//                else
//                    sGaran      = stk.nextToken().trim().replace("'", "''");                                                    
//                
//                /*Obtiene el precio unitario, si no hay mas datos que sea cadena vacia*/
//                String sPreUni;
//                if(!stk.hasMoreTokens())
//                    sPreUni     = "";
//                else
//                    sPreUni     = stk.nextToken().trim().replace("'", "''");                                                    
//                
//                /*Obtiene el precio de lista, si no hay mas datos que sea cadena vacia*/
//                String sPreList;
//                if(!stk.hasMoreTokens())
//                    sPreList    = "";
//                else
//                    sPreList    = stk.nextToken().trim().replace(",", "");                                                    
//                
//                /*Obtiene el precio sugerido, si no hay mas datos que sea cadena vacia*/
//                String sPreSug;
//                if(!stk.hasMoreTokens())
//                    sPreSug     = "";
//                else
//                    sPreSug     = stk.nextToken().trim().replace(",", "");                                                                    
//                
//                /*Obtiene el precio de lista de venta, si no hay mas datos que sea cadena vacia*/
//                String sPreListVta;
//                if(!stk.hasMoreTokens())
//                    sPreListVta = "";
//                else
//                    sPreListVta = stk.nextToken().trim().replace("'", "''");                                                                    
//                
//                /*Muestra lo que se esta actualizando*/
//                Star.lCargGral.jTInf.setText("Actualizando remisión 4: " + sFol.trim());
//
//                /*Obtiene la venta basandonos en el norefer*/                
//                String sVta     = "";
//                try
//                {
//                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "' AND tipdoc = 'REM'";	                                        
//                    st = con.createStatement();
//                    rs = st.executeQuery(sQ);
//                    /*Si hay datos entonces obtiene el resultado*/
//                    if(rs.next())
//                        sVta     = rs.getString("vta");
//                }
//                catch(SQLException e)
//                {
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega enel log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }                
//                
//                /*Actualiza la partida de la remisión*/
//                try 
//                {                
//                    sQ = "UPDATE partvta SET "
//                            + "garan        = '" + sGaran + "',"
//                            + "pre          = " + sPreList + " "
//                            + "WHERE vta    = " + sVta + " AND prod = '" + sProd + "'";                                        
//                    st = con.createStatement();
//                    st.executeUpdate(sQ);
//                 }
//                 catch(SQLException | HeadlessException e) 
//                 { 
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega en el log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }
//
//            }/*Fin de while((sLec = read.readLine())!=null) */
//        }   
//        catch(IOException | NumberFormatException | HeadlessException e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega enel log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
//            return;
//        }                    
        
        /*Abre el archivo creado de las remisiones 5*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("rem5.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

//        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
//        try
//        {            
//            /*Recorre todo el fichero*/
//            String sLec;
//            while((sLec = read.readLine())!=null) 
//            {
//                /*Si el primer carácter no es la tubería entonces continua*/
//                if(sLec.charAt(0)!='|')
//                    continue;
//
//                /*Separa la línea por | para recorrerla*/
//                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");
//
//                /*Obtiene el folio*/
//                String sFol     = stk.nextToken().trim();
//
//                /*Obtiene el producto*/
//                String sProd;
//                if(!stk.hasMoreTokens())
//                    sProd       = "";
//                else
//                    sProd       = stk.nextToken().trim().replace("'", "''").trim();                                                    
//            
//                /*Si el código del producto es cadena vacia entonces continua*/
//                if(sProd.compareTo("")==0)
//                    continue;
//                
//                /*Obtiene la cantidad*/
//                String sCant;
//                if(!stk.hasMoreTokens())
//                    sCant       = "";
//                else
//                    sCant       = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
//                
//                /*Obtiene el tipo de cambio*/
//                String sTipCam;
//                if(!stk.hasMoreTokens())
//                    sTipCam     = "";
//                else
//                    sTipCam     = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
//                
//                /*Obtiene la unidad*/
//                String sUnid;
//                if(!stk.hasMoreTokens())
//                    sUnid       = "";
//                else
//                    sUnid       = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
//                
//                /*Obtiene la moneda*/
//                String sMon;
//                if(!stk.hasMoreTokens())
//                    sMon        = "";
//                else
//                    sMon        = stk.nextToken().trim().replace("'", "''").trim().replace(".", "");                                                    
//
//                /*Obtiene el precio unitario*/
//                String sPreUnit;
//                if(!stk.hasMoreTokens())
//                    sPreUnit    = "0";
//                else
//                    sPreUnit    = stk.nextToken().trim().replace("'", "''").trim();                                                    
//                
//                /*Obtiene el importe*/
//                String sImpo;
//                if(!stk.hasMoreTokens())
//                    sImpo       = "0";
//                else
//                    sImpo       = stk.nextToken().trim().replace("'", "''").trim();                                                    
//                
//                /*Muestra lo que se esta insertando*/
//                Star.lCargGral.jTInf.setText("Actualizando remisión 5: " + sFol.trim());
//
//                /*Obtiene la venta basandonos en el norefer*/                
//                String sVta     = "";
//                try
//                {
//                    sQ = "SELECT vta FROM vtas WHERE norefer = '" + sFol.trim() + "' AND tipdoc = 'REM'";	                                        
//                    st = con.createStatement();
//                    rs = st.executeQuery(sQ);
//                    /*Si hay datos entonces obtiene el resultado*/
//                    if(rs.next())
//                        sVta     = rs.getString("vta");
//                }
//                catch(SQLException e)
//                {
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega enel log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }                
//                
//                /*Actualiza la venta*/
//                try 
//                {                
//                    sQ = "UPDATE partvta SET "
//                            + "mon          = '" + sMon.replace(".", "") + "',"
//                            + "cant         = " + sCant.replace(",", "") + ", "
//                            + "cantentre    = " + sCant.replace(",", "") + ", "
//                            + "pre          = " + sPreUnit.replace(",", "") + ", "                            
//                            + "impo         = " + sImpo.replace(",", "") + " "                            
//                            + "WHERE vta    = " + sVta + " AND prod = '" + sProd + "'";                                        
//                    st = con.createStatement();
//                    st.executeUpdate(sQ);
//                 }
//                 catch(SQLException | HeadlessException e) 
//                 { 
//                    /*Cierra la base de datos*/
//                    try           
//                    {
//                        con.close();
//                    }
//                    catch(SQLException ex)
//                    {
//                        /*Agrega en el log*/
//                        Login.vLog(ex.getMessage());
//
//                        /*Mensajea y regresa*/   
//                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
//                        return;
//                    }
//
//                    /*Esconde la forma de loading*/
//                    if(Star.lCargGral!=null)
//                        Star.lCargGral.setVisible(false);
//
//                    /*Agrega en el log*/
//                    Login.vLog(e.getMessage());
//
//                    /*Mensajea y regresa*/
//                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
//                    return;
//                }
//                
//            }/*Fin de while((sLec = read.readLine())!=null) */
//        }   
//        catch(IOException | NumberFormatException | HeadlessException e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega enel log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
//            return;
//        }                    
//        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Borra los archivos*/
        new File("rem1.txt").delete();        
        new File("rem2.txt").delete();        
        new File("rem3.txt").delete();        
        new File("rem4.txt").delete();        
        new File("rem5.txt").delete();
                
    }/*Fin de private void vRem()*/
    
    
    /*Obtiene el consecutivo de la compra por la serie*/
    private String sGetComp(Connection con, String sSer)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Obtiene el consecutivo de la serie*/        
        String sConsec      = "";
        try
        {
            sQ = "SELECT IFNULL(MAX(consec),0) AS consec FROM consecs WHERE tip = 'COMP' AND ser = '" + sSer + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces obtiene el resultado*/
            if(rs.next())
                sConsec = rs.getString("consec");
        }
        catch(SQLException e)
        {            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
        
        /*Aumenta en uno el consecutivo de la serie*/
        try 
        {                
            sQ = "UPDATE consecs SET "
                    + "consec       = consec + 1 "
                    + "WHERE tip    = 'COMP' AND ser = '" + sSer + "'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }               
        
        /*Devuelve el resultado*/
        return sSer + sConsec;
        
    }/*Fin de private String sGetComp(Connection con, String sSer)*/
    
    
    /*Función para sincronizar los correos electrónicos de los clientes*/
    private void vCliCo()
    {
        /*Carga el documento de correos clientes*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCliCo.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("corrcli.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
         
        /*Abre el archivo creado de CXC*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("corrcli.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar los registros en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCli    = stk.nextToken().trim();

                /*Obtiene el correo, si no hay mas datos que sea cadena vacia*/
                String sCo;
                if(!stk.hasMoreTokens())
                    sCo        = "";
                else
                    sCo        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Actualizando correo de cliente: " + sCli.trim());

                /*Declara variables de la base de datos*/
                Statement   st;                
                String      sQ              = "";                              

                /*Actualiza el correo del cliente*/
                try 
                {                
                    sQ = "UPDATE emps SET co1 = '" + sCo + "' WHERE codemp = '" + sCli + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException ex) 
                 { 
                     //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(ex.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + ex.getMessage(), "Error BD", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
                    return;
                 }
                
            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Borra el archivo*/
        new File("corrcli.txt").delete();        
        
//        /*Abre el archivo de correos de los clientes*/
//        FileInputStream fis;
//        try
//        {
//            fis = new FileInputStream(new File(jTCli6.getText().trim()));
//        }
//        catch(Exception e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
//            return;
//        }        
//        
//        /*Variable que contendrá toda la información del fichero*/
//        String sInfo    =   "";
//        
//        /*Lee todo el archivo de correos de los clientes*/
//        try
//        {            
//            /*Recorre todo el fichero*/
//            char cH;
//            while(fis.available()>0) 
//            {
//                /*Lee el carácter*/
//                cH = (char) fis.read();
//                
//                /*Muestra lo que se esta procesando*/                                
//                Star.lCargGral.jTInf.setText("Procesando: " + fis.available());
//                
//                /*Si el no carácter es válido entonces*/
//                if(!Character.isAlphabetic(cH) && !Character.isDigit(cH))
//                {
//                    /*Completa la cadena con un espacio y continua*/                    
//                    sInfo   += " ";
//                    continue;
//                }
//                
//                /*Completa la cadena*/
//                sInfo   += cH;
//            }
//        }   
//        catch(Exception e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
//            return;
//        }                    
//      
//        /*Cierra el fichero*/
//        try
//        {
//            fis.close();
//        }
//        catch(Exception e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
//            return;
//        }            
//        
//        /*Crea un nuevo archivo para meter los datos obtenidos*/
//        java.io.FileWriter fw;
//        try
//        {
//             fw = new java.io.FileWriter(new File("pruebaexitosa.txt"));
//        }
//        catch(Exception e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log*/
//            Login.vLog(e.getMessage());
//
//            /*Mensajea y regresa*/
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null); 
//            return;
//        }        
//        
//        /*Escribe en el archivo la nueva información*/        
//        try
//        {
//            /*Escribe en el archivo y cierralo*/
//            java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);
//            bw.write(sInfo);
//            bw.close();
//        }
//        catch(Exception e)
//        {
//            /*Esconde la forma de loading*/
//            if(Star.lCargGral!=null)
//                Star.lCargGral.setVisible(false);
//
//            /*Agrega en el log y mensajea*/
//            Login.vLog(e.getMessage());           
//            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);             
//        }        
        
    }/*Fin de private void vCliCo()*/        
    
    /*Procesa los clientes*/
    private void vCli()
    {
        /*Carga el documento del cliente 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTCli1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cli1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento del cliente 2*/        
        try
        {
            p = PDDocument.load(new File(jTCli2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cli2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento del cliente 3*/        
        try
        {
            p = PDDocument.load(new File(jTCli3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cli3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento del cliente 4*/        
        try
        {
            p = PDDocument.load(new File(jTCli4.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cli4.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento del cliente 5*/        
        try
        {
            p = PDDocument.load(new File(jTCli5.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("cli5.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de clientes*/
        try 
        {                
            sQ = "DELETE FROM emps WHERE CONCAT_WS('', ser, codemp) <> 'EMPMOS'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado del cliente 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cli1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de clientes 1 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el nombre del cliente*/
                String sNom     = stk.nextToken().trim().replace("'", "''");

                /*Obtiene la ciudad, si no hay mas datos que sea cadena vacia*/
                String sCiu;
                if(!stk.hasMoreTokens())
                    sCiu        = "";
                else
                    sCiu        = stk.nextToken().trim().replace("'", "''");                                                    

                /*Obtiene el teléfono, si no hay mas datos que sea cadena vacia*/
                String sTel;
                if(!stk.hasMoreTokens())
                    sTel        = "";
                else
                    sTel        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el CP, si no hay mas datos que sea cadena vacia*/
                String sCP;
                if(!stk.hasMoreTokens())
                    sCP        = "";
                else
                    sCP        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando cliente: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO emps(codemp,              nom,                    ciu,                    tel,              cp,      ser, codclas,    list,       sucu,                 nocaj,                  estac) "
                            + "VALUES('" + sCod + "',  '" +     sNom + "',    '" +      sCiu + "',    '" +      sTel + "',   '" + sCP+ "', '',  '',         1,      '" +Star.sSucu + "', '" + Star.sNoCaj + "', '" +  Login.sUsrG + "')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);
                    
                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado del cliente 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cli2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de clientes 2 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Quita esto en la lectura*/                
                sLec    = sLec.replace("S|N", "SN");
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene la calle, si no hay mas datos que sea cadena vacia*/
                String sCall;
                if(!stk.hasMoreTokens())
                    sCall       = "";
                else
                    sCall       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la colonia, si no hay mas datos que sea cadena vacia*/
                String sCol;
                if(!stk.hasMoreTokens())
                    sCol       = "";
                else
                    sCol       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el contácto, si no hay mas datos que sea cadena vacia*/
                String sContac;
                if(!stk.hasMoreTokens())
                    sContac     = "";
                else
                    sContac     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el RFC, si no hay mas datos que sea cadena vacia*/
                String sRFC;
                if(!stk.hasMoreTokens())
                    sRFC        = "";
                else
                    sRFC        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando cliente 2: " + sCod);
                
                /*Actualiza el registro del cliente en la base de datos*/
                try 
                {                
                    sQ = "UPDATE emps SET "
                            + "calle    = '" + sCall + "', "
                            + "col      = '" + sCol + "', "
                            + "contac   = '" + sContac + "', "
                            + "rfc      = '" + sRFC + "' "
                            + "WHERE codemp = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado del cliente 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cli3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de clientes 3 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Quita esto en la lectura*/                
                sLec    = sLec.replace("S|N", "SN");
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene la calle, si no hay mas datos que sea cadena vacia*/
                String sCall;
                if(!stk.hasMoreTokens())
                    sCall       = "";
                else
                    sCall       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el número de interior, si no hay mas datos que sea cadena vacia*/
                String sNoInt;
                if(!stk.hasMoreTokens())
                    sNoInt       = "";
                else
                    sNoInt       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el número de exterior, si no hay mas datos que sea cadena vacia*/
                String sNoExt;
                if(!stk.hasMoreTokens())
                    sNoExt       = "";
                else
                    sNoExt       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la colonia, si no hay mas datos que sea cadena vacia*/
                String sCol;
                if(!stk.hasMoreTokens())
                    sCol       = "";
                else
                    sCol       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el estado, si no hay mas datos que sea cadena vacia*/
                String sEstad;
                if(!stk.hasMoreTokens())
                    sEstad      = "";
                else
                    sEstad      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el pais, si no hay mas datos que sea cadena vacia*/
                String sPai;
                if(!stk.hasMoreTokens())
                    sPai       = "";
                else
                    sPai       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando cliente 3: " + sCod);
                
                /*Actualiza el registro del cliente en la base de datos*/
                try 
                {                
                    sQ = "UPDATE emps SET "
                            + "noint        = '" + sNoInt + "', "
                            + "noext        = '" + sNoExt + "', "
                            + "estad        = '" + sEstad + "', "
                            + "pai          = '" + sPai + "' "
                            + "WHERE codemp = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado del cliente 4*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cli4.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de clientes 4 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Quita esto en la lectura*/                
                sLec    = sLec.replace("S|N", "SN");
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene la clasificación del cliente, si no hay mas datos que sea cadena vacia*/
                String sClas;
                if(!stk.hasMoreTokens())
                    sClas       = "";
                else
                    sClas       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código del vendedor asociado, si no hay mas datos que sea cadena vacia*/
                String sVend;
                if(!stk.hasMoreTokens())
                    sVend       = "";
                else
                    sVend       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la zona del vendedor, si no hay mas datos que sea cadena vacia*/
                String sZon;
                if(!stk.hasMoreTokens())
                    sZon       = "";
                else
                    sZon       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el PLA, si no hay mas datos que sea cadena vacia*/
                String sPLA;
                if(!stk.hasMoreTokens())
                    sPLA       = "";
                else
                    sPLA       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el límite de crédito, si no hay mas datos que sea cadena vacia*/
                String sLim;
                if(!stk.hasMoreTokens())
                    sLim       = "";
                else
                    sLim       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene la moneda, si no hay mas datos que sea cadena vacia*/
                String sMon;
                if(!stk.hasMoreTokens())
                    sMon       = "";
                else
                    sMon       = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene el tipo de control, si no hay mas datos que sea cadena vacia*/
                String sTipCtrl;
                if(!stk.hasMoreTokens())
                    sTipCtrl    = "";
                else
                    sTipCtrl    = stk.nextToken().trim().replace("'", "''");                                                                    
                
                /*Obtiene la lista, si no hay mas datos que sea cadena vacia*/
                String sList;
                if(!stk.hasMoreTokens())
                    sList       = "";
                else
                    sList       = stk.nextToken().trim();                                                                    
                
                /*Obtiene la cuenta contable, si no hay mas datos que sea cadena vacia*/
                String sCtaConta;
                if(!stk.hasMoreTokens())
                    sCtaConta   = "";
                else
                    sCtaConta   = stk.nextToken().trim();                                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Creando/Obteniendo clasificación: " + sClas);
                
                /*Crea la clasificación con el consecutivo*/
                String sIdClas = sCreClas(con, sClas);
                
                /*Si hubo error entonces regresa aquí*/
                if(sIdClas==null)
                    return;
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando cliente 4: " + sCod);
                
                /*Actualiza el registro del cliente en la base de datos*/
                try 
                {                
                    sQ = "UPDATE emps SET "
                            + "codclas      = '" + sIdClas + "', "
                            + "vend        = '" + sVend + "', "
                            + "limtcred     = " + sLim.replace(",", "") + ", "
                            + "list         = " + sList + ", "
                            + "ctaconta     = '" + sCtaConta + "' "
                            + "WHERE codemp = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado del cliente 5*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("cli5.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de clientes 5 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el giro del cliente, si no hay mas datos que sea cadena vacia*/
                String sGir;
                if(!stk.hasMoreTokens())
                    sGir       = "";
                else
                    sGir       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Creando giro: " + sGir);
                
                /*Crea el giro con el consecutivo u obtenlo si ya existe*/
                String sGirCod = sCreGir(con, sGir);
                
                /*Si hubo error entonces regresa aquí*/
                if(sGirCod==null)
                    return;
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando cliente 5: " + sCod);
                
                /*Actualiza el registro del cliente en la base de datos*/
                try 
                {                
                    sQ = "UPDATE emps SET "
                            + "giro         = '" + sGirCod + "' "                            
                            + "WHERE codemp = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                 
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }
            
        /*Borra los archivos*/
        new File("cli1.txt").delete();        
        new File("cli2.txt").delete();        
        new File("cli3.txt").delete();        
        new File("cli4.txt").delete();        
        new File("cli5.txt").delete();        
                
    }/*Fin de private void vCli()*/
    

    /*Procesa los productos*/
    private void vProd()
    {
        /*Carga el documento de los productos 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTProds1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prod1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);            
            wr.close();            
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento del producto 2*/        
        try
        {
            p = PDDocument.load(new File(jTProds2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prod2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento del producto 3*/        
        try
        {
            p = PDDocument.load(new File(jTProds3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prod3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
         
        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de productos*/
        try 
        {                
            sQ = "DELETE FROM prods";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
        }
        catch(SQLException | HeadlessException e) 
        { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado del producto 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prod1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de productos 1 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es el carácter tubería entones continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();
                
                /*Obtiene la descripción del producto, si no hay mas datos que sea cadena vacia*/
                String sDescrip;
                if(!stk.hasMoreTokens())
                    sDescrip       = "";
                else
                    sDescrip       = stk.nextToken().trim().replace("'", "''");                                                                   
                
                /*Si hay algún error entonces*/                
                if(bErr)
                {
                    /*Resetea la bandera de error y regresa*/
                    bErr    = false;
                    return;
                }
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando producto: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO prods(prod,       prodop1,    clasjera,       sucu,                 nocaj,                  estac,            prodop2,            descrip,        pesman,     prelist1,      cost,           costre,         exist,          descprov,       infor,  min,    max,    bajcost,        invent,      esvta,      impue,      unid) "
                             + "VALUES('" + sCod + "',  '',         '',         '" +Star.sSucu + "', '" + Star.sNoCaj + "', '" +  Login.sUsrG + "', '',            '" + sDescrip + "',  0,          0,              0,              0,              0,              '',             '',     1,      2,      0,              1,          1,          'IVA',      'PIEZA')";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de productos 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prod2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de productos 2 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es el carácter tubería entones continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el precio de lista 1*/
                String sPre1;
                if(!stk.hasMoreTokens())
                    sPre1       = "";
                else
                    sPre1       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el precio de lista 2*/
                String sPre2;
                if(!stk.hasMoreTokens())
                    sPre2       = "";
                else
                    sPre2       = stk.nextToken().trim().replace("'", "''");
                
                /*Obtiene el precio de lista 3*/
                String sPre3;
                if(!stk.hasMoreTokens())
                    sPre3       = "";
                else
                    sPre3       = stk.nextToken().trim().replace("'", "''");

                /*Obtiene el precio de lista 4*/
                String sPre4;
                if(!stk.hasMoreTokens())
                    sPre4       = "";
                else
                    sPre4       = stk.nextToken().trim().replace("'", "''");
                
                /*Obtiene el precio de lista 5*/
                String sPre5;
                if(!stk.hasMoreTokens())
                    sPre5       = "";
                else
                    sPre5       = stk.nextToken().trim().replace("'", "''");
                
                /*Obtiene el precio sugerido*/
                String sPreSug;
                if(!stk.hasMoreTokens())
                    sPreSug     = "";
                else
                    sPreSug     = stk.nextToken().trim().replace("'", "''");
                
                /*Obtiene el costo actual*/
                String sCostActua;
                if(!stk.hasMoreTokens())
                    sCostActua  = "";
                else
                    sCostActua  = stk.nextToken().trim().replace("'", "''");
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando producto 2: " + sCod);
                
                /*Actualiza el registro del producto en la base de datos*/
                try 
                {    
                    sQ = "UPDATE prods SET "
                            + "prelist1     = " + sPre1.replace(",", "") + ", "
                            + "prelist2     = " + sPre2.replace(",", "") + ", "
                            + "prelist3     = " + sPre3.replace(",", "") + ", "
                            + "prelist4     = " + sPre4.replace(",", "") + ", "
                            + "prelist5     = " + sPre5.replace(",", "") + ", "
                            + "cost         = " + sCostActua.replace(",", "") + " "
                            + "WHERE prod   = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de productos 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prod3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de proveedores 3 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es tubería entonces continua*/
                if(sLec.charAt(0)!='|')
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene si es inventariable*/
                String sInvent;
                if(!stk.hasMoreTokens())
                    sInvent     = "";
                else
                    sInvent     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Determina el símbolo correcto para la base de datos en inventariable*/                
                if(sInvent.toLowerCase().compareTo("si")==0)
                    sInvent     = "1";
                else
                    sInvent     = "0";
                
                /*Obtiene si es kit, si no hay mas datos que sea cadena vacia*/
                String sKit;
                if(!stk.hasMoreTokens())
                    sKit        = "";
                else
                    sKit        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Determina el símbolo correcto para la base de datos en inventariable*/                
                if(sKit.toLowerCase().compareTo("si")==0)
                    sKit        = "1";
                else
                    sKit        = "0";
                
                /*Obtiene la ubicación, si no hay mas datos que sea cadena vacia*/
                String sUbi;
                if(!stk.hasMoreTokens())
                    sUbi        = "";
                else
                    sUbi        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el máximo, si no hay mas datos que sea cadena vacia*/
                String sMax;
                if(!stk.hasMoreTokens())
                    sMax        = "";
                else
                    sMax        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el mínimo, si no hay mas datos que sea cadena vacia*/
                String sMin;
                if(!stk.hasMoreTokens())
                    sMin        = "";
                else
                    sMin        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el nombre de la calsificación, si no hay mas datos que sea cadena vacia*/
                String sNomClas;
                if(!stk.hasMoreTokens())
                    sNomClas    = "";
                else
                    sNomClas    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el código de la calsificación, si no hay mas datos que sea cadena vacia*/
                String sCodClas;
                if(!stk.hasMoreTokens())
                    sCodClas    = "";
                else
                    sCodClas    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando producto 3: " + sCod);
                
                /*Actualiza el registro del producto en la base de datos*/
                try 
                {                
                    sQ = "UPDATE prods SET "
                            + "invent       = " + sInvent + ", "
                            + "compue       = " + sKit + ", "
                            + "codubi       = '" + sUbi + "', "                            
                            + "max          = " + sMax + ", "
                            + "extr3        = '" + sCodClas.replace(" ", "-").trim() + "', "
                            + "extr1        = '" + sNomClas + "', "
                            + "extr2        = '" + sCodClas.replace(" ", "").trim() + "', "
                            + "min          = " + sMin + " "                            
                            + "WHERE prod   = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
                
        /*Recorre todos los productos insertados*/                
        ResultSet   rs;
        try
        {
            sQ = "SELECT * FROM prods";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            while(rs.next())                               
            {
                /*Muestra mensaje de que esta actualizando las clasificaciones jerárquicas*/
                Star.lCargGral.jTInf.setText("Actualizando producto: " + rs.getString("prod"));
                
                /*Inicialmente esta es la clasificación*/
                String sClas    = "Clasificaciones|";
                
                /*Contiene la clasificación*/
                String sClasG   = "";
                
                /*Tokeniza el valor de la clasifiación obtenido*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(rs.getString("extr3"), "-");
                                        
                /*Recorre los tokens*/
                while(stk.hasMoreTokens())
                {                    
                    /*Completa la clasificación*/
                    sClasG      += stk.nextToken();
                    
                    /*Obtiene la cadena que le corresponde a esa clasificación*/
                    sClas       += sGetClas(con, sClasG) + "|";                                        
                }                                 
                
                /*Quita la última tubería*/
                sClas           = sClas.substring(0, sClas.length() - 1);
                
                /*Actualiza ese registro para que tenga la clasificación correcta*/
                if(sUpdRegP(con, rs.getString("id_id"), sClas)==null)
                    return;
            }
        }
        catch(SQLException e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr))); 
            return;
        }
        
        /*Actualiza los campos que utilice y dejalos limpios*/
        try 
        {                
            sQ = "UPDATE prods SET "                    
                    + "extr1            = '', "
                    + "extr3            = '', "
                    + "extr2            = ''";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
            return;
        }
        
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }

        /*Borra los archivos*/
        new File("prod1.txt").delete();        
        new File("prod2.txt").delete();        
        new File("prod3.txt").delete();                
                
    }/*Fin de private void vProd()*/
    
    
    /*Si no existe el tipo entonces crealo*/
    private String sCreTip(Connection con, String sNom)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Comprueba si este tipo ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT tip FROM tips WHERE tipdescrip = '" + sNom + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y devuelve el código que tiene*/
            if(rs.next())
                return rs.getString("tip");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
                
        /*Obtiene el último id del catálogo de tipos*/
        String sConsec  = "";
        try
        {
            sQ = "SELECT IFNULL(MAX(id_id),0) + 1 AS id FROM tips";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces obtiene el valor*/
            if(rs.next())
                sConsec = rs.getString("id");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
        
        /*Crea el nuevo tipo*/
        try 
        {                
            sQ = "INSERT INTO tips(tip,                 tipdescrip,         sucu,                   nocaj,                 estac) "
                    + "VALUES('" + sConsec + "', '" +   sNom + "', '" +     Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }    
        
        /*Devuelve el id con el que quedo la clasificación*/
        return sConsec;
        
    }/*Fin de private String sCreTip(Connection con, String sNom)*/
    
    
    /*Si no existe el concepto entonces crealo*/
    private void vCreConcepIngre(Connection con, String sConcep)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        //Comprueba si el concepto eiste en la base de datos
        int iRes    = Star.iExiste(con, sConcep.trim(), "conceps", "concep");
        
        //Si hubo error entonces regresa
        if(iRes==-1)
            return;
        
        //Si el código del concepto existe entonces regresa
        if(iRes==1)
            return;
        
        /*Crea el nuevo concepto de ingreso a almacén*/
        try 
        {                
            sQ = "INSERT INTO conceps(concep,               descrip,               sucu,                   nocaj,                 estac) "
                        + "VALUES('" + sConcep + "', '" +   sConcep + "', '" +     Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);         
        }    
                
    }/*Fin de private void vCreConcepIngre(Connection con, String sConcep)*/
    
    
    /*Si la ubicación no existe entonces creala*/
    private void vCreLug(Connection con, String sUbi)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Comprueba si este lugar ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT lug FROM lugs WHERE lug = '" + sUbi + "'";	            
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y regresa*/
            if(rs.next())
                return;
        }
        catch(SQLException e)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }
                
        /*Crea el nuevo lugar del producto*/
        try 
        {                
            sQ = "INSERT INTO lugs(lug,             lugdescrip,         sucu,                   nocaj,                 estac) "
                    + "VALUES('" + sUbi + "', '" +  sUbi + "', '" +     Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                                
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);                        
        }    
        
    }/*Fin de private void vCreLug(Connection con, String sUbi)*/
                                
                                    
    /*Procesa los proveedores*/
    private void vProv()
    {
        /*Carga el documento del proveedor 1*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTProv1.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prov1.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   

        /*Carga el documento del proveedor 2*/        
        try
        {
            p = PDDocument.load(new File(jTProv2.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prov2.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Carga el documento del proveedor 3*/        
        try
        {
            p = PDDocument.load(new File(jTProv3.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            

        /*Objeto para leer los datos del PDF*/                
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/        
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("prov3.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }

        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
        
        /*Determina si se usara puerto o no*/
        String sPort    = "";
        if(jTPortE.getText().trim().compareTo("")!=0)
            sPort       = ":" + jTPortE.getText().trim();
                
        /*Abre la base de datos*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://" + jTInstE.getText().trim() + sPort + "/" + jTBDE.getText().trim() + "?user=" + jTUsrE.getText().trim() + "&password=" + new String(jPContE.getPassword()).trim() );                           
            con.setAutoCommit(false);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              

        /*Borra la tabla de proveedores*/
        try 
        {                
            sQ = "DELETE FROM provs WHERE prov <> 'SYS'";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }               

        /*Abre el archivo creado del proveedor 1*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prov1.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de proveedores 1 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene el nombre*/
                String sNom     = stk.nextToken().trim().replace("'", "''");

                /*Obtiene la calle, si no hay mas datos que sea cadena vacia*/
                String sCall;
                if(!stk.hasMoreTokens())
                    sCall       = "";
                else
                    sCall       = stk.nextToken().trim().replace("'", "''");                                                    

                /*Obtiene la colonia, si no hay mas datos que sea cadena vacia*/
                String sCol;
                if(!stk.hasMoreTokens())
                    sCol        = "";
                else
                    sCol        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Muestra lo que se esta insertando*/
                Star.lCargGral.jTInf.setText("Insertando proveedor: " + sCod);
                
                /*Inserta el registro en la base de datos*/
                try 
                {                
                    sQ = "INSERT INTO provs(prov,               nom,                    calle,                   col,                sucu,                 nocaj,                  estac,               ser,    codclas,        bloq) "
                            + "VALUES('" + sCod + "',  '" +     sNom + "',    '" +      sCall + "',    '" +      sCol + "',   '" +   Star.sSucu + "', '" + Star.sNoCaj + "', '" +  Login.sUsrG + "',    '',     '',             0)";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado de proveedores 2*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prov2.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de proveedores 2 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;
                
                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene la ciudad, si no hay mas datos que sea cadena vacia*/
                String sCiu;
                if(!stk.hasMoreTokens())
                    sCiu       = "";
                else
                    sCiu       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el estado, si no hay mas datos que sea cadena vacia*/
                String sEstad;
                if(!stk.hasMoreTokens())
                    sEstad      = "";
                else
                    sEstad      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el teléfono, si no hay mas datos que sea cadena vacia*/
                String sTel;
                if(!stk.hasMoreTokens())
                    sTel      = "";
                else
                    sTel      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el CP, si no hay mas datos que sea cadena vacia*/
                String sCP;
                if(!stk.hasMoreTokens())
                    sCP      = "";
                else
                    sCP      = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el contácto, si no hay mas datos que sea cadena vacia*/
                String sContac;
                if(!stk.hasMoreTokens())
                    sContac     = "";
                else
                    sContac     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el RFC, si no hay mas datos que sea cadena vacia*/
                String sRFC;
                if(!stk.hasMoreTokens())
                    sRFC        = "";
                else
                    sRFC        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el rubro, si no hay mas datos que sea cadena vacia*/
                String sRub;
                if(!stk.hasMoreTokens())
                    sRub        = "";
                else
                    sRub        = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la descripción del rubro, si no hay mas datos que sea cadena vacia*/
                String sRubDescrip;
                if(!stk.hasMoreTokens())
                    sRubDescrip = "";
                else
                    sRubDescrip = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Crea el rubro si no existe*/
                vCreRub(con, sRub, sRubDescrip);
                
                /*Si hubo error entonces*/
                if(bErr)
                {
                    /*Resetea la bandera de error y regresa*/
                    bErr    = false;
                    return;
                }
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando proveedor 2: " + sCod);
                
                /*Actualiza el registro del proveedor en la base de datos*/
                try 
                {                
                    sQ = "UPDATE provs SET "
                            + "ciu          = '" + sCiu + "', "
                            + "estad        = '" + sEstad + "', "
                            + "tel          = '" + sTel + "', "                            
                            + "cp           = '" + sCP + "', "
                            + "eje1         = '" + sContac + "', "
                            + "rfc          = '" + sRFC.replace("-","") + "', "
                            + "rubr         = '" + sRub + "' "
                            + "WHERE prov   = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 {                     
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Abre el archivo creado del proveedor 3*/        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("prov3.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }

        /*Recorre todo el archivo para insertar el archivo de proveedores 3 en la base de datos*/                        
        try
        {            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Si el primer carácter no es un dítigo entonces continua*/
                if(!Character.isDigit(sLec.charAt(0)))
                    continue;

                /*Separa la línea por | para recorrerla*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "|");

                /*Obtiene el código del cliente*/
                String sCod     = stk.nextToken().trim();

                /*Obtiene la forma de pago, si no hay mas datos que sea cadena vacia*/
                String sMetPag;
                if(!stk.hasMoreTokens())
                    sMetPag     = "";
                else
                    sMetPag     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la clasificación del proveedor, si no hay mas datos que sea cadena vacia*/
                String sClas;
                if(!stk.hasMoreTokens())
                    sClas     = "";
                else
                    sClas     = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene el plazo de pago del proveedor, si no hay mas datos que sea cadena vacia*/
                String sDiaCred;
                if(!stk.hasMoreTokens())
                    sDiaCred    = "";
                else
                    sDiaCred    = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene la cuenta contable del proveedor, si no hay mas datos que sea cadena vacia*/
                String sCtaConta;
                if(!stk.hasMoreTokens())
                    sCtaConta   = "";
                else
                    sCtaConta   = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Obtiene si es persona moral o física, si no hay mas datos que sea cadena vacia*/
                String sPers;
                if(!stk.hasMoreTokens())
                    sPers       = "M";
                else
                    sPers       = stk.nextToken().trim().replace("'", "''");                                                    
                
                /*Determina si es moral o física*/
                if(sPers.compareTo("N")==0)
                    sPers       = "M";
                else
                    sPers       = "F";
                
                /*Crea la clasificacion del proveedor si no existe*/
                String sClasCod = sCreClasProv(con, sClas);
                
                /*Si hubo error regresa*/
                if(sClasCod==null)
                    return;
                
                /*Muestra lo que se esta actualizando*/
                Star.lCargGral.jTInf.setText("Actualizando proveedor 3: " + sCod);
                
                /*Actualiza el registro del proveedor en la base de datos*/
                try 
                {                
                    sQ = "UPDATE provs SET "
                            + "metpag       = '" + sMetPag + "', "
                            + "codclas      = '" + sClasCod + "', "
                            + "diacred      = '" + sDiaCred + "', "
                            + "ctaconta     = '" + sCtaConta + "', "
                            + "pers         = '" + sPers + "' "
                            + "WHERE prov   = '" + sCod + "'";                    
                    st = con.createStatement();
                    st.executeUpdate(sQ);
                 }
                 catch(SQLException | HeadlessException e) 
                 { 
                    /*Esconde la forma de loading*/
                    if(Star.lCargGral!=null)
                        Star.lCargGral.setVisible(false);

                    //Cierra la base de datos
                    if(Star.iCierrBas(con)==-1)
                        return;

                    /*Agrega en el log*/
                    Login.vLog(e.getMessage());

                    /*Mensajea y regresa*/
                    JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                    return;
                }

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    

        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);

            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                 
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;            
        }

        /*Borra los archivos*/
        new File("prov1.txt").delete();        
        new File("prov2.txt").delete();        
        new File("prov3.txt").delete();                
                
    }/*Fin de private void vProv()*/
    

    /*Crea la clasificacion del proveedor si no existe y devuelve el código con el que quedo registrado por nombre*/
    private String sCreClasProv(Connection con, String sNom)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Comprueba si esta clasificación ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT cod FROM clasprov WHERE descrip = '" + sNom + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y devuelve el código que tiene*/
            if(rs.next())
                return rs.getString("cod");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
                
        /*Obtiene el último id del catálogo de clasificaciones de clientes*/
        String sConsec  = "";
        try
        {
            sQ = "SELECT IFNULL(MAX(id_id),0) + 1 AS id FROM clasprov";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces obtiene el valor*/
            if(rs.next())
                sConsec = rs.getString("id");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
        
        /*Crea la nueva clasificación del proveedor*/
        try 
        {                
            sQ = "INSERT INTO clasprov(cod,               descrip,      sucu,                   nocaj,                 estac) "
                        + "VALUES('" + sConsec + "', '" + sNom + "', '" +   Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }    
        
        /*Devuelve el id con el que quedo la clasificación*/
        return sConsec;
        
    }/*Fin de private String sCreClas(Connection con, String sNom)*/
                
                
    /*Crea el rubro si no existe*/
    private void vCreRub(Connection con, String sCod, String sDescrip)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        
        
        
        /*Comprueba si ese rubro ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT cod FROM rubr WHERE cod = '" + sCod + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y regresa*/
            if(rs.next())
                return;
        }
        catch(SQLException e)
        {
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }
        
        /*Crea el nuevo rubro en la base de datos*/
        try 
        {                
            sQ = "INSERT INTO rubr(cod,              descrip,               sucu,                   nocaj,                 estac) "
                    + "VALUES('" + sCod + "', '" +   sDescrip + "', '" +    Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Coloca la bandera de error*/
            bErr    = true;
            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log y mensajea*/
            Login.vLog(e.getMessage());         
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);             
        }    
        
    }/*Fin de private void vCreRub(Connection con, String sCod, String sDescrip)*/
                
                
    /*Crea la clasificación con el consecutivo*/
    private String sCreClas(Connection con, String sClas)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Comprueba si ese giro ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT cod FROM clasemp WHERE descrip = '" + sClas + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y devuelve el código del giro*/
            if(rs.next())
                return rs.getString("cod");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
                
        /*Obtiene el último id del catálogo de clasificaciones de empresa*/
        String sConsec  = "";
        try
        {
            sQ = "SELECT IFNULL(MAX(id_id),0) + 1 AS id FROM clasemp";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces obtiene el valor*/
            if(rs.next())
                sConsec = rs.getString("id");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
        
        /*Crea la nueva clasificación del cliente*/
        try 
        {                
            sQ = "INSERT INTO clasemp (cod,               descrip,      sucu,                   nocaj,                 estac) "
                        + "VALUES('" + sConsec + "', '" + sClas + "', '" +  Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }    
        
        /*Devuelve el id con el que quedo la clasificación*/
        return sConsec;
        
    }/*Fin de private String sCreClas(Connection con, String sClas)*/
                
                
    /*Crea el giro con el consecutivo*/
    private String sCreGir(Connection con, String sGir)
    {
        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        

        /*Comprueba si ese giro ya existe en la base de datos*/        
        try
        {
            sQ = "SELECT gir FROM giro WHERE descrip = '" + sGir + "'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces si existe y devuelve el código del giro*/
            if(rs.next())
                return rs.getString("gir");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
                
        /*Obtiene el último id del catálogo de giros*/
        String sConsec  = "";
        try
        {
            sQ = "SELECT IFNULL(MAX(id_id),0) + 1 AS id FROM giro";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces obtiene el valor*/
            if(rs.next())
                sConsec = rs.getString("id");
        }
        catch(SQLException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }
        
        /*Crea el nuevo giro*/
        try 
        {                
            sQ = "INSERT INTO giro(gir,                 descrip,      sucu,                   nocaj,                 estac) "
                    + "VALUES('" + sConsec + "', '" +   sGir + "', '" +  Star.sSucu + "', '" +   Star.sNoCaj + "', '" + Login.sUsrG + "')";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return null;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return null;
        }    
        
        /*Devuelve el código con el que quedo el giro*/
        return sConsec;
        
    }/*Fin de private String sCreGir(Connection con, String sClas)*/
    
    
    /*Procesa el archivo para insertarlo en la base de datos*/
    private void vInsPol()
    {
        /*Carga el documento del archivo*/
        PDDocument p;        
        try
        {
            p = PDDocument.load(new File(jTRutPol.getText()));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
                    
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }            
        
        /*Objeto para leer los datos del PDF*/
        PDFTextStripper stripper;        
        try
        {
            stripper = new PDFTextStripper();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Leera desde la primera hoja hasta la última*/
        stripper.setStartPage(1);
        stripper.setEndPage(p.getNumberOfPages());

        /*Abre el archivo*/
        java.io.BufferedWriter wr;                
        try
        {
            wr = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(new File("pol.txt"))));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Escribe el buffer del PDF en el fichero abierto*/
        try
        {
            stripper.writeText(p, wr);
            wr.close();
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));             
            return;
        }
        
        /*Cierra el documento PDF*/
        try
        {
            p.close();
        }   
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }   
                        
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " vSin() No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                
        
        /*Inicia la transacción*/
        try           
        {
            con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }

        /*Declara variables de la base de datos*/
        Statement   st;                
        String      sQ              = "";                              
        
        /*Borra la tabla temporal de pólizas*/
        try 
        {                
            sQ = "DELETE FROM tmppols";                    
            st = con.createStatement();
            st.executeUpdate(sQ);
         }
         catch(SQLException | HeadlessException e) 
         { 
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }    
        
        /*Abre el archivo creado para leerlo*/
        java.io.BufferedReader read;        
        try
        {
            read = new java.io.BufferedReader(new java.io.FileReader("pol.txt"));
        }
        catch(Exception e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }
                
        /*Recorre todo el archivo para insertar el archivo en la base de datos temporal de contabilidad*/                        
        try
        {       
            /*Contiene los campos del encabezado encabezado*/                
            String sPerio       = "";
            String sTip         = "";
            String sFol         = "";
            String sFech        = "";

            /*Para saber si es la primera vez del archivo*/
            boolean bSiF    = true;
            
            /*Recorre todo el fichero*/
            String sLec;
            while((sLec = read.readLine())!=null) 
            {
                /*Quita todas las comas de la cadena*/
                sLec    = sLec.replace(",", "");
                
                /*Separa la cadena en tokens*/
                java.util.StringTokenizer stk = new java.util.StringTokenizer(sLec, "\"\"");                
                                
                /*Obtiene el valor del token*/
                String sTok = stk.nextToken();
                
                /*Si es la primera vez que se lee el fichero entonces le el siguiente token y colcoa la bandera en false*/
                if(bSiF)                
                {
                    sTok        = stk.nextToken();
                    bSiF        = false;
                }
                                
                /*Contiene los campos de movimientos*/
                String sRefer;
                String sNoCta;
                String sConcep;
                String sImpoCarg;
                String sImpoAbon;
                
                /*Si es número el primer carácter entonces esta en el encabezado*/
                if(Character.isDigit(sTok.charAt(0)))
                {
                    /*Lee los encabezados*/
                    sPerio  = sTok;                    
                    sTip    = stk.nextToken().trim();                    
                    sFol    = stk.nextToken().trim();                    
                    sFech   = stk.nextToken().trim();                    
                }                               
                /*Else es un movimiento entonces*/
                else
                {
                    /*Si ya no tiene elementos entonces continua*/
                    if(!stk.hasMoreTokens())
                        continue;
                    
                    /*Lee los datos de los movimientos*/
                    sRefer      = stk.nextToken();                        
                    sNoCta      = stk.nextToken().replace(" ", "").trim();                                        
                    sConcep     = stk.nextToken().trim();                         
                    sImpoCarg   = stk.nextToken().trim();                          
                    sImpoAbon   = stk.nextToken().trim();                                                
                    
                    /*Completa la cuenta con los ceros que le falten*/
                    if(sNoCta.length()==4)
                        sNoCta  += "00000000";
                    else if(sNoCta.length()==8)
                        sNoCta  += "0000";
                    
                    /*Si tiene símbolo de menos entonces*/
                    String sCance   = "0";
                    if(sImpoCarg.contains("-") || sImpoAbon.contains("-"))
                    {                        
                        /*Quitale a los importes el símbolo de -*/
                        sImpoCarg   = sImpoCarg.replace("-", "");
                        sImpoAbon   = sImpoAbon.replace("-", "");
                        
                        /*Coloca la bandera para saber si esta o no cancelado el movimento*/
                        sCance      = "1";
                    }
                    
                    /*Si alguno de los importes es cadena vacia entonces que sea 0*/
                    if(sImpoCarg.compareTo("")==0)
                        sImpoCarg   = "0";
                    if(sImpoAbon.compareTo("")==0)
                        sImpoAbon   = "0";
                    
                    /*Muestra lo que se esta insertando*/
                    Star.lCargGral.jTInf.setText("Insertano póliza de fólio: " + sFol);
                    
                    /*Inserta el movimiento en la tabla*/
                    try 
                    {                
                        sQ = "INSERT INTO tmppols(period,          tip,             nofol,              fech,              refer,                                      nocta,                  concep,                                     impocarg,           impoabon,           cance,          export) "
                                    + "VALUES(" + sPerio + ", '" + sTip + "',  '" + sFol + "',    '" +  sFech + "',  '" +  sRefer.replace("'", "''") + "',    '" +     sNoCta + "',      '" +  sConcep.replace("'", "''") + "',     " +    sImpoCarg + ", " +  sImpoAbon + ", " +  sCance + ",     0)";                                                                                           
                        st = con.createStatement();
                        st.executeUpdate(sQ);
                     }
                     catch(SQLException | HeadlessException e) 
                     { 
                        /*Esconde la forma de loading*/
                        if(Star.lCargGral!=null)
                            Star.lCargGral.setVisible(false);

                        //Cierra la base de datos
                        if(Star.iCierrBas(con)==-1)
                            return;

                        /*Agrega en el log*/
                        Login.vLog(e.getMessage());

                        /*Mensajea y regresa*/
                        JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                        return;
                    }
                    
                }/*Fin de else*/                                                   

            }/*Fin de while((sLec = read.readLine())!=null) */
        }   
        catch(IOException | NumberFormatException | HeadlessException e)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega enel log*/
            Login.vLog(e.getMessage());
            
            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error  por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconEr)));                     
            return;
        }                    
        
        /*Termina la transacción*/
        try           
        {
            con.commit();
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
                
        //Cierra la base de datos
        if(Star.iCierrBas(con)==-1)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            //Regresa
            return;
        }
            
        /*Cierra el archivo*/
        try           
        {
            read.close();
        }
        catch(Exception ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/   
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);      
            return;
        }
        
        /*Borra el archivo .txt*/
        new File("pol.txt").delete();
        
        /*Esconde la forma de loading*/
        if(Star.lCargGral!=null)
            Star.lCargGral.setVisible(false);       
                
    }/*Fin de private void vInsPol()*/
            
            
    /*Crea la tabla temporal de las pólizas*/
    private void vCreTabPols()
    {
        /*Abre la base de datos de contabilidad*/        
        Connection  con;  
        try
        {
            con = DriverManager.getConnection("jdbc:sqlserver://" + jTInst.getText().trim() + ";user=" + jTUsr.getText().trim() + ";password=" + new String(jPCont.getPassword()).trim() + ";database=" + jTBD.getText().trim());            
        }
        catch(SQLException ex)
        {
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
            
            /*Agrega en el log*/
            Login.vLog(ex.getMessage());

            /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " vSin() No se pudo abrir la base de datos. \nPosiblemente este mal escrito el nombre de la base de datos, usuario, puerto o contraseña. Error:\n" + ex.getMessage(), "Error al abrir base de datos", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
            return;
        }                

        /*Declara variables de la base de datos*/
        Statement   st;
        ResultSet   rs;        
        String      sQ              = "";                              
        
        /*Comprueba si existe la tabla existe*/
        boolean bExi    = true;
        try
        {
            sQ = "SELECT COUNT(*) AS coun FROM sys.tables WHERE name = 'tmppols' AND type = 'U'";	
            st = con.createStatement();
            rs = st.executeQuery(sQ);
            /*Si hay datos entonces*/
            if(rs.next())
            {
                /*Si el conteo es igual a 0 entonces no existe la tabla y coloca la bandera*/
                if(rs.getInt("coun")==0)
                    bExi    = false;
            }
        }
        catch(SQLException e)
        {            
            /*Esconde la forma de loading*/
            if(Star.lCargGral!=null)
                Star.lCargGral.setVisible(false);
         
            //Cierra la base de datos
            if(Star.iCierrBas(con)==-1)
                return;
            
            /*Agrega en el log*/
            Login.vLog(e.getMessage());
            
	    /*Mensajea y regresa*/
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
            return;
        }
        
        /*Si la tabla no existe entonces*/
        if(!bExi)
        {
            /*Crea la tabla temporal*/
            try 
            {                
                sQ = "CREATE TABLE tmppols(id INT PRIMARY KEY IDENTITY, period INT, tip VARCHAR(3), nofol VARCHAR(30), fech VARCHAR(30), refer VARCHAR(MAX), nocta VARCHAR(100), concep VARCHAR(MAX), impocarg FLOAT, impoabon FLOAT, cance BIT, export BIT)";                    
                st = con.createStatement();
                st.executeUpdate(sQ);
             }
             catch(SQLException | HeadlessException e) 
             { 
                /*Esconde la forma de loading*/
                if(Star.lCargGral!=null)
                    Star.lCargGral.setVisible(false);

                //Cierra la base de datos
                if(Star.iCierrBas(con)==-1)
                    return;
            
                /*Agrega en el log*/
                Login.vLog(e.getMessage());

                /*Mensajea y regresa*/
                JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error en " + sQ + " por " + e.getMessage(), "Error BD", JOptionPane.ERROR_MESSAGE, null); 
                return;
            }    
            
        }/*Fin de if(!bExi)*/       
        
        //Cierra la base de datos
        Star.iCierrBas(con);            

    }/*Fin de private void vCreTabPols()*/
    
    
    /*Procesa las pólizas*/
    private void vPol()
    {
        /*Crea la tabla de pólizas si no existe*/
        vCreTabPols();
            
        /*Si hay ruta en el campo de las pólizas entonces*/
        if(jTRutPol.getText().compareTo("")!=0)
        {
            /*Si el archivo no existe entonces*/
            if(!new File(jTRutPol.getText()).exists())
            {
                /*Mensajea*/
                JOptionPane.showMessageDialog(null, "La ruta del archivo de pólizas no existe.", "Pólizas", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource(Star.sRutIconAd)));
                
                /*Coloca el borde rojo*/                               
                jTRutPol.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED));
                
                /*Pon el foco del teclado en el control y regresa*/
                jTRutPol.grabFocus();
                return;
            }                                                
            
            /*Procesa el archivo para insertarlo en la base de datos*/
            vInsPol();            
        }
        
        /*Obtiene la contraseña de contabilidad*/
        String sContConta   = new String(jPContConta.getPassword());
        
        /*Si es cadena vacia entonces que sea coma*/
        if(sContConta.compareTo("")==0)
            sContConta      = ",";
        
        /*Manda a llamar join data para sincronizar las pólizas*/
        try
        {
            Process pro = new ProcessBuilder("joindata.exe",jTInst.getText().trim(),jTUsr.getText().trim(), new String(jPCont.getPassword()), jTBD.getText().trim(), "pols", jTUsrConta.getText().trim(), jTNomConta.getText().trim(), sContConta).start();
        }
        catch(Exception e)
        {
            /*Agrega en el log*/
            Login.vLog(e.getMessage());           
            JOptionPane.showMessageDialog(null, this.getClass().getName() + " Error por " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);                  
        }            
        
    }/*Fin de private void vPol()*/
    
    
    /*Función escalable para cuando se presiona una tecla en el módulo*/
    void vKeyPreEsc(java.awt.event.KeyEvent evt)
    {
        /*Pon la bandera para saber que ya hubó un evento y no se desloguie*/
        bIdle   = true;
        
        /*Si se presiona la tecla de escape presiona el botón de salir*/
        /*Else if se presiona Alt + F4 entonces presiona el botón de salir*/
        if(evt.isAltDown() && evt.getKeyCode() == KeyEvent.VK_F4)
            jBSal.doClick();
                else if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) 
            jBSal.doClick();        
        /*Si se presiona CTRL + G entonces presiona el botón de guardar*/
        else if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_G)
            jBGuaC.doClick();        
                
    }/*Fin de void vKeyPreEsc(java.awt.event.KeyEvent evt)*/
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAct;
    private javax.swing.JButton jBActFij;
    private javax.swing.JButton jBAlma;
    private javax.swing.JButton jBCXC;
    private javax.swing.JButton jBCXP;
    private javax.swing.JButton jBClas;
    private javax.swing.JButton jBCli1;
    private javax.swing.JButton jBCli2;
    private javax.swing.JButton jBCli3;
    private javax.swing.JButton jBCli4;
    private javax.swing.JButton jBCli5;
    private javax.swing.JButton jBCliClo;
    private javax.swing.JButton jBComp;
    private javax.swing.JButton jBComp1;
    private javax.swing.JButton jBComp2;
    private javax.swing.JButton jBComp3;
    private javax.swing.JButton jBComp4;
    private javax.swing.JButton jBComp5;
    private javax.swing.JButton jBCot1;
    private javax.swing.JButton jBCot2;
    private javax.swing.JButton jBCot3;
    private javax.swing.JButton jBCot4;
    private javax.swing.JButton jBCot5;
    private javax.swing.JButton jBCtas;
    private javax.swing.JButton jBCtas2;
    private javax.swing.JButton jBCtas3;
    private javax.swing.JButton jBDepGar;
    private javax.swing.JButton jBExist;
    private javax.swing.JButton jBFac;
    private javax.swing.JButton jBGuaC;
    private javax.swing.JButton jBInter;
    private javax.swing.JButton jBKard;
    private javax.swing.JButton jBPadro;
    private javax.swing.JButton jBPol;
    private javax.swing.JButton jBProb;
    private javax.swing.JButton jBProbConta;
    private javax.swing.JButton jBProbE;
    private javax.swing.JButton jBProds1;
    private javax.swing.JButton jBProds2;
    private javax.swing.JButton jBProds3;
    private javax.swing.JButton jBProv1;
    private javax.swing.JButton jBProv2;
    private javax.swing.JButton jBProv3;
    private javax.swing.JButton jBRem1;
    private javax.swing.JButton jBRem2;
    private javax.swing.JButton jBRem3;
    private javax.swing.JButton jBRem4;
    private javax.swing.JButton jBRem5;
    private javax.swing.JButton jBSal;
    private javax.swing.JButton jBSer1;
    private javax.swing.JButton jBSer2;
    private javax.swing.JButton jBVend;
    private javax.swing.JButton jBVerCta;
    private javax.swing.JButton jBVisPol;
    private javax.swing.JButton jBVta1;
    private javax.swing.JButton jBVta2;
    private javax.swing.JButton jBVta3;
    private javax.swing.JButton jBVta4;
    private javax.swing.JButton jBVta5;
    private javax.swing.JCheckBox jCMosC;
    private javax.swing.JCheckBox jCMosCE;
    private javax.swing.JCheckBox jCSinAct;
    private javax.swing.JCheckBox jCSinAlma;
    private javax.swing.JCheckBox jCSinCXC;
    private javax.swing.JCheckBox jCSinCXP;
    private javax.swing.JCheckBox jCSinClas;
    private javax.swing.JCheckBox jCSinCli;
    private javax.swing.JCheckBox jCSinCliCo;
    private javax.swing.JCheckBox jCSinComp;
    private javax.swing.JCheckBox jCSinCot;
    private javax.swing.JCheckBox jCSinCtas;
    private javax.swing.JCheckBox jCSinExist;
    private javax.swing.JCheckBox jCSinKard;
    private javax.swing.JCheckBox jCSinPadro;
    private javax.swing.JCheckBox jCSinPol;
    private javax.swing.JCheckBox jCSinProds;
    private javax.swing.JCheckBox jCSinProvs;
    private javax.swing.JCheckBox jCSinRem;
    private javax.swing.JCheckBox jCSinSer;
    private javax.swing.JCheckBox jCSinVend;
    private javax.swing.JCheckBox jCSinVta;
    private javax.swing.JLabel jLAyu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jP1;
    private javax.swing.JPanel jPAdmin;
    private javax.swing.JPanel jPAsien;
    private javax.swing.JPasswordField jPCont;
    private javax.swing.JPasswordField jPContConta;
    private javax.swing.JPasswordField jPContE;
    private javax.swing.JPanel jPConta;
    private javax.swing.JPanel jPPrincip;
    private javax.swing.JTextField jTAbon1Arr;
    private javax.swing.JTextField jTAbon1Flet;
    private javax.swing.JTextField jTAbon1Hon;
    private javax.swing.JTextField jTAbon1Vta;
    private javax.swing.JTextField jTAbon2Vta;
    private javax.swing.JTextField jTAbon3Vta;
    private javax.swing.JTextField jTActFij;
    private javax.swing.JTextField jTAlma;
    private javax.swing.JTextField jTBD;
    private javax.swing.JTextField jTBDE;
    private javax.swing.JTextField jTBanc;
    private javax.swing.JTextField jTCXC;
    private javax.swing.JTextField jTCXP;
    private javax.swing.JTextField jTCarg1Arr;
    private javax.swing.JTextField jTCarg1Flet;
    private javax.swing.JTextField jTCarg1Hon;
    private javax.swing.JTextField jTCarg1Merc;
    private javax.swing.JTextField jTCarg1Vta;
    private javax.swing.JTextField jTCarg2Arr;
    private javax.swing.JTextField jTCarg2Flet;
    private javax.swing.JTextField jTCarg2Gast;
    private javax.swing.JTextField jTCarg2Hon;
    private javax.swing.JTextField jTCarg2Merc;
    private javax.swing.JTextField jTCargCV;
    private javax.swing.JTextField jTClas;
    private javax.swing.JTextField jTCli1;
    private javax.swing.JTextField jTCli2;
    private javax.swing.JTextField jTCli3;
    private javax.swing.JTextField jTCli4;
    private javax.swing.JTextField jTCli5;
    private javax.swing.JTextField jTCliCo;
    private javax.swing.JTextField jTComp1;
    private javax.swing.JTextField jTComp2;
    private javax.swing.JTextField jTComp3;
    private javax.swing.JTextField jTComp4;
    private javax.swing.JTextField jTComp5;
    private javax.swing.JTextField jTCot1;
    private javax.swing.JTextField jTCot2;
    private javax.swing.JTextField jTCot3;
    private javax.swing.JTextField jTCot4;
    private javax.swing.JTextField jTCot5;
    private javax.swing.JTextField jTCtaAct;
    private javax.swing.JTextField jTCtaCapi;
    private javax.swing.JTextField jTCtaPas;
    private javax.swing.JTextField jTCtas;
    private javax.swing.JTextField jTCtas2;
    private javax.swing.JTextField jTCtas3;
    private javax.swing.JTextField jTDevSobVta;
    private javax.swing.JTextField jTExist;
    private javax.swing.JTextField jTGaran;
    private javax.swing.JTextField jTIVAAcred;
    private javax.swing.JTextField jTIVAPendAc;
    private javax.swing.JTextField jTInst;
    private javax.swing.JTextField jTInstE;
    private javax.swing.JTextField jTIvaPendPag;
    private javax.swing.JTextField jTIvaXPag;
    private javax.swing.JTextField jTKard;
    private javax.swing.JTextField jTNomConta;
    private javax.swing.JTextField jTPort;
    private javax.swing.JTextField jTPortE;
    private javax.swing.JTextField jTProds1;
    private javax.swing.JTextField jTProds2;
    private javax.swing.JTextField jTProds3;
    private javax.swing.JTextField jTProv1;
    private javax.swing.JTextField jTProv2;
    private javax.swing.JTextField jTProv3;
    private javax.swing.JTextField jTR1;
    private javax.swing.JTextField jTR2;
    private javax.swing.JTextField jTR3;
    private javax.swing.JTextField jTR4;
    private javax.swing.JTextField jTR5;
    private javax.swing.JTextField jTRInte1;
    private javax.swing.JTextField jTRInte2;
    private javax.swing.JTextField jTRRent1;
    private javax.swing.JTextField jTRRent2;
    private javax.swing.JTextField jTRVta1;
    private javax.swing.JTextField jTRVta2;
    private javax.swing.JTextField jTRetHono;
    private javax.swing.JTextField jTRetISR;
    private javax.swing.JTextField jTRetIVAFlet;
    private javax.swing.JTextField jTRutPadro;
    private javax.swing.JTextField jTRutPol;
    private javax.swing.JTextField jTSer1;
    private javax.swing.JTextField jTSer2;
    private javax.swing.JTextField jTUsr;
    private javax.swing.JTextField jTUsrConta;
    private javax.swing.JTextField jTUsrE;
    private javax.swing.JTextField jTVend;
    private javax.swing.JTextField jTVta1;
    private javax.swing.JTextField jTVta2;
    private javax.swing.JTextField jTVta3;
    private javax.swing.JTextField jTVta4;
    private javax.swing.JTextField jTVta5;
    private javax.swing.JTabbedPane jTabb;
    // End of variables declaration//GEN-END:variables

}/*Fin de public class Clientes extends javax.swing.JFrame */